{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/alipayQR.JPG","path":"img/alipayQR.JPG","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/pwa_icon_512.png","path":"img/pwa_icon_512.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/wechatQR.JPG","path":"img/wechatQR.JPG","modified":0,"renderable":1},{"_id":"source/download/MobaXterm.exe","path":"download/MobaXterm.exe","modified":0,"renderable":0},{"_id":"source/gallery/cover/dicer.png","path":"gallery/cover/dicer.png","modified":0,"renderable":0},{"_id":"source/gallery/cover/hlm.png","path":"gallery/cover/hlm.png","modified":0,"renderable":0},{"_id":"source/gallery/cover/sklearn.png","path":"gallery/cover/sklearn.png","modified":0,"renderable":0},{"_id":"source/gallery/cover/gitpage.png","path":"gallery/cover/gitpage.png","modified":0,"renderable":0},{"_id":"source/gallery/photos/ymy.png","path":"gallery/photos/ymy.png","modified":0,"renderable":0},{"_id":"source/gallery/others/GoPool.png","path":"gallery/others/GoPool.png","modified":0,"renderable":0},{"_id":"source/gallery/others/LagrangeMultipliers2D.svg","path":"gallery/others/LagrangeMultipliers2D.svg","modified":0,"renderable":0},{"_id":"source/gallery/others/hlm-part.png","path":"gallery/others/hlm-part.png","modified":0,"renderable":0},{"_id":"source/gallery/others/mobaxterm-http1.png","path":"gallery/others/mobaxterm-http1.png","modified":0,"renderable":0},{"_id":"source/gallery/others/hlm-all.png","path":"gallery/others/hlm-all.png","modified":0,"renderable":0},{"_id":"source/gallery/others/mobaxterm-http2.png","path":"gallery/others/mobaxterm-http2.png","modified":0,"renderable":0},{"_id":"source/gallery/others/python2-http.png","path":"gallery/others/python2-http.png","modified":0,"renderable":0},{"_id":"source/gallery/others/python3-http.png","path":"gallery/others/python3-http.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_BOOM! , Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_BOOM! , Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Bloodmoon Ruins, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Bloodmoon Ruins, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Construction of the Monolith, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Construction of the Monolith, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Crystal Caverns , Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Crystal Caverns , Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Greater Celandine, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Greater Celandine, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Green sketches , Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Green sketches , Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Hi...Dude!, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Hi...Dude!, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Homecoming, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Homecoming, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Kaero, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Kaero, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Magmar, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Magmar, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Magmar, Anton Fadeev_02.jpg","path":"gallery/thumbnails/0_Magmar, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Malephar, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Malephar, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Monolith - view1, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Monolith - view1, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Obsidian Woods, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Obsidian Woods, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Obsidian woods_2, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Obsidian woods_2, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Rasha, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Rasha, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Save me, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Save me, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Rasha 2, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Rasha 2, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Sea Landscapes, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Sea Landscapes, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Shim'zar, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Shim'zar, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Songhai City, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Songhai City, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Square landscapes 2, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Square landscapes 2, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Square landscapes, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Square landscapes, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Star Crystals, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Star Crystals, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_The Air Bridge, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_The Air Bridge, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_The Frozen Floes of Northern Celandine, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_The Frozen Floes of Northern Celandine, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_The Gate , Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_The Gate , Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_The Giant Ice Floes, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_The Giant Ice Floes, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_The Great Tree of Eyos, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_The Great Tree of Eyos, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_The Star, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_The Star, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Vanar, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Vanar, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Vermillion Forest, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Vermillion Forest, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Whistling Blades, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Whistling Blades, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Windcliffe, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Windcliffe, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_Xaan, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_Xaan, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/0_werewolf, Anton Fadeev_01.jpg","path":"gallery/thumbnails/0_werewolf, Anton Fadeev_01.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Bad Idea, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Bad Idea, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Construction of the Monolith, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Construction of the Monolith, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Dog and Hot springs, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Dog and Hot springs, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Green sketches , Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Green sketches , Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Hi...Dude!, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Hi...Dude!, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Rasha 2, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Rasha 2, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Rasha, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Rasha, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Sea Landscapes, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Sea Landscapes, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Shim'zar, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Shim'zar, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Square landscapes 2, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Square landscapes 2, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_Square landscapes, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_Square landscapes, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_The Frozen Floes of Northern Celandine, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_The Frozen Floes of Northern Celandine, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/1_The Great Tree of Eyos, Anton Fadeev_02.jpg","path":"gallery/thumbnails/1_The Great Tree of Eyos, Anton Fadeev_02.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/2_Sea Landscapes, Anton Fadeev_03.jpg","path":"gallery/thumbnails/2_Sea Landscapes, Anton Fadeev_03.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/2_Square landscapes 2, Anton Fadeev_03.jpg","path":"gallery/thumbnails/2_Square landscapes 2, Anton Fadeev_03.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/2_Square landscapes, Anton Fadeev_03.jpg","path":"gallery/thumbnails/2_Square landscapes, Anton Fadeev_03.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/3_Square landscapes 2, Anton Fadeev_04.jpg","path":"gallery/thumbnails/3_Square landscapes 2, Anton Fadeev_04.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/3_Square landscapes, Anton Fadeev_04.jpg","path":"gallery/thumbnails/3_Square landscapes, Anton Fadeev_04.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/404-bg.jpg","path":"gallery/thumbnails/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/3_Sea Landscapes, Anton Fadeev_04.jpg","path":"gallery/thumbnails/3_Sea Landscapes, Anton Fadeev_04.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/4_Square landscapes, Anton Fadeev_05.jpg","path":"gallery/thumbnails/4_Square landscapes, Anton Fadeev_05.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/4_Square landscapes 2, Anton Fadeev_05.jpg","path":"gallery/thumbnails/4_Square landscapes 2, Anton Fadeev_05.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/5_Square landscapes, Anton Fadeev_06.jpg","path":"gallery/thumbnails/5_Square landscapes, Anton Fadeev_06.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/6_Square landscapes, Anton Fadeev_07.jpg","path":"gallery/thumbnails/6_Square landscapes, Anton Fadeev_07.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/Goroutine.png","path":"gallery/thumbnails/Goroutine.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/BadIdea.jpg","path":"gallery/thumbnails/BadIdea.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/Lagrange_polynomial.svg","path":"gallery/thumbnails/Lagrange_polynomial.svg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/Mariadb.png","path":"gallery/thumbnails/Mariadb.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/SSL.png","path":"gallery/thumbnails/SSL.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/acm.jpg","path":"gallery/thumbnails/acm.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/about-Dicer-gentle.jpg","path":"gallery/thumbnails/about-Dicer-gentle.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/apple-touch-icon.png","path":"gallery/thumbnails/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/avatar_g.jpg","path":"gallery/thumbnails/avatar_g.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/avatar_m.jpg","path":"gallery/thumbnails/avatar_m.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/bit.png","path":"gallery/thumbnails/bit.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/dear.jpg","path":"gallery/thumbnails/dear.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/favicon.ico","path":"gallery/thumbnails/favicon.ico","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/dicer.png","path":"gallery/thumbnails/dicer.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/gate-wall.jpg","path":"gallery/thumbnails/gate-wall.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/girl-meets-bear2.png","path":"gallery/thumbnails/girl-meets-bear2.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/girl-meets-bear3.png","path":"gallery/thumbnails/girl-meets-bear3.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/girl-meets-bear1.png","path":"gallery/thumbnails/girl-meets-bear1.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/girl-meets-bear4.png","path":"gallery/thumbnails/girl-meets-bear4.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/girl-meets-bear5.png","path":"gallery/thumbnails/girl-meets-bear5.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/girl-meets-bear6.png","path":"gallery/thumbnails/girl-meets-bear6.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/girl-meets-bear7.png","path":"gallery/thumbnails/girl-meets-bear7.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/girl-meets-bear8.png","path":"gallery/thumbnails/girl-meets-bear8.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/girl-pick.jpg","path":"gallery/thumbnails/girl-pick.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/hei.jpg","path":"gallery/thumbnails/hei.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/hei2.JPG","path":"gallery/thumbnails/hei2.JPG","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/hei3.jpg","path":"gallery/thumbnails/hei3.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/home-bg-art.jpg","path":"gallery/thumbnails/home-bg-art.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/home-bg-geek.jpg","path":"gallery/thumbnails/home-bg-geek.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/home-bg-o.jpg","path":"gallery/thumbnails/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/home-bg.jpg","path":"gallery/thumbnails/home-bg.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/http.png","path":"gallery/thumbnails/http.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/jiaozuo-onsite.jpg","path":"gallery/thumbnails/jiaozuo-onsite.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/jiaozuo-onsite.png","path":"gallery/thumbnails/jiaozuo-onsite.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/johannes-roots-in-the-treetops-by-jkroots-d9t9p4y.jpg","path":"gallery/thumbnails/johannes-roots-in-the-treetops-by-jkroots-d9t9p4y.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/kite.png","path":"gallery/thumbnails/kite.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-02.JPG","path":"gallery/thumbnails/post-bg-02.JPG","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-2015.jpg","path":"gallery/thumbnails/post-bg-2015.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-BJJ.jpg","path":"gallery/thumbnails/post-bg-BJJ.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-Seeshoumaru.jpg","path":"gallery/thumbnails/post-bg-Seeshoumaru.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-airport.JPG","path":"gallery/thumbnails/post-bg-airport.JPG","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-YesOrNo.jpg","path":"gallery/thumbnails/post-bg-YesOrNo.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-alibaba.jpg","path":"gallery/thumbnails/post-bg-alibaba.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-ancent-costume-girl.jpg","path":"gallery/thumbnails/post-bg-ancent-costume-girl.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-android.jpg","path":"gallery/thumbnails/post-bg-android.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-bench.jpg","path":"gallery/thumbnails/post-bg-bench.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-anime-girl.jpg","path":"gallery/thumbnails/post-bg-anime-girl.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-color-keyboard.JPG","path":"gallery/thumbnails/post-bg-color-keyboard.JPG","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-cook.jpg","path":"gallery/thumbnails/post-bg-cook.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-debug.png","path":"gallery/thumbnails/post-bg-debug.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-coffee.jpeg","path":"gallery/thumbnails/post-bg-coffee.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-desk.jpg","path":"gallery/thumbnails/post-bg-desk.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-digital-native.jpg","path":"gallery/thumbnails/post-bg-digital-native.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-e2e-ux.jpg","path":"gallery/thumbnails/post-bg-e2e-ux.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-forest.jpg","path":"gallery/thumbnails/post-bg-forest.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-foxg.JPG","path":"gallery/thumbnails/post-bg-foxg.JPG","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-g1.JPG","path":"gallery/thumbnails/post-bg-g1.JPG","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-g2.JPG","path":"gallery/thumbnails/post-bg-g2.JPG","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-ghost.jpg","path":"gallery/thumbnails/post-bg-ghost.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-g3.JPG","path":"gallery/thumbnails/post-bg-g3.JPG","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-github-cup.jpg","path":"gallery/thumbnails/post-bg-github-cup.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-hacker.jpg","path":"gallery/thumbnails/post-bg-hacker.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-hwl.JPG","path":"gallery/thumbnails/post-bg-hwl.JPG","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-iWatch.jpg","path":"gallery/thumbnails/post-bg-iWatch.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-ios10.jpg","path":"gallery/thumbnails/post-bg-ios10.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-ios9-web.jpg","path":"gallery/thumbnails/post-bg-ios9-web.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-ioses.jpg","path":"gallery/thumbnails/post-bg-ioses.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-js-version.jpg","path":"gallery/thumbnails/post-bg-js-version.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-keybord.jpg","path":"gallery/thumbnails/post-bg-keybord.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-kuaidi.jpg","path":"gallery/thumbnails/post-bg-kuaidi.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-map.jpg","path":"gallery/thumbnails/post-bg-map.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-miui-ux.jpg","path":"gallery/thumbnails/post-bg-miui-ux.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-miui6.jpg","path":"gallery/thumbnails/post-bg-miui6.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-mma-0.png","path":"gallery/thumbnails/post-bg-mma-0.png","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-mma-1.jpg","path":"gallery/thumbnails/post-bg-mma-1.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-mma-2.jpg","path":"gallery/thumbnails/post-bg-mma-2.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-mma-3.jpg","path":"gallery/thumbnails/post-bg-mma-3.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-mma-4.jpg","path":"gallery/thumbnails/post-bg-mma-4.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-mma-5.jpg","path":"gallery/thumbnails/post-bg-mma-5.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-mma-6.jpg","path":"gallery/thumbnails/post-bg-mma-6.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-re-vs-ng2.jpg","path":"gallery/thumbnails/post-bg-re-vs-ng2.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-red-moon.jpg","path":"gallery/thumbnails/post-bg-red-moon.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-os-metro.jpg","path":"gallery/thumbnails/post-bg-os-metro.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-rwd.jpg","path":"gallery/thumbnails/post-bg-rwd.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-sunbust.jpg","path":"gallery/thumbnails/post-bg-sunbust.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-ring-girl.jpg","path":"gallery/thumbnails/post-bg-ring-girl.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-swift.jpg","path":"gallery/thumbnails/post-bg-swift.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-swift2.jpg","path":"gallery/thumbnails/post-bg-swift2.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-universe.jpg","path":"gallery/thumbnails/post-bg-universe.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-bg-unix-linux.jpg","path":"gallery/thumbnails/post-bg-unix-linux.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/roman-kraft-WUvBROPOsuo-unsplash.jpg","path":"gallery/thumbnails/roman-kraft-WUvBROPOsuo-unsplash.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/sylvain-sarrailh-wandering.jpg","path":"gallery/thumbnails/sylvain-sarrailh-wandering.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/post-sample-image.jpg","path":"gallery/thumbnails/post-sample-image.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/tag-bg.jpg","path":"gallery/thumbnails/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/gallery/thumbnails/tag-bg-o.jpg","path":"gallery/thumbnails/tag-bg-o.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"b33f96ec20c29ae39b653ea17b617e08f01b1665","modified":1621349165245},{"_id":"source/about/index.md","hash":"9f48c8f0816f448a55dbeaddfd54c2652e6a9ee2","modified":1617032614358},{"_id":"source/_posts/2017-Zhejiang-provincial-competition.md","hash":"b2b96ae3ddfb00c0b3469c97630bea6ddd52f155","modified":1616920756100},{"_id":"source/_posts/2019-Henan-CCPC-provincial-competition.md","hash":"0b6864723f86b08a27e589e9f084af68f2d3c259","modified":1616920779006},{"_id":"source/_posts/2019-ICPC-nanjing.md","hash":"d81cdf965b9fcb4c7d9c73a638547af334f08ac4","modified":1616920848820},{"_id":"source/_posts/2019-ICPC-xuzhou-online-contest.md","hash":"3ec5f0cfda337049dba27b8fcbfbd59cc1b7d43a","modified":1616920882029},{"_id":"source/_posts/2019-ICPC-Shenyang-contest-online.md","hash":"fe4d39144f4cec380832449fbb3d34df5e62a2ba","modified":1616920824512},{"_id":"source/_posts/2019-lanqiao-guosai.md","hash":"02e6d5628b6bb7d2dc7da6e31dfb51022c6d5644","modified":1616920894767},{"_id":"source/_posts/BZOJ-2956.md","hash":"06c15ff1c85f010d35925eb9c039b0b8eb52af07","modified":1616920976081},{"_id":"source/_posts/CODEVS-2370-小机房的树.md","hash":"89c0b86d0c7ed0278f18e1eed232374ffa41eab8","modified":1616921559030},{"_id":"source/_posts/Codeforces-1207-F.md","hash":"187ecdace440336585b54b20f96d438dbf9a8f51","modified":1616921024078},{"_id":"source/_posts/Codeforces-568-G1.md","hash":"7cdfa3e3f3b677db6b43098def01a73750d39c46","modified":1616921001131},{"_id":"source/_posts/Codeforces-622-F.md","hash":"07c46c90b0b613eee79fe4b31661761c622ae31e","modified":1616921013343},{"_id":"source/_posts/Lagrange-Multiplier.md","hash":"8fee165492168487e67c169eda80121ce7ce8a88","modified":1616921557498},{"_id":"source/_posts/ECNU-往年机试.md","hash":"ce4f7b430febfa1cf1e4d963af92947d61ef75c6","modified":1616921070099},{"_id":"source/_posts/Nginx-添加SSL证书.md","hash":"55e2f59dff7991139298ab08625158e19a3e6da4","modified":1620200734248},{"_id":"source/_posts/Python连接MySQL.md","hash":"1038d8fb5ed0ff4ff44c6f0819c0c65cba386511","modified":1616921243759},{"_id":"source/_posts/TJOI2013-songshujuhui.md","hash":"a259a1ac8015700b6b4df19b16bd609e5da365ab","modified":1616921334870},{"_id":"source/_posts/SCOI2005.md","hash":"5c37eb1cd5d7e39483af30e5593a050dc3b642c4","modified":1616921323814},{"_id":"source/_posts/ZJOI2008.md","hash":"ec2446791a664bd390a03582f59f43c276735eea","modified":1616921441113},{"_id":"source/_posts/luogu-P1879-P2051.md","hash":"7c34d531ae6676c777bd2f9b6b5c6ff08c34a035","modified":1616921121498},{"_id":"source/_posts/hexo_blog_construct_summary.md","hash":"017ac3e8e146e91c631b478140d4e8607c37f908","modified":1616921079716},{"_id":"source/_posts/luogu-P1131.md","hash":"3b2c956b8a26022ef2244120c998669992174f33","modified":1616921110384},{"_id":"source/_posts/luogu-P3806.md","hash":"44ffdfa07b7680ecfe8bf06ce01d863f80c0c2af","modified":1616921149826},{"_id":"source/_posts/niukexiaobai15.md","hash":"db4b7cba91a3ad2b9090ccf2b0094e61fe5ffe50","modified":1616921214777},{"_id":"source/_posts/sklearn踩坑.md","hash":"4eb34a67891c1e0f30760e2a1165db3d4bdc9ef0","modified":1620202263899},{"_id":"source/_posts/reading-Dream-of-the-Red-Chamber.md","hash":"d5ebb880c072dda9aadc9d6231fd07beebe99127","modified":1616921256999},{"_id":"source/_posts/transfer-file-use-http.md","hash":"ed145c9607484de8e6ad52ab97b0a0323211a683","modified":1616921381059},{"_id":"source/_posts/niuke-exercise-53.md","hash":"9974d2927fcc709d0927d52a09bb1a1dc9c02add","modified":1616921555036},{"_id":"source/_posts/webProject-base-on-gaode-map.md","hash":"da465923cd01e4bfd28bf9c61cc8ca5d9ca74d0d","modified":1616921402564},{"_id":"source/_posts/winter-holiday-summary.md","hash":"fe33c3cbea8327c4e1908ff934c5a447263841a1","modified":1616921466390},{"_id":"source/_posts/博客迁移.md","hash":"8496cb695dba7bc9fb281d6e96092ecb3a7b14e8","modified":1620200720176},{"_id":"source/_posts/基于word2vec的红楼梦人物关系分析.md","hash":"c3d096d6391d981f694508f21ebe36b847c167ce","modified":1621347676851},{"_id":"source/_posts/一个简易的Go-Pool的设计与实现.md","hash":"3603e33ea00ebb3e76f39118a017505e329b28cb","modified":1616920952887},{"_id":"source/_posts/考研总结.md","hash":"acf7fd8bc47178ad00c70c4a7a372e4089f31a4f","modified":1616921546540},{"_id":"source/gallery/cover/.DS_Store","hash":"866d0c20fd713126605dd09349289b907eafedf5","modified":1617087368139},{"_id":"source/gallery/.DS_Store","hash":"7b0e20cd540d7866b1867546bb5f79d45bd85995","modified":1621332821978},{"_id":"source/gallery/cover/dicer.png","hash":"ea00d6c6be5151b7592bcbda551fbe4b1154394e","modified":1617028068602},{"_id":"source/gallery/cover/sklearn.png","hash":"12a107ac15276e628ba168735eda6033ea4ae899","modified":1620202171043},{"_id":"source/gallery/others/LagrangeMultipliers2D.svg","hash":"d5dd8636aec34705adbd23ce7e85c044185bb5f9","modified":1563526570000},{"_id":"source/gallery/others/GoPool.png","hash":"6593675f27f43bfe13646efd29096bf9fa320c93","modified":1614229604000},{"_id":"source/gallery/others/python2-http.png","hash":"a9bcd32d1e6233b897a8bcd1b5070e3e07e485ea","modified":1561466312000},{"_id":"source/gallery/thumbnails/.DS_Store","hash":"c3199195affd0bc33ebf32a6cc9c563763863c20","modified":1617028311609},{"_id":"source/gallery/others/mobaxterm-http2.png","hash":"875488cd93d51fb5826e71962d0d3fd48f157e5b","modified":1561465938000},{"_id":"source/gallery/others/python3-http.png","hash":"a86d0c8a7a025d84e96b98dd3dc25a77ebc7ad76","modified":1561466440000},{"_id":"source/gallery/thumbnails/Goroutine.png","hash":"b89d857a1c9606cece5711c257cce8a886cee16a","modified":1614225482000},{"_id":"source/gallery/thumbnails/Mariadb.png","hash":"32b71d3da25a3b318e72a9f57c96a1de7d5ddc3a","modified":1615368130000},{"_id":"source/gallery/thumbnails/SSL.png","hash":"bd671fedc241ae063c7f68d8e240ae5a87ecc7a8","modified":1615732018000},{"_id":"source/gallery/thumbnails/apple-touch-icon.png","hash":"ff291298822cf0d3c273516d4e4c7f2a0ccb454a","modified":1539485536000},{"_id":"source/gallery/thumbnails/acm.jpg","hash":"12555836b3c54915193e1c0f170237a0f9e39904","modified":1539483152000},{"_id":"source/gallery/thumbnails/avatar_m.jpg","hash":"775a890797a6998a45c9681fff6ac576ddfec9b9","modified":1539483152000},{"_id":"source/gallery/thumbnails/avatar_g.jpg","hash":"3f2a54d0f174cdc5dc942d872d358840e1d73c33","modified":1539483152000},{"_id":"source/gallery/thumbnails/bit.png","hash":"e0df7d9ced47e248f029d02e8344a05f9382221e","modified":1548241540000},{"_id":"source/gallery/thumbnails/dicer.png","hash":"ea00d6c6be5151b7592bcbda551fbe4b1154394e","modified":1617028068602},{"_id":"source/gallery/thumbnails/favicon.ico","hash":"e47cb7b6d2387bc5c931a2c40a13767278908003","modified":1539485306000},{"_id":"source/gallery/thumbnails/home-bg-geek.jpg","hash":"2a6ef408e65acb8ced303649cdea976cea87cd79","modified":1539483152000},{"_id":"source/gallery/thumbnails/http.png","hash":"f47b5e6b6e2802f03e263d9c556d5c3035cbafb1","modified":1561465036000},{"_id":"source/gallery/thumbnails/post-bg-BJJ.jpg","hash":"7d09e9ef4998057227965af7ec61eb127150b204","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-YesOrNo.jpg","hash":"2915ac78127671e2e23e8ae78dc1a11f538feb3d","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-alibaba.jpg","hash":"de9591810431532c88856136281889c7471a1ee9","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-android.jpg","hash":"a164022f46c987daf252c298964e336f8ed11de9","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-cook.jpg","hash":"869955c480cb8eb43829e2b8de3553c44148d133","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-debug.png","hash":"8b093d0e8ed4ee7ab0609da971c7af54bdb0b8df","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-iWatch.jpg","hash":"1466dfff09559139c1a352b56e0a780bb9038f7d","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-js-version.jpg","hash":"784f4c37221fb062612958018fd7d83afffd9746","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-ios9-web.jpg","hash":"75f6fec5e78b4839129ba6b9a881ea51129309c2","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-miui6.jpg","hash":"8659ab737dffddf9de9536d508e2951fd0f4db09","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-miui-ux.jpg","hash":"22ef5302d9788594795d1dc46a732e4cba7fb604","modified":1539483152000},{"_id":"source/gallery/thumbnails/tag-bg.jpg","hash":"a39b7a6dfd9b33139ac4648638dad4614e74d8aa","modified":1539483152000},{"_id":"source/gallery/cover/gitpage.png","hash":"2e80f3229dae0371d01de1acc24e8efd76f1b2cd","modified":1619362256641},{"_id":"source/gallery/others/mobaxterm-http1.png","hash":"105c50f7500707357fc71a0bfcb1cc2c7d0c31ee","modified":1561465770000},{"_id":"source/gallery/thumbnails/Lagrange_polynomial.svg","hash":"63f4f5ef917a641132a539413082c987d75fe2fa","modified":1560828650000},{"_id":"source/gallery/thumbnails/home-bg-o.jpg","hash":"fc4bdf7fa98346ea35115151e4914cd1e5a946d9","modified":1539483152000},{"_id":"source/gallery/thumbnails/home-bg-art.jpg","hash":"a8a46a06f566e13a919d9cbca6a66ae5a3b78b1e","modified":1539483152000},{"_id":"source/gallery/thumbnails/jiaozuo-onsite.jpg","hash":"b54a6aada563bbbeebd0103040b3ed5c25599e6a","modified":1611126746000},{"_id":"source/gallery/thumbnails/post-bg-desk.jpg","hash":"6bbe3de397f929a7ca0a49c88779a4a8dd904a88","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-e2e-ux.jpg","hash":"96e64cb596452e3b0976775e6d0dd99af855277a","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-digital-native.jpg","hash":"a095324cf8965559b1281725c4795a15423a9067","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-github-cup.jpg","hash":"c5a7baaddbf0249598dcdad0ac35b16c7dc0cfbe","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-kuaidi.jpg","hash":"cff05c518b1070db6eb1411dfb8c641e877b2648","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-mma-2.jpg","hash":"1689b460b03f238e0eab0694a0326ab426e1822d","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-mma-1.jpg","hash":"20ff60fad50f4cfc4478f1793837e6585f8ec686","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-mma-3.jpg","hash":"36dbeb705aaf7ce1ceb53e163435ee6daf3ea3d4","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-mma-6.jpg","hash":"ccb141d248876960eef77beac8bf7a35db11dfef","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-re-vs-ng2.jpg","hash":"569bcd9cd3c68194e5ba99c8e9ba34f82c567bb1","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-rwd.jpg","hash":"eb09bff005e1b12a9d8b05b67b1cd7b7e9fca2ed","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-swift2.jpg","hash":"fa736fa9693ba3e6959fd3df156c24135ede696f","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-universe.jpg","hash":"eaf5940a86ae49122fbfaa02be1f8d236775b6e0","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-unix-linux.jpg","hash":"34647266880a01bb87d08c9ff4bc0631b6251803","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-sample-image.jpg","hash":"6bc21d04da3c0e48a677cac6272220fb188cb8de","modified":1539483152000},{"_id":"source/gallery/thumbnails/tag-bg-o.jpg","hash":"fb4c2386d7463a289d1b0e63798ecba71bda1735","modified":1539483152000},{"_id":"source/gallery/thumbnails/0_The Star, Anton Fadeev_01.jpg","hash":"5fcbfcbd0de452e4d97dcdf050c77012c4f6740f","modified":1525541658000},{"_id":"source/gallery/thumbnails/404-bg.jpg","hash":"dded479a06d5165d1f87c63677442aecdf1ac748","modified":1539483152000},{"_id":"source/gallery/thumbnails/johannes-roots-in-the-treetops-by-jkroots-d9t9p4y.jpg","hash":"888cdd5048b5f817b2f3b57fbf30c05138840662","modified":1567691608000},{"_id":"source/gallery/thumbnails/post-bg-2015.jpg","hash":"2e36367aa6ec06af534c4bc18a88d556b235713b","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-foxg.JPG","hash":"8d09169d255b3f9b46d14db6ceb2a9367206044b","modified":1539496140000},{"_id":"source/gallery/thumbnails/post-bg-ios10.jpg","hash":"c6f6f6ff121c3a51485fc86b60bf6f6939c53fd6","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-hacker.jpg","hash":"2643d21001e01904cef829cebbce501e7f01dc50","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-os-metro.jpg","hash":"17066b10ffa721d933c976fbc1c917f2524ff13e","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-swift.jpg","hash":"12552e545ca35a93f0050a5417de5d302f1a4f5e","modified":1539483152000},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613865400000},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613865400000},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613865400000},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613865400000},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613865400000},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613865400000},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613865400000},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613865400000},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613865400000},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613865400000},{"_id":"source/gallery/thumbnails/0_Bloodmoon Ruins, Anton Fadeev_01.jpg","hash":"df02f26a67a590755be21cc25a9f210ef6a9ac44","modified":1525541642000},{"_id":"source/gallery/thumbnails/0_Obsidian Woods, Anton Fadeev_01.jpg","hash":"4e64f4a9d2986981e27b14710a251b9ded823bfb","modified":1525541642000},{"_id":"source/gallery/thumbnails/3_Sea Landscapes, Anton Fadeev_04.jpg","hash":"12cb9fb3674c57876e02d117269fe67d3c4b8bd6","modified":1525541720000},{"_id":"source/gallery/thumbnails/home-bg.jpg","hash":"35131c8b7ab3943c9fe4577329cd1c412d1c4fac","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-02.JPG","hash":"85c0bcf7722a6a22414edae328574993651baddc","modified":1539496140000},{"_id":"source/gallery/thumbnails/post-bg-airport.JPG","hash":"4d00601a2a73e9f18ec032f86f83185b5ec0a5af","modified":1539496140000},{"_id":"source/gallery/thumbnails/post-bg-coffee.jpeg","hash":"5cc6b251c1b294c0d6d2cd8ab02cd4ba6e4a4213","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-ioses.jpg","hash":"5c83e24ffd94489590b09fedcfdd11012a8e1f91","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-keybord.jpg","hash":"28821432875e44dfca6c80d4cefa3d4f17ef552b","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-mma-0.png","hash":"d595c98958f32173eba3b0c23196ffcf408f7fb0","modified":1539483152000},{"_id":"source/gallery/thumbnails/post-bg-mma-5.jpg","hash":"ded32cc43e83600ff904bfce577ed3d45e925562","modified":1539483152000},{"_id":"themes/icarus/.DS_Store","hash":"34a13289e49d611d993eb64f580ce70a3e53bd9c","modified":1616840221079},{"_id":"themes/icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1613865400000},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1613865400000},{"_id":"themes/icarus/.gitignore","hash":"36084c0851a22bfd393933abb8e262562ffc6802","modified":1613865400000},{"_id":"themes/icarus/.npmignore","hash":"42242c8da7a020a3295e7dd3d18bf022cb08b661","modified":1613865400000},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1613865400000},{"_id":"themes/icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1613865400000},{"_id":"themes/icarus/README.md","hash":"247ec8047ee3105d31099dd8e6ca498b6bff1336","modified":1613865400000},{"_id":"themes/icarus/package.json","hash":"635402ea312dfe670bafc736328b9788b993a500","modified":1613865400000},{"_id":"themes/icarus/.github/dependabot.yml","hash":"d532d0db30e42211f35823b9885f3ed1b2d51777","modified":1613865400000},{"_id":"themes/icarus/.github/stale.yml","hash":"88c73f6216c5666d2f60b1e8fe690a3f6e561e42","modified":1613865400000},{"_id":"themes/icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":1613865400000},{"_id":"themes/icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":1613865400000},{"_id":"themes/icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":1613865400000},{"_id":"themes/icarus/languages/de.yml","hash":"01d9c27c3c9224d8c58b1cf7099ef008b9411a45","modified":1613865400000},{"_id":"themes/icarus/languages/en.yml","hash":"1bdb74288808c4d306b46630860e586a1fcd88a7","modified":1613865400000},{"_id":"themes/icarus/languages/es.yml","hash":"48fe3d7d304239b5e5e93f63600093700d6f0fed","modified":1613865400000},{"_id":"themes/icarus/languages/fr.yml","hash":"14765cc6216b4af5a05341315c9f6ee54d636a78","modified":1613865400000},{"_id":"themes/icarus/languages/id.yml","hash":"c04fca89e536d539a8bf95980bff7dff79125ba3","modified":1613865400000},{"_id":"themes/icarus/languages/ja.yml","hash":"7568f246a21813527ccea8a1da72a9526aa2d233","modified":1613865400000},{"_id":"themes/icarus/languages/ko.yml","hash":"f2211a8ca1d73f05a1c931aa11accb4e34c483c4","modified":1613865400000},{"_id":"themes/icarus/languages/pl.yml","hash":"612639b0e0a15185c12eecfe3e8913b629ecdfdf","modified":1613865400000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"531b22c71fab8aae60ddc7599aaa5f46140cf2c1","modified":1613865400000},{"_id":"themes/icarus/languages/ru.yml","hash":"bf784c6f31e8fb7ed78509468bddecd447c3b73b","modified":1613865400000},{"_id":"themes/icarus/languages/tk.yml","hash":"e5b9b369bbcf90c199a65a877eb75fba05cd7f90","modified":1613865400000},{"_id":"themes/icarus/languages/vn.yml","hash":"64307bfa16d851334e2f37a29a84d644624c2060","modified":1613865400000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"82ff607b1671b88d259d10b6ce8ca1bb05b2cff4","modified":1613865400000},{"_id":"themes/icarus/languages/tr.yml","hash":"96d94f7a5d56b2682ae2792f0808139d4b950704","modified":1613865400000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"92f8cf599ad06bb14f79f4806ac4c695f60044d7","modified":1613865400000},{"_id":"themes/icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":1613865400000},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1613865400000},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1613865400000},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1613865400000},{"_id":"themes/icarus/layout/layout.jsx","hash":"a5829907b219e95266f7ed5ee6203e60e2273f93","modified":1613865400000},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1613865400000},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1613865400000},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1613865400000},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1613865400000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/Bug反馈.md","hash":"d801be6937df21e63113be8840b2e23c465db87b","modified":1613865400000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"5d3abdc1a2a79ef9822865184eced6e31066d8f6","modified":1613865400000},{"_id":"themes/icarus/source/.DS_Store","hash":"36931d7d29c13c3695e38d3ee72792e8ea1eec01","modified":1616846051424},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/config.yml","hash":"42afb69546eae522e340e3adb99f7bfc4cc4c397","modified":1613865400000},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1613865400000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"05313e241a3d43fdadb0f74390b562c07c25d4d0","modified":1613865400000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/功能建议.md","hash":"c6f60f37e6cd0bc21a81b3b07f84e04e9e80fb57","modified":1613865400000},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"e106fa240c24c8bfbdd623549651600c6d786c9c","modified":1613865400000},{"_id":"themes/icarus/.github/workflows/github-release.yml","hash":"48b6bd2cc567687a7b1648c55c8f9de9d44fa9e1","modified":1613865400000},{"_id":"themes/icarus/.github/workflows/lint.yml","hash":"71f04b66e48f065285ba109939999876ef411598","modified":1613865400000},{"_id":"themes/icarus/.github/workflows/npm-publish.yml","hash":"4eabc0c60cb7102fdd5e4b0fbd8c0ac4c17cc8d0","modified":1613865400000},{"_id":"themes/icarus/.github/workflows/test.yml","hash":"f816a5970f4ad4fcf6c8350dbcd4c300c6986cb4","modified":1613865400000},{"_id":"themes/icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":1613865400000},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1613865400000},{"_id":"themes/icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1613865400000},{"_id":"themes/icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":1613865400000},{"_id":"themes/icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1613865400000},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1613865400000},{"_id":"themes/icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1613865400000},{"_id":"themes/icarus/include/style/article.styl","hash":"580b1e9bd356ed6781c32ccc49c6fa3486b94620","modified":1613865400000},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":1613865400000},{"_id":"themes/icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1613865400000},{"_id":"themes/icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1613865400000},{"_id":"themes/icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":1613865400000},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1613865400000},{"_id":"themes/icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1613865400000},{"_id":"themes/icarus/include/style/plugin.styl","hash":"dc98160142c95ef81ba4789351002a5fcf29c04c","modified":1613865400000},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1613865400000},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1613865400000},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1613865400000},{"_id":"themes/icarus/include/style/widget.styl","hash":"0720a70448ffd78800f7556a7d67300eac19aa87","modified":1613865400000},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1613865400000},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1613865400000},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1613865400000},{"_id":"themes/icarus/layout/common/article.jsx","hash":"85d13095ed49e3bb362fbac830df63fc416e79bf","modified":1613865400000},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":1613865400000},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1613865400000},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":1613865400000},{"_id":"themes/icarus/layout/common/head.jsx","hash":"37f2f2efcb102c706e2460dc9cdeaa302366d318","modified":1613865400000},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1613865400000},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":1613865400000},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"689cf4a6b79337b11d1d56afa9dda09223a809a1","modified":1613865400000},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1613865400000},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1613865400000},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1613865400000},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1613865400000},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1613865400000},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1613865400000},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1613865400000},{"_id":"themes/icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1613865400000},{"_id":"themes/icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1613865400000},{"_id":"themes/icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1613865400000},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1613865400000},{"_id":"themes/icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1613865400000},{"_id":"themes/icarus/source/img/favicon.png","hash":"ba5ea2a721de98171c9033dcb4027639d3202e4c","modified":1539484916000},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1613865400000},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1613865400000},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1613865400000},{"_id":"themes/icarus/source/img/pwa_icon_512.png","hash":"a39f22166fbbe7b5b265088e27e256aea4eb0d6f","modified":1539484944000},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1613865400000},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/article.json","hash":"8d78149f44629d0848921c6fb9c008b03cef3116","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"bd30bd9ffc84e88e704384acdfcaab09019a744f","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1613865400000},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"d000b4d1d09bdd64756265aa4cd2ea980ab7ddc7","modified":1613865400000},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1613865400000},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1613865400000},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1613865400000},{"_id":"source/gallery/thumbnails/0_Greater Celandine, Anton Fadeev_01.jpg","hash":"85b0e72207c83eccd0c145236bd586540166d8a8","modified":1525541626000},{"_id":"source/gallery/thumbnails/0_Monolith - view1, Anton Fadeev_01.jpg","hash":"10db0cb8ddfd74707e7e9ca193be169a0966719a","modified":1611126756000},{"_id":"source/gallery/thumbnails/0_Obsidian woods_2, Anton Fadeev_01.jpg","hash":"76d02bf36f818c451b8889f57481f1ea59cd9452","modified":1525541666000},{"_id":"source/gallery/thumbnails/0_Rasha, Anton Fadeev_01.jpg","hash":"82d5ced71067dacd88d7fa3bba455b84d6aa90f0","modified":1525541572000},{"_id":"source/gallery/thumbnails/0_Square landscapes, Anton Fadeev_01.jpg","hash":"b59cd0fc9e775984f9205fda95218b306fa851c5","modified":1525541590000},{"_id":"source/gallery/thumbnails/0_Whistling Blades, Anton Fadeev_01.jpg","hash":"9d62985cf13478fea7d860949ecf70ffa08ba638","modified":1525541644000},{"_id":"source/gallery/thumbnails/1_Construction of the Monolith, Anton Fadeev_02.jpg","hash":"8c7335bdd977ff528ec114a71844558d42cce886","modified":1525541678000},{"_id":"source/gallery/thumbnails/1_Green sketches , Anton Fadeev_02.jpg","hash":"55bb4a6e5b3f4248cab5ef5e1e820b529c85f49d","modified":1525541574000},{"_id":"source/gallery/thumbnails/1_Rasha, Anton Fadeev_02.jpg","hash":"d0011a43564c7447a98d2bc005abedb9034037e0","modified":1525541572000},{"_id":"source/gallery/thumbnails/2_Square landscapes 2, Anton Fadeev_03.jpg","hash":"8687af4dd44cc889367ec096bd2ab8eccc824eb7","modified":1525541580000},{"_id":"source/gallery/thumbnails/3_Square landscapes 2, Anton Fadeev_04.jpg","hash":"daf9d273044475c6070cf174a363b740a71d30ef","modified":1525541578000},{"_id":"source/gallery/thumbnails/2_Square landscapes, Anton Fadeev_03.jpg","hash":"1468ffda278a73ae125c6154f79a562cef86003c","modified":1525541584000},{"_id":"source/gallery/thumbnails/3_Square landscapes, Anton Fadeev_04.jpg","hash":"86d9b8a5bb624b278e5ea2111c0f9e414263b3ed","modified":1525541582000},{"_id":"source/gallery/thumbnails/4_Square landscapes 2, Anton Fadeev_05.jpg","hash":"c8a85e4d517f222caef3d2ed24107fa83a2c1a29","modified":1525541578000},{"_id":"source/gallery/thumbnails/5_Square landscapes, Anton Fadeev_06.jpg","hash":"db706a66ff8c4fa1ce1313013b4cb524e9a2979f","modified":1525541582000},{"_id":"source/gallery/thumbnails/6_Square landscapes, Anton Fadeev_07.jpg","hash":"be8cd8221ac4c488f95b50e00aae6688b3a601d2","modified":1525541580000},{"_id":"source/gallery/thumbnails/girl-pick.jpg","hash":"9fac81c55502521ce5d1358af7fd7f579e767a53","modified":1611126750000},{"_id":"source/gallery/thumbnails/girl-meets-bear8.png","hash":"d3512cf5fc89b4e2ca859c9512989a5eaddd7398","modified":1611126752000},{"_id":"source/gallery/thumbnails/hei.jpg","hash":"d393e62e30f5418ceab774937f3e5e7cade54b3b","modified":1567998876000},{"_id":"source/gallery/thumbnails/post-bg-mma-4.jpg","hash":"b15e82a74b2fa75e40ade9f3aa77235afdee0c40","modified":1539483152000},{"_id":"themes/icarus/source/img/alipayQR.JPG","hash":"0d36e1cdd256b0cfd46ad9b23b31365900770127","modified":1611153266000},{"_id":"source/gallery/photos/ymy.png","hash":"858a4d2b4eceb4e09268b6b9d3a90f78e4aa4f88","modified":1611154676000},{"_id":"source/gallery/thumbnails/0_Construction of the Monolith, Anton Fadeev_01.jpg","hash":"8e890130cfa96d44d4892f23fc38a3583c50296e","modified":1525541684000},{"_id":"source/gallery/thumbnails/0_BOOM! , Anton Fadeev_01.jpg","hash":"3bb562165e7f42ce0c6ae152b8aeaba8d43ffcb7","modified":1525541630000},{"_id":"source/gallery/thumbnails/0_Magmar, Anton Fadeev_02.jpg","hash":"43ca4247cadb8cc3946e62b24ed21e2cf999bf7d","modified":1525541650000},{"_id":"source/gallery/thumbnails/0_Sea Landscapes, Anton Fadeev_01.jpg","hash":"f5db3acb8883ba543ab9e831ec197e7598a302f4","modified":1525541592000},{"_id":"source/gallery/thumbnails/0_Songhai City, Anton Fadeev_01.jpg","hash":"36ba114033b6fed47a62eb376b90462c7ef12dbc","modified":1525541660000},{"_id":"source/gallery/thumbnails/0_The Air Bridge, Anton Fadeev_01.jpg","hash":"40118b365ccbaed94e460bb13883a907dd7cfe6c","modified":1525541648000},{"_id":"source/gallery/thumbnails/0_Star Crystals, Anton Fadeev_01.jpg","hash":"3b9375e7c5ff40d1a298ed7bcfda5104c98011a4","modified":1525541670000},{"_id":"source/gallery/thumbnails/0_Square landscapes 2, Anton Fadeev_01.jpg","hash":"547c177d0dbd7beffc0b9be6a3fdc1d2155a59d6","modified":1525541584000},{"_id":"source/gallery/thumbnails/0_The Giant Ice Floes, Anton Fadeev_01.jpg","hash":"1a7c7d9b8ac954c6a7a71416069e20cf379c3e22","modified":1525541644000},{"_id":"source/gallery/thumbnails/0_The Gate , Anton Fadeev_01.jpg","hash":"8c39a6c132b85b69132a52c1db78edbac0d93793","modified":1525541624000},{"_id":"source/gallery/thumbnails/1_Rasha 2, Anton Fadeev_02.jpg","hash":"ef32c8e4c6f1a4256ce2c99e874cec27d0b2dfb2","modified":1525541574000},{"_id":"source/gallery/thumbnails/1_Square landscapes 2, Anton Fadeev_02.jpg","hash":"c3fb5a9553455dbd89abea09be96f640dbdb1050","modified":1525541578000},{"_id":"source/gallery/thumbnails/1_Square landscapes, Anton Fadeev_02.jpg","hash":"0ccd238b54eb4f86ad39e9dccdc22eb9b8d92fcc","modified":1525541586000},{"_id":"source/gallery/thumbnails/4_Square landscapes, Anton Fadeev_05.jpg","hash":"d865ba19f0244116c0b1fa0465ac3c6de49cf0b9","modified":1525541582000},{"_id":"source/gallery/thumbnails/girl-meets-bear4.png","hash":"f5604a213280d56455d9d3ccabf7707843e8b7e3","modified":1611126752000},{"_id":"source/gallery/thumbnails/post-bg-g2.JPG","hash":"89d9a49fa8eb2dc853759409d9fc55bd1d6b73c8","modified":1539496140000},{"_id":"source/gallery/thumbnails/post-bg-g1.JPG","hash":"ad90dee03cf5f3a545c1a5375a2252a9ce928820","modified":1539496140000},{"_id":"source/gallery/thumbnails/post-bg-red-moon.jpg","hash":"2189d980d1aa6e20ddd83c0147b8a2b55a2d63fd","modified":1539559282000},{"_id":"themes/icarus/source/img/wechatQR.JPG","hash":"e34538ce02b736d82b0dde9087825208e4846438","modified":1611153266000},{"_id":"source/gallery/others/hlm-part.png","hash":"e9a95df0fd6951a0772ff5d142fc8c4ec5d6ca89","modified":1621332197197},{"_id":"source/gallery/thumbnails/0_Magmar, Anton Fadeev_01.jpg","hash":"d35295eb10056952eb0b11d1afd7a002311c974a","modified":1525541664000},{"_id":"source/gallery/thumbnails/0_Vanar, Anton Fadeev_01.jpg","hash":"bf538dedd9dce263c1b237a50f4190748a3e5822","modified":1525541668000},{"_id":"source/gallery/thumbnails/0_Vermillion Forest, Anton Fadeev_01.jpg","hash":"4c467bcf6a7b00d5c06fa654741785bc027a729c","modified":1525541664000},{"_id":"source/gallery/thumbnails/1_Hi...Dude!, Anton Fadeev_02.jpg","hash":"b661be3411cbaec9357197303fcab8e8b74a49cf","modified":1525541566000},{"_id":"source/gallery/thumbnails/1_The Frozen Floes of Northern Celandine, Anton Fadeev_02.jpg","hash":"52ae214ecc6707c71269be0c22d531370652399a","modified":1525541654000},{"_id":"source/gallery/thumbnails/1_The Great Tree of Eyos, Anton Fadeev_02.jpg","hash":"bf70abe89a391d8b319d8df09666b2da767a3237","modified":1525541660000},{"_id":"source/gallery/thumbnails/girl-meets-bear1.png","hash":"0ff8e756761b1f7b1549a958d3d7c1c8ccbefa7d","modified":1611126754000},{"_id":"source/gallery/thumbnails/girl-meets-bear5.png","hash":"29854795a5d5c063374caeace4879b3a2347b651","modified":1611126750000},{"_id":"source/gallery/thumbnails/0_Hi...Dude!, Anton Fadeev_01.jpg","hash":"bd0776305709f0646042e69821ccd361f1c74ebb","modified":1525541568000},{"_id":"source/gallery/thumbnails/0_Homecoming, Anton Fadeev_01.jpg","hash":"631ced5e4141b3f77a09b6bfd3883e6bc56b47a0","modified":1525541676000},{"_id":"source/gallery/thumbnails/0_Green sketches , Anton Fadeev_01.jpg","hash":"2a724ef44b7d52817101af5f83d77e36f922d8d6","modified":1525541574000},{"_id":"source/gallery/thumbnails/0_Rasha 2, Anton Fadeev_01.jpg","hash":"4f1cc19a6058488746f80c339eba1c45ae155440","modified":1525541574000},{"_id":"source/gallery/thumbnails/0_Shim'zar, Anton Fadeev_01.jpg","hash":"3ab3dcc9db5ff75b921b5b1b5232f5201caaf0d8","modified":1525541698000},{"_id":"source/gallery/thumbnails/0_The Great Tree of Eyos, Anton Fadeev_01.jpg","hash":"1303771be0d6f30319dee0e44fcd7246a2add993","modified":1525541664000},{"_id":"source/gallery/thumbnails/1_Sea Landscapes, Anton Fadeev_02.jpg","hash":"0c2c5d2a16c58f4201f900bada57b2da0baca2e3","modified":1525541590000},{"_id":"source/gallery/thumbnails/2_Sea Landscapes, Anton Fadeev_03.jpg","hash":"ccf0aecd44bd6b166bd5aa97947cd9658397dde3","modified":1525541588000},{"_id":"source/gallery/thumbnails/about-Dicer-gentle.jpg","hash":"1915783841d0af01f6d4c8d60e30f165186a0818","modified":1539483152000},{"_id":"source/gallery/thumbnails/girl-meets-bear7.png","hash":"69c75c4d087598de76b31817f6dfcd59d2805999","modified":1611126746000},{"_id":"source/gallery/thumbnails/girl-meets-bear6.png","hash":"b41fc912c6f2f0769e7aa8a01fa4ab8856f6ea82","modified":1611126750000},{"_id":"source/gallery/thumbnails/post-bg-Seeshoumaru.jpg","hash":"8cd55cd63fa1d3dfbd5b629f50ca86fc862632fa","modified":1539517528000},{"_id":"source/gallery/thumbnails/post-bg-map.jpg","hash":"0fef53368ecfadea81de49e714b438bd7516448e","modified":1539483152000},{"_id":"source/gallery/thumbnails/0_Crystal Caverns , Anton Fadeev_01.jpg","hash":"5b2d0afe05de95ddb2274e12a1708f1e62d07fc8","modified":1525541638000},{"_id":"source/gallery/thumbnails/0_The Frozen Floes of Northern Celandine, Anton Fadeev_01.jpg","hash":"29b7b211a8fef8b4fa13a46150e8d2094130ced0","modified":1525541658000},{"_id":"source/gallery/thumbnails/gate-wall.jpg","hash":"0df961cb7c31a3597eb10aa2ff077e3e1b25e666","modified":1611155292000},{"_id":"themes/icarus/source/img/avatar.png","hash":"05fe38fef5e6016e42b67e2edacf2187b32fbc7c","modified":1611156404000},{"_id":"source/gallery/thumbnails/1_Bad Idea, Anton Fadeev_02.jpg","hash":"16dc075b6bf03f651743eced09863187bd40fbd9","modified":1525541576000},{"_id":"source/gallery/thumbnails/1_Shim'zar, Anton Fadeev_02.jpg","hash":"17375971fe0871533cf33dcda89eef6cd9c344a7","modified":1525541690000},{"_id":"source/gallery/thumbnails/post-bg-ghost.jpg","hash":"e01de1fc070ef73495ddb7448a850f76d7b9e747","modified":1539559366000},{"_id":"source/gallery/thumbnails/roman-kraft-WUvBROPOsuo-unsplash.jpg","hash":"00b2053f6128c1961c76a80cefa5192f5f9cfe86","modified":1611155004000},{"_id":"source/gallery/others/hlm-all.png","hash":"040f40efceeb79af8df106355e5dd65ad517202b","modified":1621331844056},{"_id":"source/gallery/thumbnails/1_Dog and Hot springs, Anton Fadeev_02.jpg","hash":"06987d4547de15cae7eaaaed531e34675c30512a","modified":1525541706000},{"_id":"source/gallery/thumbnails/post-bg-g3.JPG","hash":"472aae837d94e0bd8374a7218004c107d0aedd63","modified":1539496140000},{"_id":"source/gallery/thumbnails/sylvain-sarrailh-wandering.jpg","hash":"f4c6a0faead331197081554bb16fe5caf5e17184","modified":1567661284000},{"_id":"source/gallery/thumbnails/post-bg-forest.jpg","hash":"c61357d0f615f6b391d285397672dc979229fefd","modified":1539518030000},{"_id":"source/gallery/thumbnails/post-bg-hwl.JPG","hash":"a0398b79509f6e6b6140c076a777e9f0a0d19354","modified":1539496138000},{"_id":"source/gallery/thumbnails/0_Malephar, Anton Fadeev_01.jpg","hash":"6aa82dbd63044329240cd3cbc8f5307399ce894f","modified":1525541600000},{"_id":"source/gallery/thumbnails/BadIdea.jpg","hash":"db9d880dba745cb67bb254bfdf20f0f5ae07125f","modified":1525541578000},{"_id":"source/gallery/thumbnails/post-bg-anime-girl.jpg","hash":"8108ff7621dcb8de63a12b5db6f4464066e6b1c4","modified":1611126748000},{"_id":"source/gallery/thumbnails/0_Save me, Anton Fadeev_01.jpg","hash":"2092a1466bb8578fa9b268f3039ee64a31e5225b","modified":1525541622000},{"_id":"source/gallery/thumbnails/post-bg-ancent-costume-girl.jpg","hash":"8fe7028238e65006962203e8fe0793a418443515","modified":1539559490000},{"_id":"source/gallery/thumbnails/post-bg-color-keyboard.JPG","hash":"828c002d6d3f64d7705be31cb80a062dcd1690b9","modified":1611126740000},{"_id":"source/gallery/thumbnails/post-bg-ring-girl.jpg","hash":"02d7ea3dedf68951ff91350011a0a291856a91fd","modified":1539559132000},{"_id":"source/gallery/thumbnails/0_Kaero, Anton Fadeev_01.jpg","hash":"f7375c7b7dbafee2c06f18d5a07836718d9df016","modified":1525541594000},{"_id":"source/gallery/thumbnails/0_Xaan, Anton Fadeev_01.jpg","hash":"93406f698feebea745e50fa868da88c6237bb13e","modified":1525541594000},{"_id":"source/gallery/thumbnails/dear.jpg","hash":"4a1a933fd2d4bc98b78339f72ace365cbdcd3ff2","modified":1525541620000},{"_id":"source/gallery/thumbnails/hei2.JPG","hash":"ac29e301cffd67f650b2187aa690175586ab290c","modified":1567998876000},{"_id":"source/gallery/thumbnails/hei3.jpg","hash":"924dd11e5f1094d2d718be900c66ef01cc2de8b1","modified":1568818870000},{"_id":"source/gallery/thumbnails/post-bg-sunbust.jpg","hash":"32ea6c12d670f254f66bb4e763c62cf5d5bbd30d","modified":1539518256000},{"_id":"source/gallery/thumbnails/0_Windcliffe, Anton Fadeev_01.jpg","hash":"757c3fa3a7fb628c61b7ecea805fd15767ff67fd","modified":1525541600000},{"_id":"source/gallery/thumbnails/0_werewolf, Anton Fadeev_01.jpg","hash":"d44d59b80c9263bea98f0eb70b46b6026311d3e2","modified":1525541612000},{"_id":"source/gallery/thumbnails/girl-meets-bear2.png","hash":"08e23f990cf26998989be2d7ff2fc3b543fd91ce","modified":1611126736000},{"_id":"source/gallery/thumbnails/girl-meets-bear3.png","hash":"a343fe30d95e52e46721ba3640283fe878d9dfde","modified":1611126738000},{"_id":"source/gallery/thumbnails/jiaozuo-onsite.png","hash":"eb9f8c45186ff93a3b7e5f64059567b14f641243","modified":1545447020000},{"_id":"source/gallery/thumbnails/kite.png","hash":"a2434257ece97a77d4256994333f3f3f5a5207e8","modified":1615196666000},{"_id":"source/gallery/cover/hlm.png","hash":"48a1e390e056bc2b546e5e0c600c403b0d08e200","modified":1621347464030},{"_id":"source/gallery/thumbnails/post-bg-bench.jpg","hash":"ab5a382ca5c9e023875ab3bcb030d7b178523b58","modified":1611126746000},{"_id":"source/download/MobaXterm.exe","hash":"7cf8db38adc9b3aa40b22376de66e90e4e51c7dc","modified":1561382148000},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1621349277912},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1621349277912},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1621349277912},{"_id":"public/content.json","hash":"402e83f551a2491e8b94653531c60e09485dc153","modified":1621349277912},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1621349277912},{"_id":"public/manifest.json","hash":"b8af59d0677c03df24840d942801d4c968b0f370","modified":1621349277912},{"_id":"public/about/index.html","hash":"42a93e6475fc9fdfe776d61d8dde3d48037485d5","modified":1621349277912},{"_id":"public/2021/05/18/基于word2vec的红楼梦人物关系分析/index.html","hash":"317ffa55f9afc375113248978e11e8016b3c12f3","modified":1621349277912},{"_id":"public/2021/04/25/博客迁移/index.html","hash":"77cd44d6ec6eb52bed9af21a0d4b0890a8905302","modified":1621349277912},{"_id":"public/2021/03/14/Nginx-添加SSL证书/index.html","hash":"aebce0383938713efc6b206d91015acaac28cf64","modified":1621349277912},{"_id":"public/2021/03/10/Python连接MySQL/index.html","hash":"902c6512b9e28f2df0fa632524e80067092151dd","modified":1621349277912},{"_id":"public/2021/05/05/sklearn踩坑/index.html","hash":"e5d70166a3956be2cd1e78151db4db07d5e7496e","modified":1621349277912},{"_id":"public/2021/03/08/ECNU-往年机试/index.html","hash":"699bd9171ad925af5f59a511633263f61b39e433","modified":1621349277912},{"_id":"public/2021/01/23/考研总结/index.html","hash":"e2703cfbcd880a6825c01706ba29fd88023c2a7b","modified":1621349277912},{"_id":"public/2021/02/25/一个简易的Go-Pool的设计与实现/index.html","hash":"0d122b5e3b246d66a68185758ee88f4519847b0b","modified":1621349277912},{"_id":"public/2020/01/11/winter-holiday-summary/index.html","hash":"99a4a0a5ac912655c1e36330adef9be0ffa467db","modified":1621349277912},{"_id":"public/2019/10/12/niuke-exercise-53/index.html","hash":"f8047a0e9fe7a063b2d97f29f5e08cdd770a3076","modified":1621349277912},{"_id":"public/2019/09/28/2019-ICPC-Shenyang-contest-online/index.html","hash":"401cd9897957bc5e578b1df49a0613571aee67be","modified":1621349277912},{"_id":"public/2019/12/28/webProject-base-on-gaode-map/index.html","hash":"a6a5adbe118d36f04577767ba87cbd8f3871d3ff","modified":1621349277912},{"_id":"public/2019/09/28/luogu-P3806/index.html","hash":"2d7afb3643696f193b01e010f7d882039e551964","modified":1621349277912},{"_id":"public/2019/09/18/luogu-P1131/index.html","hash":"da9d17858b4a4b9ed6a564d32e612f10fddbfa25","modified":1621349277912},{"_id":"public/2019/09/18/luogu-P1879-P2051/index.html","hash":"4f5037f78663a646dae84c82b799fe7a5f9a4573","modified":1621349277912},{"_id":"public/2019/09/09/2019-ICPC-xuzhou-online-contest/index.html","hash":"01383635ff692bd786c98e2adc8cef27563d644d","modified":1621349277912},{"_id":"public/2019/09/05/TJOI2013-songshujuhui/index.html","hash":"6264e1a7bc713c86f11f7df4bee6eb7166e1cd79","modified":1621349277912},{"_id":"public/2019/09/05/2019-ICPC-nanjing/index.html","hash":"19f957dac5b560da2480e1badcf491cc840a1133","modified":1621349277912},{"_id":"public/2019/08/29/Codeforces-1207-F/index.html","hash":"96450fb7211be2a86568446216a2c6a859bdd3d6","modified":1621349277912},{"_id":"public/2019/08/06/CODEVS-2370-小机房的树/index.html","hash":"aea02087275de245f8713aaca95a4ceb2d810ed9","modified":1621349277912},{"_id":"public/2019/08/06/BZOJ-2956/index.html","hash":"2ec3ba1770f43f250a9536a46fc86cc82d0be3e6","modified":1621349277912},{"_id":"public/2019/06/25/transfer-file-use-http/index.html","hash":"05b8be0af979f8bad2204b0089466324ff6a3872","modified":1621349277912},{"_id":"public/2019/06/24/Codeforces-568-G1/index.html","hash":"8c50d4cba0877e82324a32585fc80e2a3490fe2f","modified":1621349277912},{"_id":"public/2019/06/16/niukexiaobai15/index.html","hash":"d6bc03d441be3dc7df95d8bbccec9a09859455c3","modified":1621349277912},{"_id":"public/2019/06/11/SCOI2005/index.html","hash":"5dfb046cb0bfc86dce25bd9580b615719e9bac15","modified":1621349277912},{"_id":"public/2019/06/18/Codeforces-622-F/index.html","hash":"9f18495d728e61d63ab47070cdf7c1509ce40dca","modified":1621349277912},{"_id":"public/2019/06/11/ZJOI2008/index.html","hash":"aabd9639019427b11f9d143746e820c50b4bd7ee","modified":1621349277912},{"_id":"public/2019/05/30/2019-lanqiao-guosai/index.html","hash":"dc7e9e4393ff5702ec6a8fdc3843af920b69e94a","modified":1621349277912},{"_id":"public/2019/07/19/Lagrange-Multiplier/index.html","hash":"1b1deec5e2b1cf8e9b81895c9727e1ddc77a84a9","modified":1621349277912},{"_id":"public/2019/04/11/hexo_blog_construct_summary/index.html","hash":"05f31ee495f4d6d32d6064692c613cd417083595","modified":1621349277912},{"_id":"public/2019/04/12/2017-Zhejiang-provincial-competition/index.html","hash":"d745860c3dd4738202fdb50ffc3d0a8dd98a9c5f","modified":1621349277912},{"_id":"public/2019/04/23/reading-Dream-of-the-Red-Chamber/index.html","hash":"e33310740e5ff6c0fa6884dab6fc89bf0ac1ec9c","modified":1621349277912},{"_id":"public/categories/竞赛/index.html","hash":"2e560699fa4e1d6a9761d69a23a87ade8e71925a","modified":1621349277912},{"_id":"public/2019/04/13/2019-Henan-CCPC-provincial-competition/index.html","hash":"05c70d7c9b240e06db9ed741a8c1e23c983ccd66","modified":1621349277912},{"_id":"public/categories/竞赛/CCPC/index.html","hash":"baa33e1dc947c8c8edb68cc6134ee9866023f682","modified":1621349277912},{"_id":"public/categories/竞赛/ICPC/index.html","hash":"5949d5163c334fa45fd86a53f057fe3356dedbe4","modified":1621349277912},{"_id":"public/categories/网络/index.html","hash":"e9c1311d54622a636ad8d62ff54ab508d05ebb57","modified":1621349277912},{"_id":"public/categories/NLP/index.html","hash":"ba02e051a41792a70a30e15c02a3e35500c4807c","modified":1621349277912},{"_id":"public/categories/随笔/index.html","hash":"fce929cb32030fb89029a5b7aecac2bd25fc09df","modified":1621349277912},{"_id":"public/categories/ECNU/index.html","hash":"27f3e718ed30c38d7203a3f3add36e4df654f313","modified":1621349277912},{"_id":"public/archives/index.html","hash":"6f9bf87d90dc23c93304b3657a479b393280b700","modified":1621349277912},{"_id":"public/archives/page/2/index.html","hash":"4d0d87d777e426861ab50f07c5e991457ad0bde7","modified":1621349277912},{"_id":"public/archives/page/3/index.html","hash":"fedb073028266e68c73cc12603e8c08ad19d62a3","modified":1621349277912},{"_id":"public/archives/2019/index.html","hash":"0e1a84bbbe1afdca54e4dfb2dfba8c385670e2d5","modified":1621349277912},{"_id":"public/archives/2019/page/2/index.html","hash":"7c970e565c44e027a2b2e559c774b3294f67150b","modified":1621349277912},{"_id":"public/archives/2019/04/index.html","hash":"ec0bb02f2337228dfe1a3f1ae437eeee38d198c1","modified":1621349277912},{"_id":"public/archives/2019/05/index.html","hash":"52e636bb3d99b233d4698395db2b714d53c0d9a0","modified":1621349277912},{"_id":"public/archives/2019/06/index.html","hash":"db9b25b1e1415aa5a6507793a3bf0f3e6712a793","modified":1621349277912},{"_id":"public/archives/2019/08/index.html","hash":"85497916c891a5d4b0ae0289c1194f4855b60197","modified":1621349277912},{"_id":"public/archives/2019/07/index.html","hash":"b251d74df547e4428179b4edb1297b9189680289","modified":1621349277912},{"_id":"public/archives/2019/10/index.html","hash":"3feb1b4ec34c165c5b20b34433390d33bcad156c","modified":1621349277912},{"_id":"public/archives/2019/12/index.html","hash":"a6dd6badda41339424f01ea5defd07a124f5b907","modified":1621349277912},{"_id":"public/archives/2019/09/index.html","hash":"72c0c0cd431a93b903d35f05a1f8ff64c46eaf1a","modified":1621349277912},{"_id":"public/archives/2020/index.html","hash":"48888077dadc27920e3a485622c869c4b57b818d","modified":1621349277912},{"_id":"public/archives/2021/index.html","hash":"bf73f062b580cf8c892de6be3badd65808686d0a","modified":1621349277912},{"_id":"public/archives/2021/01/index.html","hash":"030cf869fee039311f5ccf97381cef31e90f50ee","modified":1621349277912},{"_id":"public/archives/2021/02/index.html","hash":"3fc86dbce6c6f3f929ff825dc7beef9078fec20a","modified":1621349277912},{"_id":"public/archives/2021/03/index.html","hash":"267e21542134dce44a659741189cece1c3e216d1","modified":1621349277912},{"_id":"public/archives/2021/04/index.html","hash":"e3c222179a2582c16734cdc953731b3a4577eb23","modified":1621349277912},{"_id":"public/archives/2020/01/index.html","hash":"532bdf29541c8683715415bc250359505e737a9b","modified":1621349277912},{"_id":"public/archives/2021/05/index.html","hash":"19aaa27596b059dbda8d93bf303ee561d49f4897","modified":1621349277912},{"_id":"public/index.html","hash":"28f2b5b586ca7ddeac785f4185559aa04176734c","modified":1621349277912},{"_id":"public/page/2/index.html","hash":"50eedb890b303801e2c01e8c6ffddcc68d2f467f","modified":1621349277912},{"_id":"public/page/3/index.html","hash":"9ed33782e51f028abe816ecdc3ceef2dc076cce2","modified":1621349277912},{"_id":"public/page/4/index.html","hash":"a6eaa77f94f099728a76ff5b0882a9fc98f2e6f1","modified":1621349277912},{"_id":"public/page/5/index.html","hash":"e899f24a53d92e3f8e4e080ed03bb47f5e1d193f","modified":1621349277912},{"_id":"public/page/7/index.html","hash":"3083560fa18f8787329bbe60138daf35d0ad8596","modified":1621349277912},{"_id":"public/page/6/index.html","hash":"32052df9fa2f5cf1cc73e4e4bebf5670e39d4080","modified":1621349277912},{"_id":"public/tags/旅游/index.html","hash":"0daeff1dbe1239a1bf35a6185a521ab147a2de34","modified":1621349277912},{"_id":"public/tags/点分治/index.html","hash":"467430d35fac78f1f2a387c086f3c156fa4741de","modified":1621349277912},{"_id":"public/tags/中国剩余定理/index.html","hash":"96703269bf3476901d10f28db195d3055fbb9078","modified":1621349277912},{"_id":"public/tags/图论/index.html","hash":"bed29cd99a41d00b0d07fccae3d1eebfbbe6a9ba","modified":1621349277912},{"_id":"public/tags/二维偏序/index.html","hash":"8b15bab42f016bfd1ad5b3046f4968478a3422a0","modified":1621349277912},{"_id":"public/tags/单调队列/index.html","hash":"8906035faba6ea9761820a45df55e9ef9fe4b969","modified":1621349277912},{"_id":"public/tags/树形动规/index.html","hash":"84084154e67b9f10840b623bfa647a1f37276a89","modified":1621349277912},{"_id":"public/tags/数据结构/index.html","hash":"8b12f62adf77ddae97cce8f934bf48b6701db29e","modified":1621349277912},{"_id":"public/tags/数论/index.html","hash":"23160ea70053166a5fd3f1e850c0568852c45da9","modified":1621349277912},{"_id":"public/tags/拉格朗日插值法/index.html","hash":"1f36b9eccfc2bb6f21db86cc13b7bfedad502790","modified":1621349277912},{"_id":"public/tags/动态规划/index.html","hash":"97a7135b1676427f230422ac1c41ccde3b7a6e78","modified":1621349277912},{"_id":"public/tags/树状数组/index.html","hash":"cf5bfee3a84e90ebcdba116cdd0755dd59d27b37","modified":1621349277912},{"_id":"public/tags/欧拉函数/index.html","hash":"2c0181282a37b4ae267eca9a8daff8c93cab27e0","modified":1621349277912},{"_id":"public/tags/MySQL/index.html","hash":"2fdbced48f670d694ffaae353c86b1b0d038038a","modified":1621349277912},{"_id":"public/tags/欧拉定理/index.html","hash":"27ea2c9324ae0321168c4152ef05a415ca09bce8","modified":1621349277912},{"_id":"public/tags/SSL/index.html","hash":"bec8d4877a22f07e397342cc41e367aff1494645","modified":1621349277912},{"_id":"public/tags/Nginx/index.html","hash":"e5386300449b84784a31df155c0a63f89f2cea82","modified":1621349277912},{"_id":"public/tags/Python/index.html","hash":"41629861acae7e61c38fd725e8f4cfb3851fa50f","modified":1621349277912},{"_id":"public/tags/拉格朗日乘数法/index.html","hash":"11958fbaee3c11ac1555720df4b2f4814f4b7e5c","modified":1621349277912},{"_id":"public/tags/考研/index.html","hash":"fccf46d075dc82a50f4ecb3fa20883f249144ee9","modified":1621349277912},{"_id":"public/tags/IDA/index.html","hash":"1bc8877fef747734a2bffdea057b096d279f9afe","modified":1621349277912},{"_id":"public/tags/启发式搜索/index.html","hash":"8389f0f2707557aa4e02f32ac099e073686388d4","modified":1621349277912},{"_id":"public/tags/几何/index.html","hash":"042a06e8b20adb65ab0d628306ef58e5f5a726c7","modified":1621349277912},{"_id":"public/tags/HTTPS/index.html","hash":"8c1dd68ad3ecfe4aea42f0bbc8f2a5d14e09a6b6","modified":1621349277912},{"_id":"public/tags/基环树/index.html","hash":"4d8e1248cc9010e184b1a0f69fbaf9faf00c8244","modified":1621349277912},{"_id":"public/tags/搜索/index.html","hash":"c4355915966c993e5479acb3cfae7a67f933d51f","modified":1621349277912},{"_id":"public/tags/Hexo/index.html","hash":"fa203b01005b4a444899754878468974687a47e5","modified":1621349277912},{"_id":"public/tags/LCA/index.html","hash":"6abfdd7ea527d89aeaf4692b219144f985fc336d","modified":1621349277912},{"_id":"public/tags/线段树/index.html","hash":"2aec80d4894264f6b9fe65bdbd8c0bf5d7f532b7","modified":1621349277912},{"_id":"public/tags/sklearn/index.html","hash":"23c6441b504271fd444db01e69521f13bce83abc","modified":1621349277912},{"_id":"public/tags/红楼梦/index.html","hash":"63ae2ee31f7dba588ed0586c14840f2bd0dd101d","modified":1621349277912},{"_id":"public/tags/HTTP/index.html","hash":"b37bdea1273ad46024382a9f7484184088bbec18","modified":1621349277912},{"_id":"public/tags/word2vec/index.html","hash":"7ce4b5c8f763162b475f064dfbde50a7b0e90d72","modified":1621349277912},{"_id":"public/tags/Web/index.html","hash":"b2c3035fc38eeafd38c89058d1047e850325d435","modified":1621349277912},{"_id":"public/tags/模式设计/index.html","hash":"002b720453401c733c63309ca8eab623c2b2fcc2","modified":1621349277912},{"_id":"public/tags/Go/index.html","hash":"6431f350aaa515d207d1919de6f70237e20d4b50","modified":1621349277912},{"_id":"public/tags/并发/index.html","hash":"c291e02ba3f413090e2c72af6b948494cc1e6542","modified":1621349277912},{"_id":"public/categories/index.html","hash":"0e831f527932a7497c8695609497bd3b14beb39f","modified":1621349277912},{"_id":"public/tags/index.html","hash":"5f72a6cd8e43643752613da219427750a4085b92","modified":1621349277912},{"_id":"public/img/favicon.png","hash":"ba5ea2a721de98171c9033dcb4027639d3202e4c","modified":1621349277912},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1621349277912},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1621349277912},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1621349277912},{"_id":"public/img/pwa_icon_512.png","hash":"a39f22166fbbe7b5b265088e27e256aea4eb0d6f","modified":1621349277912},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1621349277912},{"_id":"public/gallery/cover/dicer.png","hash":"ea00d6c6be5151b7592bcbda551fbe4b1154394e","modified":1621349277912},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1621349277912},{"_id":"public/gallery/cover/sklearn.png","hash":"12a107ac15276e628ba168735eda6033ea4ae899","modified":1621349277912},{"_id":"public/gallery/others/LagrangeMultipliers2D.svg","hash":"d5dd8636aec34705adbd23ce7e85c044185bb5f9","modified":1621349277912},{"_id":"public/gallery/others/GoPool.png","hash":"6593675f27f43bfe13646efd29096bf9fa320c93","modified":1621349277912},{"_id":"public/gallery/others/mobaxterm-http2.png","hash":"875488cd93d51fb5826e71962d0d3fd48f157e5b","modified":1621349277912},{"_id":"public/gallery/others/python2-http.png","hash":"a9bcd32d1e6233b897a8bcd1b5070e3e07e485ea","modified":1621349277912},{"_id":"public/gallery/others/python3-http.png","hash":"a86d0c8a7a025d84e96b98dd3dc25a77ebc7ad76","modified":1621349277912},{"_id":"public/gallery/thumbnails/Goroutine.png","hash":"b89d857a1c9606cece5711c257cce8a886cee16a","modified":1621349277912},{"_id":"public/gallery/thumbnails/Mariadb.png","hash":"32b71d3da25a3b318e72a9f57c96a1de7d5ddc3a","modified":1621349277912},{"_id":"public/gallery/thumbnails/SSL.png","hash":"bd671fedc241ae063c7f68d8e240ae5a87ecc7a8","modified":1621349277912},{"_id":"public/gallery/thumbnails/acm.jpg","hash":"12555836b3c54915193e1c0f170237a0f9e39904","modified":1621349277912},{"_id":"public/gallery/thumbnails/apple-touch-icon.png","hash":"ff291298822cf0d3c273516d4e4c7f2a0ccb454a","modified":1621349277912},{"_id":"public/gallery/thumbnails/bit.png","hash":"e0df7d9ced47e248f029d02e8344a05f9382221e","modified":1621349277912},{"_id":"public/gallery/thumbnails/avatar_g.jpg","hash":"3f2a54d0f174cdc5dc942d872d358840e1d73c33","modified":1621349277912},{"_id":"public/gallery/thumbnails/avatar_m.jpg","hash":"775a890797a6998a45c9681fff6ac576ddfec9b9","modified":1621349277912},{"_id":"public/gallery/thumbnails/dicer.png","hash":"ea00d6c6be5151b7592bcbda551fbe4b1154394e","modified":1621349277912},{"_id":"public/gallery/thumbnails/favicon.ico","hash":"e47cb7b6d2387bc5c931a2c40a13767278908003","modified":1621349277912},{"_id":"public/gallery/thumbnails/home-bg-geek.jpg","hash":"2a6ef408e65acb8ced303649cdea976cea87cd79","modified":1621349277912},{"_id":"public/gallery/thumbnails/http.png","hash":"f47b5e6b6e2802f03e263d9c556d5c3035cbafb1","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-BJJ.jpg","hash":"7d09e9ef4998057227965af7ec61eb127150b204","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-alibaba.jpg","hash":"de9591810431532c88856136281889c7471a1ee9","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-YesOrNo.jpg","hash":"2915ac78127671e2e23e8ae78dc1a11f538feb3d","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-android.jpg","hash":"a164022f46c987daf252c298964e336f8ed11de9","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-debug.png","hash":"8b093d0e8ed4ee7ab0609da971c7af54bdb0b8df","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-cook.jpg","hash":"869955c480cb8eb43829e2b8de3553c44148d133","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-js-version.jpg","hash":"784f4c37221fb062612958018fd7d83afffd9746","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-ios9-web.jpg","hash":"75f6fec5e78b4839129ba6b9a881ea51129309c2","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-iWatch.jpg","hash":"1466dfff09559139c1a352b56e0a780bb9038f7d","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-miui6.jpg","hash":"8659ab737dffddf9de9536d508e2951fd0f4db09","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-miui-ux.jpg","hash":"22ef5302d9788594795d1dc46a732e4cba7fb604","modified":1621349277912},{"_id":"public/gallery/thumbnails/tag-bg.jpg","hash":"a39b7a6dfd9b33139ac4648638dad4614e74d8aa","modified":1621349277912},{"_id":"public/img/alipayQR.JPG","hash":"0d36e1cdd256b0cfd46ad9b23b31365900770127","modified":1621349277912},{"_id":"public/gallery/others/mobaxterm-http1.png","hash":"105c50f7500707357fc71a0bfcb1cc2c7d0c31ee","modified":1621349277912},{"_id":"public/gallery/cover/gitpage.png","hash":"2e80f3229dae0371d01de1acc24e8efd76f1b2cd","modified":1621349277912},{"_id":"public/gallery/thumbnails/Lagrange_polynomial.svg","hash":"63f4f5ef917a641132a539413082c987d75fe2fa","modified":1621349277912},{"_id":"public/gallery/thumbnails/home-bg-art.jpg","hash":"a8a46a06f566e13a919d9cbca6a66ae5a3b78b1e","modified":1621349277912},{"_id":"public/gallery/thumbnails/jiaozuo-onsite.jpg","hash":"b54a6aada563bbbeebd0103040b3ed5c25599e6a","modified":1621349277912},{"_id":"public/gallery/thumbnails/home-bg-o.jpg","hash":"fc4bdf7fa98346ea35115151e4914cd1e5a946d9","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-desk.jpg","hash":"6bbe3de397f929a7ca0a49c88779a4a8dd904a88","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-digital-native.jpg","hash":"a095324cf8965559b1281725c4795a15423a9067","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-e2e-ux.jpg","hash":"96e64cb596452e3b0976775e6d0dd99af855277a","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-github-cup.jpg","hash":"c5a7baaddbf0249598dcdad0ac35b16c7dc0cfbe","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-mma-1.jpg","hash":"20ff60fad50f4cfc4478f1793837e6585f8ec686","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-kuaidi.jpg","hash":"cff05c518b1070db6eb1411dfb8c641e877b2648","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-mma-2.jpg","hash":"1689b460b03f238e0eab0694a0326ab426e1822d","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-mma-6.jpg","hash":"ccb141d248876960eef77beac8bf7a35db11dfef","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-re-vs-ng2.jpg","hash":"569bcd9cd3c68194e5ba99c8e9ba34f82c567bb1","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-mma-3.jpg","hash":"36dbeb705aaf7ce1ceb53e163435ee6daf3ea3d4","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-rwd.jpg","hash":"eb09bff005e1b12a9d8b05b67b1cd7b7e9fca2ed","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-universe.jpg","hash":"eaf5940a86ae49122fbfaa02be1f8d236775b6e0","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-swift2.jpg","hash":"fa736fa9693ba3e6959fd3df156c24135ede696f","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-sample-image.jpg","hash":"6bc21d04da3c0e48a677cac6272220fb188cb8de","modified":1621349277912},{"_id":"public/gallery/thumbnails/tag-bg-o.jpg","hash":"fb4c2386d7463a289d1b0e63798ecba71bda1735","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-unix-linux.jpg","hash":"34647266880a01bb87d08c9ff4bc0631b6251803","modified":1621349277912},{"_id":"public/img/wechatQR.JPG","hash":"e34538ce02b736d82b0dde9087825208e4846438","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_The Star, Anton Fadeev_01.jpg","hash":"5fcbfcbd0de452e4d97dcdf050c77012c4f6740f","modified":1621349277912},{"_id":"public/gallery/thumbnails/404-bg.jpg","hash":"dded479a06d5165d1f87c63677442aecdf1ac748","modified":1621349277912},{"_id":"public/gallery/thumbnails/johannes-roots-in-the-treetops-by-jkroots-d9t9p4y.jpg","hash":"888cdd5048b5f817b2f3b57fbf30c05138840662","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-2015.jpg","hash":"2e36367aa6ec06af534c4bc18a88d556b235713b","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-foxg.JPG","hash":"8d09169d255b3f9b46d14db6ceb2a9367206044b","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-hacker.jpg","hash":"2643d21001e01904cef829cebbce501e7f01dc50","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-ios10.jpg","hash":"c6f6f6ff121c3a51485fc86b60bf6f6939c53fd6","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-os-metro.jpg","hash":"17066b10ffa721d933c976fbc1c917f2524ff13e","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-swift.jpg","hash":"12552e545ca35a93f0050a5417de5d302f1a4f5e","modified":1621349277912},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1621349277912},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1621349277912},{"_id":"public/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1621349277912},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1621349277912},{"_id":"public/css/style.css","hash":"dface2e174ef227909568b303c2ab910ea0e148e","modified":1621349277912},{"_id":"public/css/default.css","hash":"dface2e174ef227909568b303c2ab910ea0e148e","modified":1621349277912},{"_id":"public/css/cyberpunk.css","hash":"c10d36ce730f20fbd555d80719c4c691df9fcb06","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Obsidian Woods, Anton Fadeev_01.jpg","hash":"4e64f4a9d2986981e27b14710a251b9ded823bfb","modified":1621349277912},{"_id":"public/gallery/thumbnails/3_Sea Landscapes, Anton Fadeev_04.jpg","hash":"12cb9fb3674c57876e02d117269fe67d3c4b8bd6","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-02.JPG","hash":"85c0bcf7722a6a22414edae328574993651baddc","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-airport.JPG","hash":"4d00601a2a73e9f18ec032f86f83185b5ec0a5af","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-coffee.jpeg","hash":"5cc6b251c1b294c0d6d2cd8ab02cd4ba6e4a4213","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-ioses.jpg","hash":"5c83e24ffd94489590b09fedcfdd11012a8e1f91","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-keybord.jpg","hash":"28821432875e44dfca6c80d4cefa3d4f17ef552b","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-mma-0.png","hash":"d595c98958f32173eba3b0c23196ffcf408f7fb0","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-mma-5.jpg","hash":"ded32cc43e83600ff904bfce577ed3d45e925562","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Construction of the Monolith, Anton Fadeev_01.jpg","hash":"8e890130cfa96d44d4892f23fc38a3583c50296e","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Bloodmoon Ruins, Anton Fadeev_01.jpg","hash":"df02f26a67a590755be21cc25a9f210ef6a9ac44","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Greater Celandine, Anton Fadeev_01.jpg","hash":"85b0e72207c83eccd0c145236bd586540166d8a8","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Obsidian woods_2, Anton Fadeev_01.jpg","hash":"76d02bf36f818c451b8889f57481f1ea59cd9452","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Rasha, Anton Fadeev_01.jpg","hash":"82d5ced71067dacd88d7fa3bba455b84d6aa90f0","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Monolith - view1, Anton Fadeev_01.jpg","hash":"10db0cb8ddfd74707e7e9ca193be169a0966719a","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Square landscapes, Anton Fadeev_01.jpg","hash":"b59cd0fc9e775984f9205fda95218b306fa851c5","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Whistling Blades, Anton Fadeev_01.jpg","hash":"9d62985cf13478fea7d860949ecf70ffa08ba638","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Construction of the Monolith, Anton Fadeev_02.jpg","hash":"8c7335bdd977ff528ec114a71844558d42cce886","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Green sketches , Anton Fadeev_02.jpg","hash":"55bb4a6e5b3f4248cab5ef5e1e820b529c85f49d","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Rasha, Anton Fadeev_02.jpg","hash":"d0011a43564c7447a98d2bc005abedb9034037e0","modified":1621349277912},{"_id":"public/gallery/thumbnails/2_Square landscapes 2, Anton Fadeev_03.jpg","hash":"8687af4dd44cc889367ec096bd2ab8eccc824eb7","modified":1621349277912},{"_id":"public/gallery/thumbnails/2_Square landscapes, Anton Fadeev_03.jpg","hash":"1468ffda278a73ae125c6154f79a562cef86003c","modified":1621349277912},{"_id":"public/gallery/thumbnails/3_Square landscapes, Anton Fadeev_04.jpg","hash":"86d9b8a5bb624b278e5ea2111c0f9e414263b3ed","modified":1621349277912},{"_id":"public/gallery/thumbnails/3_Square landscapes 2, Anton Fadeev_04.jpg","hash":"daf9d273044475c6070cf174a363b740a71d30ef","modified":1621349277912},{"_id":"public/gallery/thumbnails/4_Square landscapes 2, Anton Fadeev_05.jpg","hash":"c8a85e4d517f222caef3d2ed24107fa83a2c1a29","modified":1621349277912},{"_id":"public/gallery/thumbnails/6_Square landscapes, Anton Fadeev_07.jpg","hash":"be8cd8221ac4c488f95b50e00aae6688b3a601d2","modified":1621349277912},{"_id":"public/gallery/thumbnails/5_Square landscapes, Anton Fadeev_06.jpg","hash":"db706a66ff8c4fa1ce1313013b4cb524e9a2979f","modified":1621349277912},{"_id":"public/gallery/thumbnails/girl-meets-bear8.png","hash":"d3512cf5fc89b4e2ca859c9512989a5eaddd7398","modified":1621349277912},{"_id":"public/gallery/thumbnails/girl-pick.jpg","hash":"9fac81c55502521ce5d1358af7fd7f579e767a53","modified":1621349277912},{"_id":"public/gallery/thumbnails/home-bg.jpg","hash":"35131c8b7ab3943c9fe4577329cd1c412d1c4fac","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_BOOM! , Anton Fadeev_01.jpg","hash":"3bb562165e7f42ce0c6ae152b8aeaba8d43ffcb7","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Magmar, Anton Fadeev_01.jpg","hash":"d35295eb10056952eb0b11d1afd7a002311c974a","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Magmar, Anton Fadeev_02.jpg","hash":"43ca4247cadb8cc3946e62b24ed21e2cf999bf7d","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Songhai City, Anton Fadeev_01.jpg","hash":"36ba114033b6fed47a62eb376b90462c7ef12dbc","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Sea Landscapes, Anton Fadeev_01.jpg","hash":"f5db3acb8883ba543ab9e831ec197e7598a302f4","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Square landscapes 2, Anton Fadeev_01.jpg","hash":"547c177d0dbd7beffc0b9be6a3fdc1d2155a59d6","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_The Air Bridge, Anton Fadeev_01.jpg","hash":"40118b365ccbaed94e460bb13883a907dd7cfe6c","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Star Crystals, Anton Fadeev_01.jpg","hash":"3b9375e7c5ff40d1a298ed7bcfda5104c98011a4","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_The Giant Ice Floes, Anton Fadeev_01.jpg","hash":"1a7c7d9b8ac954c6a7a71416069e20cf379c3e22","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_The Gate , Anton Fadeev_01.jpg","hash":"8c39a6c132b85b69132a52c1db78edbac0d93793","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Square landscapes 2, Anton Fadeev_02.jpg","hash":"c3fb5a9553455dbd89abea09be96f640dbdb1050","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Square landscapes, Anton Fadeev_02.jpg","hash":"0ccd238b54eb4f86ad39e9dccdc22eb9b8d92fcc","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Rasha 2, Anton Fadeev_02.jpg","hash":"ef32c8e4c6f1a4256ce2c99e874cec27d0b2dfb2","modified":1621349277912},{"_id":"public/gallery/thumbnails/4_Square landscapes, Anton Fadeev_05.jpg","hash":"d865ba19f0244116c0b1fa0465ac3c6de49cf0b9","modified":1621349277912},{"_id":"public/gallery/thumbnails/girl-meets-bear4.png","hash":"f5604a213280d56455d9d3ccabf7707843e8b7e3","modified":1621349277912},{"_id":"public/gallery/thumbnails/hei.jpg","hash":"d393e62e30f5418ceab774937f3e5e7cade54b3b","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-g1.JPG","hash":"ad90dee03cf5f3a545c1a5375a2252a9ce928820","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-g2.JPG","hash":"89d9a49fa8eb2dc853759409d9fc55bd1d6b73c8","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-mma-4.jpg","hash":"b15e82a74b2fa75e40ade9f3aa77235afdee0c40","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-red-moon.jpg","hash":"2189d980d1aa6e20ddd83c0147b8a2b55a2d63fd","modified":1621349277912},{"_id":"public/img/avatar.png","hash":"05fe38fef5e6016e42b67e2edacf2187b32fbc7c","modified":1621349277912},{"_id":"public/gallery/photos/ymy.png","hash":"858a4d2b4eceb4e09268b6b9d3a90f78e4aa4f88","modified":1621349277912},{"_id":"public/gallery/others/hlm-part.png","hash":"e9a95df0fd6951a0772ff5d142fc8c4ec5d6ca89","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Shim'zar, Anton Fadeev_01.jpg","hash":"3ab3dcc9db5ff75b921b5b1b5232f5201caaf0d8","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Vermillion Forest, Anton Fadeev_01.jpg","hash":"4c467bcf6a7b00d5c06fa654741785bc027a729c","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_The Great Tree of Eyos, Anton Fadeev_01.jpg","hash":"1303771be0d6f30319dee0e44fcd7246a2add993","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Hi...Dude!, Anton Fadeev_02.jpg","hash":"b661be3411cbaec9357197303fcab8e8b74a49cf","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_The Frozen Floes of Northern Celandine, Anton Fadeev_02.jpg","hash":"52ae214ecc6707c71269be0c22d531370652399a","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_The Great Tree of Eyos, Anton Fadeev_02.jpg","hash":"bf70abe89a391d8b319d8df09666b2da767a3237","modified":1621349277912},{"_id":"public/gallery/thumbnails/girl-meets-bear1.png","hash":"0ff8e756761b1f7b1549a958d3d7c1c8ccbefa7d","modified":1621349277912},{"_id":"public/gallery/thumbnails/girl-meets-bear6.png","hash":"b41fc912c6f2f0769e7aa8a01fa4ab8856f6ea82","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Green sketches , Anton Fadeev_01.jpg","hash":"2a724ef44b7d52817101af5f83d77e36f922d8d6","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Homecoming, Anton Fadeev_01.jpg","hash":"631ced5e4141b3f77a09b6bfd3883e6bc56b47a0","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Rasha 2, Anton Fadeev_01.jpg","hash":"4f1cc19a6058488746f80c339eba1c45ae155440","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Vanar, Anton Fadeev_01.jpg","hash":"bf538dedd9dce263c1b237a50f4190748a3e5822","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Sea Landscapes, Anton Fadeev_02.jpg","hash":"0c2c5d2a16c58f4201f900bada57b2da0baca2e3","modified":1621349277912},{"_id":"public/gallery/thumbnails/girl-meets-bear5.png","hash":"29854795a5d5c063374caeace4879b3a2347b651","modified":1621349277912},{"_id":"public/gallery/thumbnails/girl-meets-bear7.png","hash":"69c75c4d087598de76b31817f6dfcd59d2805999","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-Seeshoumaru.jpg","hash":"8cd55cd63fa1d3dfbd5b629f50ca86fc862632fa","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-map.jpg","hash":"0fef53368ecfadea81de49e714b438bd7516448e","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Hi...Dude!, Anton Fadeev_01.jpg","hash":"bd0776305709f0646042e69821ccd361f1c74ebb","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_The Frozen Floes of Northern Celandine, Anton Fadeev_01.jpg","hash":"29b7b211a8fef8b4fa13a46150e8d2094130ced0","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Bad Idea, Anton Fadeev_02.jpg","hash":"16dc075b6bf03f651743eced09863187bd40fbd9","modified":1621349277912},{"_id":"public/gallery/thumbnails/2_Sea Landscapes, Anton Fadeev_03.jpg","hash":"ccf0aecd44bd6b166bd5aa97947cd9658397dde3","modified":1621349277912},{"_id":"public/gallery/thumbnails/about-Dicer-gentle.jpg","hash":"1915783841d0af01f6d4c8d60e30f165186a0818","modified":1621349277912},{"_id":"public/gallery/thumbnails/gate-wall.jpg","hash":"0df961cb7c31a3597eb10aa2ff077e3e1b25e666","modified":1621349277912},{"_id":"public/gallery/thumbnails/sylvain-sarrailh-wandering.jpg","hash":"f4c6a0faead331197081554bb16fe5caf5e17184","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Crystal Caverns , Anton Fadeev_01.jpg","hash":"5b2d0afe05de95ddb2274e12a1708f1e62d07fc8","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Shim'zar, Anton Fadeev_02.jpg","hash":"17375971fe0871533cf33dcda89eef6cd9c344a7","modified":1621349277912},{"_id":"public/gallery/thumbnails/BadIdea.jpg","hash":"db9d880dba745cb67bb254bfdf20f0f5ae07125f","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-hwl.JPG","hash":"a0398b79509f6e6b6140c076a777e9f0a0d19354","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-g3.JPG","hash":"472aae837d94e0bd8374a7218004c107d0aedd63","modified":1621349277912},{"_id":"public/gallery/thumbnails/roman-kraft-WUvBROPOsuo-unsplash.jpg","hash":"00b2053f6128c1961c76a80cefa5192f5f9cfe86","modified":1621349277912},{"_id":"public/gallery/others/hlm-all.png","hash":"040f40efceeb79af8df106355e5dd65ad517202b","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-forest.jpg","hash":"c61357d0f615f6b391d285397672dc979229fefd","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-ghost.jpg","hash":"e01de1fc070ef73495ddb7448a850f76d7b9e747","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Save me, Anton Fadeev_01.jpg","hash":"2092a1466bb8578fa9b268f3039ee64a31e5225b","modified":1621349277912},{"_id":"public/gallery/thumbnails/1_Dog and Hot springs, Anton Fadeev_02.jpg","hash":"06987d4547de15cae7eaaaed531e34675c30512a","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-anime-girl.jpg","hash":"8108ff7621dcb8de63a12b5db6f4464066e6b1c4","modified":1621349277912},{"_id":"public/gallery/thumbnails/hei3.jpg","hash":"924dd11e5f1094d2d718be900c66ef01cc2de8b1","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-color-keyboard.JPG","hash":"828c002d6d3f64d7705be31cb80a062dcd1690b9","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Malephar, Anton Fadeev_01.jpg","hash":"6aa82dbd63044329240cd3cbc8f5307399ce894f","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_werewolf, Anton Fadeev_01.jpg","hash":"d44d59b80c9263bea98f0eb70b46b6026311d3e2","modified":1621349277912},{"_id":"public/gallery/thumbnails/hei2.JPG","hash":"ac29e301cffd67f650b2187aa690175586ab290c","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-ancent-costume-girl.jpg","hash":"8fe7028238e65006962203e8fe0793a418443515","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-sunbust.jpg","hash":"32ea6c12d670f254f66bb4e763c62cf5d5bbd30d","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-ring-girl.jpg","hash":"02d7ea3dedf68951ff91350011a0a291856a91fd","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Windcliffe, Anton Fadeev_01.jpg","hash":"757c3fa3a7fb628c61b7ecea805fd15767ff67fd","modified":1621349277912},{"_id":"public/gallery/thumbnails/dear.jpg","hash":"4a1a933fd2d4bc98b78339f72ace365cbdcd3ff2","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Kaero, Anton Fadeev_01.jpg","hash":"f7375c7b7dbafee2c06f18d5a07836718d9df016","modified":1621349277912},{"_id":"public/gallery/thumbnails/0_Xaan, Anton Fadeev_01.jpg","hash":"93406f698feebea745e50fa868da88c6237bb13e","modified":1621349277912},{"_id":"public/gallery/thumbnails/girl-meets-bear2.png","hash":"08e23f990cf26998989be2d7ff2fc3b543fd91ce","modified":1621349277912},{"_id":"public/gallery/thumbnails/girl-meets-bear3.png","hash":"a343fe30d95e52e46721ba3640283fe878d9dfde","modified":1621349277912},{"_id":"public/gallery/thumbnails/jiaozuo-onsite.png","hash":"eb9f8c45186ff93a3b7e5f64059567b14f641243","modified":1621349277912},{"_id":"public/gallery/thumbnails/kite.png","hash":"a2434257ece97a77d4256994333f3f3f5a5207e8","modified":1621349277912},{"_id":"public/gallery/cover/hlm.png","hash":"48a1e390e056bc2b546e5e0c600c403b0d08e200","modified":1621349277912},{"_id":"public/gallery/thumbnails/post-bg-bench.jpg","hash":"ab5a382ca5c9e023875ab3bcb030d7b178523b58","modified":1621349277912},{"_id":"public/download/MobaXterm.exe","hash":"7cf8db38adc9b3aa40b22376de66e90e4e51c7dc","modified":1621349277912}],"Category":[{"name":"竞赛","_id":"ckou5hybr000569kj1mkjh6wf"},{"name":"CCPC","parent":"ckou5hybr000569kj1mkjh6wf","_id":"ckou5hyc2000k69kjh00v4wv6"},{"name":"ICPC","parent":"ckou5hybr000569kj1mkjh6wf","_id":"ckou5hyc3000q69kj9nt4e95e"},{"name":"网络","_id":"ckou5hyca001669kj2k6x5k16"},{"name":"ECNU","_id":"ckou5hycc001e69kj2a1k68h1"},{"name":"NLP","_id":"ckou5hycg001x69kjakprgqwk"},{"name":"随笔","_id":"ckou5hyck002569kj0js8gw0c"}],"Data":[],"Page":[{"title":"About Me","date":"2019-04-11T13:37:26.000Z","thumbnail":"/gallery/thumbnails/0_Windcliffe, Anton Fadeev_01.jpg","_content":"\n## Welcome!\n\nHello, I'm Dicer.\n\nWelcome to my site that is used to store my blogs and diarys.\n\nAll of the contents are created by Myself or captured from Internet. If existed any tort, please contact to me: dicer0615@gmail.com\n\n---\n\nSome awesome works created by `Anton Fadeev`，<i class=\"far fa-hand-point-right\" style=\"color:blue\"></i>[Click to see all works of Anton](https://www.artstation.com/shant)\n\n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2019-04-11 21:37:26\nthumbnail: /gallery/thumbnails/0_Windcliffe, Anton Fadeev_01.jpg\n---\n\n## Welcome!\n\nHello, I'm Dicer.\n\nWelcome to my site that is used to store my blogs and diarys.\n\nAll of the contents are created by Myself or captured from Internet. If existed any tort, please contact to me: dicer0615@gmail.com\n\n---\n\nSome awesome works created by `Anton Fadeev`，<i class=\"far fa-hand-point-right\" style=\"color:blue\"></i>[Click to see all works of Anton](https://www.artstation.com/shant)\n\n","updated":"2021-03-29T15:43:34.358Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckou5hybl000169kje5alg9o1","content":"<h2 id=\"Welcome\"><a href=\"#Welcome\" class=\"headerlink\" title=\"Welcome!\"></a>Welcome!</h2><p>Hello, I’m Dicer.</p>\n<p>Welcome to my site that is used to store my blogs and diarys.</p>\n<p>All of the contents are created by Myself or captured from Internet. If existed any tort, please contact to me: <a href=\"mailto:dicer0615@gmail.com\">dicer0615@gmail.com</a></p>\n<hr>\n<p>Some awesome works created by <code>Anton Fadeev</code>，<i class=\"far fa-hand-point-right\" style=\"color:blue\"></i><a href=\"https://www.artstation.com/shant\">Click to see all works of Anton</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Welcome\"><a href=\"#Welcome\" class=\"headerlink\" title=\"Welcome!\"></a>Welcome!</h2><p>Hello, I’m Dicer.</p>\n<p>Welcome to my site that is used to store my blogs and diarys.</p>\n<p>All of the contents are created by Myself or captured from Internet. If existed any tort, please contact to me: <a href=\"mailto:dicer0615@gmail.com\">dicer0615@gmail.com</a></p>\n<hr>\n<p>Some awesome works created by <code>Anton Fadeev</code>，<i class=\"far fa-hand-point-right\" style=\"color:blue\"></i><a href=\"https://www.artstation.com/shant\">Click to see all works of Anton</a></p>\n"}],"Post":[{"title":"2019CCPC河南省省赛","thumbnail":"/gallery/thumbnails/0_Green sketches , Anton Fadeev_01.jpg","date":"2019-04-13T11:43:29.000Z","_content":"\n## 碎碎念\n\n早上８点才出发，本来以为时间会很紧张，不过９点多一点就到了。不过没有参加开幕式。\n\n<!--more-->\n\n## 复盘\n\n然后比赛开始，前两道水题签到很快就过了，然后发现有人在交A，但是都没过，mengshen猜了半天的假结论，直接被hack掉了，然后被通知A重判了，发现过了好几个队，然后仔细想了下，发现直接把每个行当做元素进行LIS就行了。然后我写了半天的LCS过了样例就交了一发，１WA，然后甚至还觉得自己写的很完美，演了半天，然后改抄白书模板自作聪明改了一点，过了样例，又交，２WA，演了大概30min，然后mengshen上机抄了一下模板，然后改了一下check两行之间关系的函数，成功３AC。\n\n期间我看了F题，看了一下题面直接丢给了老毕，然后听他说好像有一个边界判错了浪费了好长时间DEBUG，不过最后还是过了，１A。\n\n这个时候四题已经在金区了（好水），发现C，H都有人过，于是看C，H，以为Ｃ是跟前几天训练一样的multiset写法，然后发现不会两个multiset的合并，内存时间都可能爆炸。Ｈ是一个奇奇怪怪的搜索顺序，到最后都没弄明白。然后觉得可能还有其他题目能开，于是开始一道一道看，发现了Ｉ题是一个暴力剪枝很可行的题，而且很难造能卡主暴力的数据，于是我上机敲了一发暴力，1Ａ，之后一直在Ｃ，Ｈ两题之间倒腾但是并不会写。\n\n## 结语\n\n最后５题水了个金，赞助商爸爸大气，每题一血还有５００现金，Ｉ题差４min一血，好可惜。\n\n面包牛奶香蕉好评，就是面包有点油。上次天梯赛在郑轻的时候，键盘`Ctrl`特别硬，都摁不下去，这次好像机房升级了，全部ＨＰ的键盘鼠标，县显示器１０８０分辨率超级舒服，i7-8700的电脑用起来真的爽，郑州轻工业大学牛逼！体验极佳。","source":"_posts/2019-Henan-CCPC-provincial-competition.md","raw":"---\ntitle: 2019CCPC河南省省赛\nthumbnail: /gallery/thumbnails/0_Green sketches , Anton Fadeev_01.jpg\ndate: 2019-04-13 19:43:29\ntags: \n    - 旅游\ncategories: \n    - [竞赛, CCPC]\n---\n\n## 碎碎念\n\n早上８点才出发，本来以为时间会很紧张，不过９点多一点就到了。不过没有参加开幕式。\n\n<!--more-->\n\n## 复盘\n\n然后比赛开始，前两道水题签到很快就过了，然后发现有人在交A，但是都没过，mengshen猜了半天的假结论，直接被hack掉了，然后被通知A重判了，发现过了好几个队，然后仔细想了下，发现直接把每个行当做元素进行LIS就行了。然后我写了半天的LCS过了样例就交了一发，１WA，然后甚至还觉得自己写的很完美，演了半天，然后改抄白书模板自作聪明改了一点，过了样例，又交，２WA，演了大概30min，然后mengshen上机抄了一下模板，然后改了一下check两行之间关系的函数，成功３AC。\n\n期间我看了F题，看了一下题面直接丢给了老毕，然后听他说好像有一个边界判错了浪费了好长时间DEBUG，不过最后还是过了，１A。\n\n这个时候四题已经在金区了（好水），发现C，H都有人过，于是看C，H，以为Ｃ是跟前几天训练一样的multiset写法，然后发现不会两个multiset的合并，内存时间都可能爆炸。Ｈ是一个奇奇怪怪的搜索顺序，到最后都没弄明白。然后觉得可能还有其他题目能开，于是开始一道一道看，发现了Ｉ题是一个暴力剪枝很可行的题，而且很难造能卡主暴力的数据，于是我上机敲了一发暴力，1Ａ，之后一直在Ｃ，Ｈ两题之间倒腾但是并不会写。\n\n## 结语\n\n最后５题水了个金，赞助商爸爸大气，每题一血还有５００现金，Ｉ题差４min一血，好可惜。\n\n面包牛奶香蕉好评，就是面包有点油。上次天梯赛在郑轻的时候，键盘`Ctrl`特别硬，都摁不下去，这次好像机房升级了，全部ＨＰ的键盘鼠标，县显示器１０８０分辨率超级舒服，i7-8700的电脑用起来真的爽，郑州轻工业大学牛逼！体验极佳。","slug":"2019-Henan-CCPC-provincial-competition","published":1,"updated":"2021-03-28T08:39:39.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hybh000069kj769j2dw3","content":"<h2 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h2><p>早上８点才出发，本来以为时间会很紧张，不过９点多一点就到了。不过没有参加开幕式。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"复盘\"><a href=\"#复盘\" class=\"headerlink\" title=\"复盘\"></a>复盘</h2><p>然后比赛开始，前两道水题签到很快就过了，然后发现有人在交A，但是都没过，mengshen猜了半天的假结论，直接被hack掉了，然后被通知A重判了，发现过了好几个队，然后仔细想了下，发现直接把每个行当做元素进行LIS就行了。然后我写了半天的LCS过了样例就交了一发，１WA，然后甚至还觉得自己写的很完美，演了半天，然后改抄白书模板自作聪明改了一点，过了样例，又交，２WA，演了大概30min，然后mengshen上机抄了一下模板，然后改了一下check两行之间关系的函数，成功３AC。</p>\n<p>期间我看了F题，看了一下题面直接丢给了老毕，然后听他说好像有一个边界判错了浪费了好长时间DEBUG，不过最后还是过了，１A。</p>\n<p>这个时候四题已经在金区了（好水），发现C，H都有人过，于是看C，H，以为Ｃ是跟前几天训练一样的multiset写法，然后发现不会两个multiset的合并，内存时间都可能爆炸。Ｈ是一个奇奇怪怪的搜索顺序，到最后都没弄明白。然后觉得可能还有其他题目能开，于是开始一道一道看，发现了Ｉ题是一个暴力剪枝很可行的题，而且很难造能卡主暴力的数据，于是我上机敲了一发暴力，1Ａ，之后一直在Ｃ，Ｈ两题之间倒腾但是并不会写。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>最后５题水了个金，赞助商爸爸大气，每题一血还有５００现金，Ｉ题差４min一血，好可惜。</p>\n<p>面包牛奶香蕉好评，就是面包有点油。上次天梯赛在郑轻的时候，键盘<code>Ctrl</code>特别硬，都摁不下去，这次好像机房升级了，全部ＨＰ的键盘鼠标，县显示器１０８０分辨率超级舒服，i7-8700的电脑用起来真的爽，郑州轻工业大学牛逼！体验极佳。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h2><p>早上８点才出发，本来以为时间会很紧张，不过９点多一点就到了。不过没有参加开幕式。</p>","more":"<h2 id=\"复盘\"><a href=\"#复盘\" class=\"headerlink\" title=\"复盘\"></a>复盘</h2><p>然后比赛开始，前两道水题签到很快就过了，然后发现有人在交A，但是都没过，mengshen猜了半天的假结论，直接被hack掉了，然后被通知A重判了，发现过了好几个队，然后仔细想了下，发现直接把每个行当做元素进行LIS就行了。然后我写了半天的LCS过了样例就交了一发，１WA，然后甚至还觉得自己写的很完美，演了半天，然后改抄白书模板自作聪明改了一点，过了样例，又交，２WA，演了大概30min，然后mengshen上机抄了一下模板，然后改了一下check两行之间关系的函数，成功３AC。</p>\n<p>期间我看了F题，看了一下题面直接丢给了老毕，然后听他说好像有一个边界判错了浪费了好长时间DEBUG，不过最后还是过了，１A。</p>\n<p>这个时候四题已经在金区了（好水），发现C，H都有人过，于是看C，H，以为Ｃ是跟前几天训练一样的multiset写法，然后发现不会两个multiset的合并，内存时间都可能爆炸。Ｈ是一个奇奇怪怪的搜索顺序，到最后都没弄明白。然后觉得可能还有其他题目能开，于是开始一道一道看，发现了Ｉ题是一个暴力剪枝很可行的题，而且很难造能卡主暴力的数据，于是我上机敲了一发暴力，1Ａ，之后一直在Ｃ，Ｈ两题之间倒腾但是并不会写。</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>最后５题水了个金，赞助商爸爸大气，每题一血还有５００现金，Ｉ题差４min一血，好可惜。</p>\n<p>面包牛奶香蕉好评，就是面包有点油。上次天梯赛在郑轻的时候，键盘<code>Ctrl</code>特别硬，都摁不下去，这次好像机房升级了，全部ＨＰ的键盘鼠标，县显示器１０８０分辨率超级舒服，i7-8700的电脑用起来真的爽，郑州轻工业大学牛逼！体验极佳。</p>"},{"title":"2019-ICPC-沈阳网络赛-D","thumbnail":"/gallery/thumbnails/1_Rasha 2, Anton Fadeev_02.jpg","date":"2019-09-28T15:12:17.000Z","_content":"\n# 题目\n\n[Fish eating fruit](https://nanti.jisuanke.com/t/41403)\n\n点分治进阶题目，状态很多，统计起来有点复杂。\n\n<!--more-->\n\n## 分析\n\n首先肯定是点分治没得跑了，然后就是怎么计算的问题了。\n\n我是先统计出来所有的 $mod $ 后的值，对于每一个节点的深度，可以计算出来这个点对 三个剩余 的贡献。\n\n转移一下就好了。\n\n因为去重的时候做了减法，所有答案可能是负值，要调整回来。\n\n## 代码\n\n~~~cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\n#define size sizeeeeeeee\nusing namespace std;\n\ntypedef long long ll;\nconst int MOD = 1e9+7;\nconst int MAXN = 1e4 + 7;\n\nll ans1, ans2, ans3, cnt[4];\nint n, root, size, tot = 0;\nint son[MAXN], f[MAXN], head[MAXN];\nint dep[MAXN]; bool vis[MAXN];\nstruct node{\n    int u, w, nxt;\n}; vector<node> E;\nvoid add(int u, int v, int w) {\n    E.push_back(node{v, w, head[u]});\n    head[u] = tot++;\n}\nvoid get_rt(int x, int fa = 0) {\n    son[x] = 1; f[x] = 0;\n    for(int j = head[x]; ~j; j = E[j].nxt) {\n        int u = E[j].u, w = E[j].w;\n        if(vis[u] || u == fa)   continue;\n        get_rt(u, x);\n        son[x] += son[u];\n        f[x] = max(f[x], son[u]);\n    }\n    f[x] = max(f[x], size - son[x]);\n    if(f[x] < f[root]) root = x;\n}\nvector<int> v;\nvoid get_dep(int x, int fa) {\n    v.push_back(dep[x]); cnt[dep[x]%3]++;\n    for(int j = head[x]; ~j; j = E[j].nxt) {\n        int u = E[j].u, w = E[j].w;\n        if(vis[u] || u == fa)   continue;\n        dep[u] = dep[x] + w;\n        get_dep(u, x);\n    }\n}\nvoid calc(int x, int op) {\n    memset(cnt, 0, sizeof cnt); v.clear();\n    get_dep(x, 0);\n    ll res0, res1, res2;\n    res0 = res1 = res2 = 0;\n    for(int p: v) {\n        int offset = p%3;\n        if(offset == 0) {\n            res0 += op * (cnt[0] - 1) * p;\n            res1 += op * cnt[1] * p;\n            res2 += op * cnt[2] * p;\n        } else if(offset == 1) {\n            res0 += op * cnt[2] * p;\n            res1 += op * cnt[0] * p;\n            res2 += op * (cnt[1] - 1) * p;\n        } else {\n            res0 += op * cnt[1] * p;\n            res1 += op * (cnt[2] - 1) * p;\n            res2 += op * cnt[0] * p;\n        }\n        res0 %= MOD; res1 %= MOD; res2 %= MOD;\n    }\n    ans1 += res0; ans2 += res1; ans3 += res2;\n    ans1 %= MOD; ans2 %= MOD; ans3 %= MOD;\n}\nvoid solve(int x) {\n    dep[x] = 0; calc(x, 1); vis[x] = 1;\n    for(int j = head[x]; ~j; j = E[j].nxt) {\n        int u = E[j].u, w = E[j].w;\n        if(vis[u])  continue;\n        dep[u] = w; calc(u, -1);\n        root = 0; size = son[u];\n        get_rt(u);\n        solve(root);\n    }\n}\nint main(int argc, char const *argv[])\n{\n    while(~scanf(\"%d\", &n)) {\n        memset(head, -1, sizeof head);\n        memset(vis, 0, sizeof vis);\n        E.clear(); tot = 0;\n        int u, v, w;\n        rep(i, 1, n-1) {\n            scanf(\"%d %d %d\", &u, &v, &w);\n            u++; v++;\n            add(u, v, w); add(v, u, w);\n        }\n        root = 0; f[0] = size = n;\n        get_rt(1, 0);\n        ans1 = ans2 = ans3 = 0;\n        solve(root);\n        ans1 = ans1 * 2 % MOD;\n        ans2 = ans2 * 2 % MOD;\n        ans3 = ans3 * 2 % MOD;\n        ans1 = (ans1 + MOD) % MOD;\n        ans2 = (ans2 + MOD) % MOD;\n        ans3 = (ans3 + MOD) % MOD;\n        printf(\"%lld %lld %lld\\n\", ans1, ans2, ans3);\n    }\n    return 0;\n}\n~~~\n\n","source":"_posts/2019-ICPC-Shenyang-contest-online.md","raw":"---\ntitle: 2019-ICPC-沈阳网络赛-D\nthumbnail: /gallery/thumbnails/1_Rasha 2, Anton Fadeev_02.jpg\ndate: 2019-09-28 23:12:17\ntags: \n    - 点分治\n    - 图论\ncategories: \n    - [竞赛, ICPC]\n---\n\n# 题目\n\n[Fish eating fruit](https://nanti.jisuanke.com/t/41403)\n\n点分治进阶题目，状态很多，统计起来有点复杂。\n\n<!--more-->\n\n## 分析\n\n首先肯定是点分治没得跑了，然后就是怎么计算的问题了。\n\n我是先统计出来所有的 $mod $ 后的值，对于每一个节点的深度，可以计算出来这个点对 三个剩余 的贡献。\n\n转移一下就好了。\n\n因为去重的时候做了减法，所有答案可能是负值，要调整回来。\n\n## 代码\n\n~~~cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\n#define size sizeeeeeeee\nusing namespace std;\n\ntypedef long long ll;\nconst int MOD = 1e9+7;\nconst int MAXN = 1e4 + 7;\n\nll ans1, ans2, ans3, cnt[4];\nint n, root, size, tot = 0;\nint son[MAXN], f[MAXN], head[MAXN];\nint dep[MAXN]; bool vis[MAXN];\nstruct node{\n    int u, w, nxt;\n}; vector<node> E;\nvoid add(int u, int v, int w) {\n    E.push_back(node{v, w, head[u]});\n    head[u] = tot++;\n}\nvoid get_rt(int x, int fa = 0) {\n    son[x] = 1; f[x] = 0;\n    for(int j = head[x]; ~j; j = E[j].nxt) {\n        int u = E[j].u, w = E[j].w;\n        if(vis[u] || u == fa)   continue;\n        get_rt(u, x);\n        son[x] += son[u];\n        f[x] = max(f[x], son[u]);\n    }\n    f[x] = max(f[x], size - son[x]);\n    if(f[x] < f[root]) root = x;\n}\nvector<int> v;\nvoid get_dep(int x, int fa) {\n    v.push_back(dep[x]); cnt[dep[x]%3]++;\n    for(int j = head[x]; ~j; j = E[j].nxt) {\n        int u = E[j].u, w = E[j].w;\n        if(vis[u] || u == fa)   continue;\n        dep[u] = dep[x] + w;\n        get_dep(u, x);\n    }\n}\nvoid calc(int x, int op) {\n    memset(cnt, 0, sizeof cnt); v.clear();\n    get_dep(x, 0);\n    ll res0, res1, res2;\n    res0 = res1 = res2 = 0;\n    for(int p: v) {\n        int offset = p%3;\n        if(offset == 0) {\n            res0 += op * (cnt[0] - 1) * p;\n            res1 += op * cnt[1] * p;\n            res2 += op * cnt[2] * p;\n        } else if(offset == 1) {\n            res0 += op * cnt[2] * p;\n            res1 += op * cnt[0] * p;\n            res2 += op * (cnt[1] - 1) * p;\n        } else {\n            res0 += op * cnt[1] * p;\n            res1 += op * (cnt[2] - 1) * p;\n            res2 += op * cnt[0] * p;\n        }\n        res0 %= MOD; res1 %= MOD; res2 %= MOD;\n    }\n    ans1 += res0; ans2 += res1; ans3 += res2;\n    ans1 %= MOD; ans2 %= MOD; ans3 %= MOD;\n}\nvoid solve(int x) {\n    dep[x] = 0; calc(x, 1); vis[x] = 1;\n    for(int j = head[x]; ~j; j = E[j].nxt) {\n        int u = E[j].u, w = E[j].w;\n        if(vis[u])  continue;\n        dep[u] = w; calc(u, -1);\n        root = 0; size = son[u];\n        get_rt(u);\n        solve(root);\n    }\n}\nint main(int argc, char const *argv[])\n{\n    while(~scanf(\"%d\", &n)) {\n        memset(head, -1, sizeof head);\n        memset(vis, 0, sizeof vis);\n        E.clear(); tot = 0;\n        int u, v, w;\n        rep(i, 1, n-1) {\n            scanf(\"%d %d %d\", &u, &v, &w);\n            u++; v++;\n            add(u, v, w); add(v, u, w);\n        }\n        root = 0; f[0] = size = n;\n        get_rt(1, 0);\n        ans1 = ans2 = ans3 = 0;\n        solve(root);\n        ans1 = ans1 * 2 % MOD;\n        ans2 = ans2 * 2 % MOD;\n        ans3 = ans3 * 2 % MOD;\n        ans1 = (ans1 + MOD) % MOD;\n        ans2 = (ans2 + MOD) % MOD;\n        ans3 = (ans3 + MOD) % MOD;\n        printf(\"%lld %lld %lld\\n\", ans1, ans2, ans3);\n    }\n    return 0;\n}\n~~~\n\n","slug":"2019-ICPC-Shenyang-contest-online","published":1,"updated":"2021-03-28T08:40:24.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hybm000269kj39u8dmsk","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://nanti.jisuanke.com/t/41403\">Fish eating fruit</a></p>\n<p>点分治进阶题目，状态很多，统计起来有点复杂。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先肯定是点分治没得跑了，然后就是怎么计算的问题了。</p>\n<p>我是先统计出来所有的 $mod $ 后的值，对于每一个节点的深度，可以计算出来这个点对 三个剩余 的贡献。</p>\n<p>转移一下就好了。</p>\n<p>因为去重的时候做了减法，所有答案可能是负值，要调整回来。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> size sizeeeeeeee</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll ans1, ans2, ans3, cnt[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, root, size, tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> son[MAXN], f[MAXN], head[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dep[MAXN]; <span class=\"keyword\">bool</span> vis[MAXN];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, w, nxt;</span><br><span class=\"line\">&#125;; vector&lt;node&gt; E;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    E.<span class=\"built_in\">push_back</span>(node&#123;v, w, head[u]&#125;);</span><br><span class=\"line\">    head[u] = tot++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get_rt</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    son[x] = <span class=\"number\">1</span>; f[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = head[x]; ~j; j = E[j].nxt) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = E[j].u, w = E[j].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u] || u == fa)   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">get_rt</span>(u, x);</span><br><span class=\"line\">        son[x] += son[u];</span><br><span class=\"line\">        f[x] = <span class=\"built_in\">max</span>(f[x], son[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[x] = <span class=\"built_in\">max</span>(f[x], size - son[x]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[x] &lt; f[root]) root = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get_dep</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    v.<span class=\"built_in\">push_back</span>(dep[x]); cnt[dep[x]%<span class=\"number\">3</span>]++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = head[x]; ~j; j = E[j].nxt) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = E[j].u, w = E[j].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u] || u == fa)   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dep[u] = dep[x] + w;</span><br><span class=\"line\">        <span class=\"built_in\">get_dep</span>(u, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> op)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> cnt); v.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">get_dep</span>(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">    ll res0, res1, res2;</span><br><span class=\"line\">    res0 = res1 = res2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p: v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> offset = p%<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(offset == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res0 += op * (cnt[<span class=\"number\">0</span>] - <span class=\"number\">1</span>) * p;</span><br><span class=\"line\">            res1 += op * cnt[<span class=\"number\">1</span>] * p;</span><br><span class=\"line\">            res2 += op * cnt[<span class=\"number\">2</span>] * p;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(offset == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            res0 += op * cnt[<span class=\"number\">2</span>] * p;</span><br><span class=\"line\">            res1 += op * cnt[<span class=\"number\">0</span>] * p;</span><br><span class=\"line\">            res2 += op * (cnt[<span class=\"number\">1</span>] - <span class=\"number\">1</span>) * p;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res0 += op * cnt[<span class=\"number\">1</span>] * p;</span><br><span class=\"line\">            res1 += op * (cnt[<span class=\"number\">2</span>] - <span class=\"number\">1</span>) * p;</span><br><span class=\"line\">            res2 += op * cnt[<span class=\"number\">0</span>] * p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res0 %= MOD; res1 %= MOD; res2 %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans1 += res0; ans2 += res1; ans3 += res2;</span><br><span class=\"line\">    ans1 %= MOD; ans2 %= MOD; ans3 %= MOD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    dep[x] = <span class=\"number\">0</span>; <span class=\"built_in\">calc</span>(x, <span class=\"number\">1</span>); vis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = head[x]; ~j; j = E[j].nxt) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = E[j].u, w = E[j].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u])  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dep[u] = w; <span class=\"built_in\">calc</span>(u, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        root = <span class=\"number\">0</span>; size = son[u];</span><br><span class=\"line\">        <span class=\"built_in\">get_rt</span>(u);</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> head);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</span><br><span class=\"line\">        E.<span class=\"built_in\">clear</span>(); tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">            u++; v++;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(u, v, w); <span class=\"built_in\">add</span>(v, u, w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root = <span class=\"number\">0</span>; f[<span class=\"number\">0</span>] = size = n;</span><br><span class=\"line\">        <span class=\"built_in\">get_rt</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        ans1 = ans2 = ans3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(root);</span><br><span class=\"line\">        ans1 = ans1 * <span class=\"number\">2</span> % MOD;</span><br><span class=\"line\">        ans2 = ans2 * <span class=\"number\">2</span> % MOD;</span><br><span class=\"line\">        ans3 = ans3 * <span class=\"number\">2</span> % MOD;</span><br><span class=\"line\">        ans1 = (ans1 + MOD) % MOD;</span><br><span class=\"line\">        ans2 = (ans2 + MOD) % MOD;</span><br><span class=\"line\">        ans3 = (ans3 + MOD) % MOD;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld %lld %lld\\n&quot;</span>, ans1, ans2, ans3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://nanti.jisuanke.com/t/41403\">Fish eating fruit</a></p>\n<p>点分治进阶题目，状态很多，统计起来有点复杂。</p>","more":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先肯定是点分治没得跑了，然后就是怎么计算的问题了。</p>\n<p>我是先统计出来所有的 $mod $ 后的值，对于每一个节点的深度，可以计算出来这个点对 三个剩余 的贡献。</p>\n<p>转移一下就好了。</p>\n<p>因为去重的时候做了减法，所有答案可能是负值，要调整回来。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> size sizeeeeeeee</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll ans1, ans2, ans3, cnt[<span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, root, size, tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> son[MAXN], f[MAXN], head[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dep[MAXN]; <span class=\"keyword\">bool</span> vis[MAXN];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, w, nxt;</span><br><span class=\"line\">&#125;; vector&lt;node&gt; E;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v, <span class=\"keyword\">int</span> w)</span> </span>&#123;</span><br><span class=\"line\">    E.<span class=\"built_in\">push_back</span>(node&#123;v, w, head[u]&#125;);</span><br><span class=\"line\">    head[u] = tot++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get_rt</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">    son[x] = <span class=\"number\">1</span>; f[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = head[x]; ~j; j = E[j].nxt) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = E[j].u, w = E[j].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u] || u == fa)   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">get_rt</span>(u, x);</span><br><span class=\"line\">        son[x] += son[u];</span><br><span class=\"line\">        f[x] = <span class=\"built_in\">max</span>(f[x], son[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[x] = <span class=\"built_in\">max</span>(f[x], size - son[x]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[x] &lt; f[root]) root = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get_dep</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    v.<span class=\"built_in\">push_back</span>(dep[x]); cnt[dep[x]%<span class=\"number\">3</span>]++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = head[x]; ~j; j = E[j].nxt) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = E[j].u, w = E[j].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u] || u == fa)   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dep[u] = dep[x] + w;</span><br><span class=\"line\">        <span class=\"built_in\">get_dep</span>(u, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> op)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cnt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> cnt); v.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">get_dep</span>(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">    ll res0, res1, res2;</span><br><span class=\"line\">    res0 = res1 = res2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p: v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> offset = p%<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(offset == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            res0 += op * (cnt[<span class=\"number\">0</span>] - <span class=\"number\">1</span>) * p;</span><br><span class=\"line\">            res1 += op * cnt[<span class=\"number\">1</span>] * p;</span><br><span class=\"line\">            res2 += op * cnt[<span class=\"number\">2</span>] * p;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(offset == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            res0 += op * cnt[<span class=\"number\">2</span>] * p;</span><br><span class=\"line\">            res1 += op * cnt[<span class=\"number\">0</span>] * p;</span><br><span class=\"line\">            res2 += op * (cnt[<span class=\"number\">1</span>] - <span class=\"number\">1</span>) * p;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res0 += op * cnt[<span class=\"number\">1</span>] * p;</span><br><span class=\"line\">            res1 += op * (cnt[<span class=\"number\">2</span>] - <span class=\"number\">1</span>) * p;</span><br><span class=\"line\">            res2 += op * cnt[<span class=\"number\">0</span>] * p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res0 %= MOD; res1 %= MOD; res2 %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans1 += res0; ans2 += res1; ans3 += res2;</span><br><span class=\"line\">    ans1 %= MOD; ans2 %= MOD; ans3 %= MOD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    dep[x] = <span class=\"number\">0</span>; <span class=\"built_in\">calc</span>(x, <span class=\"number\">1</span>); vis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = head[x]; ~j; j = E[j].nxt) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = E[j].u, w = E[j].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u])  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dep[u] = w; <span class=\"built_in\">calc</span>(u, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        root = <span class=\"number\">0</span>; size = son[u];</span><br><span class=\"line\">        <span class=\"built_in\">get_rt</span>(u);</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"keyword\">sizeof</span> head);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span> vis);</span><br><span class=\"line\">        E.<span class=\"built_in\">clear</span>(); tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">            u++; v++;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(u, v, w); <span class=\"built_in\">add</span>(v, u, w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root = <span class=\"number\">0</span>; f[<span class=\"number\">0</span>] = size = n;</span><br><span class=\"line\">        <span class=\"built_in\">get_rt</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        ans1 = ans2 = ans3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(root);</span><br><span class=\"line\">        ans1 = ans1 * <span class=\"number\">2</span> % MOD;</span><br><span class=\"line\">        ans2 = ans2 * <span class=\"number\">2</span> % MOD;</span><br><span class=\"line\">        ans3 = ans3 * <span class=\"number\">2</span> % MOD;</span><br><span class=\"line\">        ans1 = (ans1 + MOD) % MOD;</span><br><span class=\"line\">        ans2 = (ans2 + MOD) % MOD;</span><br><span class=\"line\">        ans3 = (ans3 + MOD) % MOD;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld %lld %lld\\n&quot;</span>, ans1, ans2, ans3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"2019-icpc-徐州网赛","thumbnail":"/gallery/thumbnails/hei.jpg","date":"2019-09-09T02:43:00.000Z","_content":"\n# 题目\n\n[2019-icpc-徐州网赛](https://www.jisuanke.com/contest/3005)\n\n手速场，都是一些很经典的题目。\n\n重新思考了一下二维偏序究竟是什么。\n\n<!---more-->\n\n## A. Who is better?\n\n生硬的套了两个知识点，扩展中国剩余定理和Fibonacci博弈。\n\n套个板子就完事了。\n\n~~~c++\ndef egcd(a, b):\n    \"\"\"扩展欧几里得\"\"\"\n    if 0 == b:\n        return 1, 0, a\n    x, y, q = egcd(b, a % b)\n    x, y = y, (x - a // b * y)\n    return x, y, q\n \nn = int(input())\nflag = False\n \na1, r1 = map(int, input().split())\n \nfor _ in range(n-1):\n    a2, r2 = map(int, input().split())\n    R = r2-r1\n    x, y, d = egcd(a1, a2)\n    tmp = a2//d\n    if R%d != 0:\n        flag = True\n    r1=((x*R//d)%tmp+tmp)%tmp*a1+r1\n    a1=a1*(a2//d)\n \nlcm = a1\nans = (r1%lcm+lcm)%lcm\n\nif flag:\n    print(\"Tankernb!\")\n    exit(0)\n\nfac = [1, 2]\ncur = 2\nwhile True:\n    tmp = fac[cur-1] + fac[cur-2]\n    if tmp > ans:\n        break\n    fac.append(tmp)\n    cur += 1\n\nflag = False\nfor v in fac:\n    if v == ans:\n        flag = True\n        break\n\nif flag:\n    print(\"Lbnb!\")\nelse:\n    print(\"Zgxnb!\")\n~~~\n\n## E. XKC's basketball team\n\n一个比较有趣的题目。\n\n考虑从后往前维护一个单调递增的队列，之所以这样维护是因为：\n\n当 $i < j$ 且 $a[i] < a[j]$ 时 $a[i]$ 是没有任何用处的，因为它又小又靠前，在它前面的那些值如果比 $a[i]$ 小那么肯定也比 $a[j]$ 小，而且 $i < j$ 所以肯定会选择 $j$ 而不是 $i$ 。\n\n然后我们二分单调队列就能得到最先进入队列的满足的那个值的位置，最先进入队列的当然是原序列中最靠后的满足要求的值。\n\n时间复杂度：$O(n \\cdot \\log n)$\n\n~~~c++\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 5e5 + 7;\n\nint a[MAXN], ans[MAXN];\nint main(int argc, char const *argv[])\n{\n\tint n, m;\n\tscanf(\"%d %d\", &n, &m);\n\trep(i, 1, n)\tscanf(\"%d\", &a[i]);\n\tvector<int> v, vp;\n\tv.push_back(a[n]); vp.push_back(n);\n\tans[n] = -1;\n\tper(i, n-1, 1){\n\t\tauto it = lower_bound(v.begin(), v.end(), a[i]+m);\n\t\tif(it == v.end()){\n\t\t\tans[i] = -1;\n\t\t} else {\n\t\t\tint pos = it - v.begin();\n\t\t\tpos = vp[pos];\n\t\t\tans[i] = pos - i - 1;\n\t\t}\n\t\tif(a[i] > v.back()){\n\t\t\tv.push_back(a[i]);\n\t\t\tvp.push_back(i);\n\t\t}\n\t}\n\trep(i, 1, n)\tprintf(\"%d%c\", ans[i], i == n?'\\n':' ');\n\treturn 0;\n}\n~~~\n\n\n\n## I. query\n\n又是一道二维偏序的问题。\n\n偏序关系是全序关系的子集。\n\n全序关系是指对于一个集合，其中的所有对 $<i, j>$ 都会有这种关系，也就是两两可以比较，比如整数域上的大小关系。\n\n偏序关系是指对于一个集合，其中存在一些（注意：不是所有）对 $<i, j>$ 有这种关系，也就是不需要两两可以比较，比如整数域上的整除关系。\n\n偏序关系有严格偏序和非严格偏序两种，各有自己的三条基本性质。\n\n回到这个问题，$min(p_i, p_j) = \\gcd (p_i, p_j)$ 相当于 $p_i, p_j$存在整除关系。显然 $n$ 个数的全排列中满足整除关系的对数小于 $n\\cdot \\log n$对。\n\n我们先将所有的满足条件的对数直接暴力筛出来，然后就抽象成了这样一个问题：\n\n给出一些点，查询在区间 $[l, r]$ 内点的数量。\n\n这就是一个经典的二位偏序问题了，直接对一维排序，二维用树状数组维护一下就好了。\n\n时间复杂度：$O(n\\cdot \\log n)$  \n\n~~~c++\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x)\tcerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 2e5 + 7;\n\nint a[MAXN], id[MAXN];\nstruct node{\n\tint l, r, val, id;\n\tfriend bool operator <(const node &a, const node &b){\n\t\tif(a.r == b.r)\treturn a.l < b.l;\n\t\treturn a.r < b.r;\n\t}\n}s[MAXN];\nstruct BIT{\n\tint e[MAXN], n;\n\tint lowbit(int x){return x&-x;}\n\tvoid add(int x, int v){\n\t\twhile(x <= n){\n\t\t\te[x] += v;\n\t\t\tx += lowbit(x);\n\t\t}\n\t}\n\tint get(int x){\n\t\tint res = 0;\n\t\twhile(x){\n\t\t\tres += e[x];\n\t\t\tx -= lowbit(x);\n\t\t}\n\t\treturn res;\n\t}\n}bit;\n\nvector<int> v[MAXN];\nint main(int argc, char const *argv[])\n{\n\tint n, m;\n\tscanf(\"%d %d\", &n, &m);\n\trep(i, 1, n){\n\t\tscanf(\"%d\", &a[i]);\n\t\tid[a[i]] = i;\n\t}\n\trep(i, 1, n){\n\t\tfor(int j = 2*a[i]; j <= n; j += a[i]){\n\t\t\tif(id[j] < i)\tv[i].push_back(id[j]);\n\t\t\telse v[id[j]].push_back(i);\n\t\t}\n\t}\n\trep(i, 1, m){\n\t\tscanf(\"%d %d\", &s[i].l, &s[i].r);\n\t\ts[i].id = i;\n\t}\n\tsort(s + 1, s + 1 + m);\n\n\tbit.n = n;\n\tint cur = 1;\n\trep(i, 1, n){\n\t\trep(j, 0, (int)v[i].size()-1){\n\t\t\tbit.add(v[i][j], 1);\n\t\t}\n\t\twhile(cur <= m && s[cur].r == i){\n\t\t\ts[cur].val = bit.get(i) - bit.get(s[cur].l-1);\n\t\t\tcur++;\n\t\t}\n\t}\n\tsort(s + 1, s + 1 + m, [](const node &a, const node &b){return a.id < b.id;});\n\n\trep(i, 1, m)\tprintf(\"%d\\n\", s[i].val);\n\treturn 0;\n}\n~~~\n\n### J. Random Access Iterator\n\n感觉这个题目属于很简单的树上递推的题目。\n\n题目的意思就是从树的根结点出发，每次在节点的儿子中随机选择一个，递归，重复子节点个数次。\n\n我们先一次 $DFS$ 更新出来子树的高度和节点的子节点树，$h[x]$ 和 $son[x]$。\n\n首先当一个子节点子树的高度加一小于当前节点的高度的时候这个子节点是没用的，因为它更新不到最大值。\n\n而如果可以的话就加上这个子树的递归求出最大值的概率。叶子节点概率为一。\n\n形式化来说就是：\n\n~~~c++\nfunction DFS(x)\n    k <- the number of sons of x\n    if  k is 0 do\n        return 1\n    p <- 0\n    for son of x do\n        if h[x] equal to h[son] + 1 do \n          p += DFS(son)\n    p <- p divided by k\n    res <- 1 - pow(1-p, k)\n    return res\n~~~\n\n后半段的处理是基于这样一个原因：\n\n假设节点取到最大值的概率为p，那么对于一个节点 $x$ 有：\n\n$$p[x] = 1 - (1 - \\frac{\\sum_{son \\in sons[x]}p[son]}{|sons[x]|})^{|sons[x]|} $$\n\n就是这样一个公式。\n\n~~~c++\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(ll i = (a); i <= (b); ++i)\n#define per(i, a, b) for(ll i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst ll MAXN = 1e6 + 7;\nconst ll mod = 1e9 + 7;\nll qpow(ll a, ll b){\n    ll res = 1;\n    while(b){\n        if(b&1) res = 1ll * res * a % mod;\n        a = 1ll * a * a % mod;\n        b >>= 1;\n    }\n    res = res%mod + mod;\n    return res%mod;\n}\n\nll inv(ll x){return qpow(x, mod-2);}\nvector<ll> G[MAXN];\n\nll cor[MAXN], son[MAXN];\n\nvoid dfs(ll x, ll fa = 0){\n    ll res = 0;\n    for(ll p: G[x]){\n        if(p == fa) continue;\n        dfs(p, x);\n        res = max(res, cor[p]);\n        son[x]++;\n    }\n    cor[x] = res + 1;\n}\nll dfs2(ll x, ll fa = 0){\n    if(son[x] == 0) return 1;\n    ll p = 0;\n    for(ll pp: G[x]){\n        if(pp == fa)    continue;\n        if(cor[x] == cor[pp] + 1){\n            p += dfs2(pp, x);\n        }\n    }\n    p = p * inv(son[x]) % mod;\n    return (1 - qpow(1-p+mod, son[x]) + mod) % mod;\n}\nint main() {\n    ll n;\n    scanf(\"%lld\", &n);\n    ll u, v;\n    rep(i, 1, n-1){\n        scanf(\"%lld %lld\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    dfs(1);\n    printf(\"%lld\\n\", dfs2(1));\n    return 0;\n}\n~~~\n\n","source":"_posts/2019-ICPC-xuzhou-online-contest.md","raw":"---\ntitle: 2019-icpc-徐州网赛\nthumbnail: /gallery/thumbnails/hei.jpg\ndate: 2019-09-09 10:43:00\ntags: \n\t- 中国剩余定理\n\t- 二维偏序\n\t- 单调队列\n\t- 树形动规\ncategories: \n\t- [竞赛, ICPC]\n---\n\n# 题目\n\n[2019-icpc-徐州网赛](https://www.jisuanke.com/contest/3005)\n\n手速场，都是一些很经典的题目。\n\n重新思考了一下二维偏序究竟是什么。\n\n<!---more-->\n\n## A. Who is better?\n\n生硬的套了两个知识点，扩展中国剩余定理和Fibonacci博弈。\n\n套个板子就完事了。\n\n~~~c++\ndef egcd(a, b):\n    \"\"\"扩展欧几里得\"\"\"\n    if 0 == b:\n        return 1, 0, a\n    x, y, q = egcd(b, a % b)\n    x, y = y, (x - a // b * y)\n    return x, y, q\n \nn = int(input())\nflag = False\n \na1, r1 = map(int, input().split())\n \nfor _ in range(n-1):\n    a2, r2 = map(int, input().split())\n    R = r2-r1\n    x, y, d = egcd(a1, a2)\n    tmp = a2//d\n    if R%d != 0:\n        flag = True\n    r1=((x*R//d)%tmp+tmp)%tmp*a1+r1\n    a1=a1*(a2//d)\n \nlcm = a1\nans = (r1%lcm+lcm)%lcm\n\nif flag:\n    print(\"Tankernb!\")\n    exit(0)\n\nfac = [1, 2]\ncur = 2\nwhile True:\n    tmp = fac[cur-1] + fac[cur-2]\n    if tmp > ans:\n        break\n    fac.append(tmp)\n    cur += 1\n\nflag = False\nfor v in fac:\n    if v == ans:\n        flag = True\n        break\n\nif flag:\n    print(\"Lbnb!\")\nelse:\n    print(\"Zgxnb!\")\n~~~\n\n## E. XKC's basketball team\n\n一个比较有趣的题目。\n\n考虑从后往前维护一个单调递增的队列，之所以这样维护是因为：\n\n当 $i < j$ 且 $a[i] < a[j]$ 时 $a[i]$ 是没有任何用处的，因为它又小又靠前，在它前面的那些值如果比 $a[i]$ 小那么肯定也比 $a[j]$ 小，而且 $i < j$ 所以肯定会选择 $j$ 而不是 $i$ 。\n\n然后我们二分单调队列就能得到最先进入队列的满足的那个值的位置，最先进入队列的当然是原序列中最靠后的满足要求的值。\n\n时间复杂度：$O(n \\cdot \\log n)$\n\n~~~c++\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 5e5 + 7;\n\nint a[MAXN], ans[MAXN];\nint main(int argc, char const *argv[])\n{\n\tint n, m;\n\tscanf(\"%d %d\", &n, &m);\n\trep(i, 1, n)\tscanf(\"%d\", &a[i]);\n\tvector<int> v, vp;\n\tv.push_back(a[n]); vp.push_back(n);\n\tans[n] = -1;\n\tper(i, n-1, 1){\n\t\tauto it = lower_bound(v.begin(), v.end(), a[i]+m);\n\t\tif(it == v.end()){\n\t\t\tans[i] = -1;\n\t\t} else {\n\t\t\tint pos = it - v.begin();\n\t\t\tpos = vp[pos];\n\t\t\tans[i] = pos - i - 1;\n\t\t}\n\t\tif(a[i] > v.back()){\n\t\t\tv.push_back(a[i]);\n\t\t\tvp.push_back(i);\n\t\t}\n\t}\n\trep(i, 1, n)\tprintf(\"%d%c\", ans[i], i == n?'\\n':' ');\n\treturn 0;\n}\n~~~\n\n\n\n## I. query\n\n又是一道二维偏序的问题。\n\n偏序关系是全序关系的子集。\n\n全序关系是指对于一个集合，其中的所有对 $<i, j>$ 都会有这种关系，也就是两两可以比较，比如整数域上的大小关系。\n\n偏序关系是指对于一个集合，其中存在一些（注意：不是所有）对 $<i, j>$ 有这种关系，也就是不需要两两可以比较，比如整数域上的整除关系。\n\n偏序关系有严格偏序和非严格偏序两种，各有自己的三条基本性质。\n\n回到这个问题，$min(p_i, p_j) = \\gcd (p_i, p_j)$ 相当于 $p_i, p_j$存在整除关系。显然 $n$ 个数的全排列中满足整除关系的对数小于 $n\\cdot \\log n$对。\n\n我们先将所有的满足条件的对数直接暴力筛出来，然后就抽象成了这样一个问题：\n\n给出一些点，查询在区间 $[l, r]$ 内点的数量。\n\n这就是一个经典的二位偏序问题了，直接对一维排序，二维用树状数组维护一下就好了。\n\n时间复杂度：$O(n\\cdot \\log n)$  \n\n~~~c++\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x)\tcerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 2e5 + 7;\n\nint a[MAXN], id[MAXN];\nstruct node{\n\tint l, r, val, id;\n\tfriend bool operator <(const node &a, const node &b){\n\t\tif(a.r == b.r)\treturn a.l < b.l;\n\t\treturn a.r < b.r;\n\t}\n}s[MAXN];\nstruct BIT{\n\tint e[MAXN], n;\n\tint lowbit(int x){return x&-x;}\n\tvoid add(int x, int v){\n\t\twhile(x <= n){\n\t\t\te[x] += v;\n\t\t\tx += lowbit(x);\n\t\t}\n\t}\n\tint get(int x){\n\t\tint res = 0;\n\t\twhile(x){\n\t\t\tres += e[x];\n\t\t\tx -= lowbit(x);\n\t\t}\n\t\treturn res;\n\t}\n}bit;\n\nvector<int> v[MAXN];\nint main(int argc, char const *argv[])\n{\n\tint n, m;\n\tscanf(\"%d %d\", &n, &m);\n\trep(i, 1, n){\n\t\tscanf(\"%d\", &a[i]);\n\t\tid[a[i]] = i;\n\t}\n\trep(i, 1, n){\n\t\tfor(int j = 2*a[i]; j <= n; j += a[i]){\n\t\t\tif(id[j] < i)\tv[i].push_back(id[j]);\n\t\t\telse v[id[j]].push_back(i);\n\t\t}\n\t}\n\trep(i, 1, m){\n\t\tscanf(\"%d %d\", &s[i].l, &s[i].r);\n\t\ts[i].id = i;\n\t}\n\tsort(s + 1, s + 1 + m);\n\n\tbit.n = n;\n\tint cur = 1;\n\trep(i, 1, n){\n\t\trep(j, 0, (int)v[i].size()-1){\n\t\t\tbit.add(v[i][j], 1);\n\t\t}\n\t\twhile(cur <= m && s[cur].r == i){\n\t\t\ts[cur].val = bit.get(i) - bit.get(s[cur].l-1);\n\t\t\tcur++;\n\t\t}\n\t}\n\tsort(s + 1, s + 1 + m, [](const node &a, const node &b){return a.id < b.id;});\n\n\trep(i, 1, m)\tprintf(\"%d\\n\", s[i].val);\n\treturn 0;\n}\n~~~\n\n### J. Random Access Iterator\n\n感觉这个题目属于很简单的树上递推的题目。\n\n题目的意思就是从树的根结点出发，每次在节点的儿子中随机选择一个，递归，重复子节点个数次。\n\n我们先一次 $DFS$ 更新出来子树的高度和节点的子节点树，$h[x]$ 和 $son[x]$。\n\n首先当一个子节点子树的高度加一小于当前节点的高度的时候这个子节点是没用的，因为它更新不到最大值。\n\n而如果可以的话就加上这个子树的递归求出最大值的概率。叶子节点概率为一。\n\n形式化来说就是：\n\n~~~c++\nfunction DFS(x)\n    k <- the number of sons of x\n    if  k is 0 do\n        return 1\n    p <- 0\n    for son of x do\n        if h[x] equal to h[son] + 1 do \n          p += DFS(son)\n    p <- p divided by k\n    res <- 1 - pow(1-p, k)\n    return res\n~~~\n\n后半段的处理是基于这样一个原因：\n\n假设节点取到最大值的概率为p，那么对于一个节点 $x$ 有：\n\n$$p[x] = 1 - (1 - \\frac{\\sum_{son \\in sons[x]}p[son]}{|sons[x]|})^{|sons[x]|} $$\n\n就是这样一个公式。\n\n~~~c++\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(ll i = (a); i <= (b); ++i)\n#define per(i, a, b) for(ll i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst ll MAXN = 1e6 + 7;\nconst ll mod = 1e9 + 7;\nll qpow(ll a, ll b){\n    ll res = 1;\n    while(b){\n        if(b&1) res = 1ll * res * a % mod;\n        a = 1ll * a * a % mod;\n        b >>= 1;\n    }\n    res = res%mod + mod;\n    return res%mod;\n}\n\nll inv(ll x){return qpow(x, mod-2);}\nvector<ll> G[MAXN];\n\nll cor[MAXN], son[MAXN];\n\nvoid dfs(ll x, ll fa = 0){\n    ll res = 0;\n    for(ll p: G[x]){\n        if(p == fa) continue;\n        dfs(p, x);\n        res = max(res, cor[p]);\n        son[x]++;\n    }\n    cor[x] = res + 1;\n}\nll dfs2(ll x, ll fa = 0){\n    if(son[x] == 0) return 1;\n    ll p = 0;\n    for(ll pp: G[x]){\n        if(pp == fa)    continue;\n        if(cor[x] == cor[pp] + 1){\n            p += dfs2(pp, x);\n        }\n    }\n    p = p * inv(son[x]) % mod;\n    return (1 - qpow(1-p+mod, son[x]) + mod) % mod;\n}\nint main() {\n    ll n;\n    scanf(\"%lld\", &n);\n    ll u, v;\n    rep(i, 1, n-1){\n        scanf(\"%lld %lld\", &u, &v);\n        G[u].push_back(v);\n        G[v].push_back(u);\n    }\n    dfs(1);\n    printf(\"%lld\\n\", dfs2(1));\n    return 0;\n}\n~~~\n\n","slug":"2019-ICPC-xuzhou-online-contest","published":1,"updated":"2021-03-28T08:41:22.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hybq000469kjbymg0xt3","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.jisuanke.com/contest/3005\">2019-icpc-徐州网赛</a></p>\n<p>手速场，都是一些很经典的题目。</p>\n<p>重新思考了一下二维偏序究竟是什么。</p>\n<!---more-->\n\n<h2 id=\"A-Who-is-better\"><a href=\"#A-Who-is-better\" class=\"headerlink\" title=\"A. Who is better?\"></a>A. Who is better?</h2><p>生硬的套了两个知识点，扩展中国剩余定理和Fibonacci博弈。</p>\n<p>套个板子就完事了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">def <span class=\"title\">egcd</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot;扩展欧几里得&quot;</span><span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"function\">    if <span class=\"number\">0</span> =</span>= b:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>, <span class=\"number\">0</span>, a</span><br><span class=\"line\">    x, y, q = <span class=\"built_in\">egcd</span>(b, a % b)</span><br><span class=\"line\">    x, y = y, (x - a <span class=\"comment\">// b * y)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x, y, q</span><br><span class=\"line\"> </span><br><span class=\"line\">n = <span class=\"built_in\"><span class=\"keyword\">int</span></span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">flag = False</span><br><span class=\"line\"> </span><br><span class=\"line\">a1, r1 = <span class=\"built_in\">map</span>(<span class=\"keyword\">int</span>, <span class=\"built_in\">input</span>().<span class=\"built_in\">split</span>())</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> _ in <span class=\"built_in\">range</span>(n<span class=\"number\">-1</span>):</span><br><span class=\"line\">    a2, r2 = <span class=\"built_in\">map</span>(<span class=\"keyword\">int</span>, <span class=\"built_in\">input</span>().<span class=\"built_in\">split</span>())</span><br><span class=\"line\">    R = r2-r1</span><br><span class=\"line\">    x, y, d = <span class=\"built_in\">egcd</span>(a1, a2)</span><br><span class=\"line\">    tmp = a2<span class=\"comment\">//d</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> R%d != <span class=\"number\">0</span>:</span><br><span class=\"line\">        flag = True</span><br><span class=\"line\">    r1=((x*R<span class=\"comment\">//d)%tmp+tmp)%tmp*a1+r1</span></span><br><span class=\"line\">    a1=a1*(a2<span class=\"comment\">//d)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">lcm = a1</span><br><span class=\"line\">ans = (r1%lcm+lcm)%lcm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Tankernb!&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fac = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">cur = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> True:</span><br><span class=\"line\">    tmp = fac[cur<span class=\"number\">-1</span>] + fac[cur<span class=\"number\">-2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp &gt; ans:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    fac.<span class=\"built_in\">append</span>(tmp)</span><br><span class=\"line\">    cur += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">flag = False</span><br><span class=\"line\"><span class=\"keyword\">for</span> v in fac:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> v == ans:</span><br><span class=\"line\">        flag = True</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Lbnb!&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Zgxnb!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"E-XKC’s-basketball-team\"><a href=\"#E-XKC’s-basketball-team\" class=\"headerlink\" title=\"E. XKC’s basketball team\"></a>E. XKC’s basketball team</h2><p>一个比较有趣的题目。</p>\n<p>考虑从后往前维护一个单调递增的队列，之所以这样维护是因为：</p>\n<p>当 $i &lt; j$ 且 $a[i] &lt; a[j]$ 时 $a[i]$ 是没有任何用处的，因为它又小又靠前，在它前面的那些值如果比 $a[i]$ 小那么肯定也比 $a[j]$ 小，而且 $i &lt; j$ 所以肯定会选择 $j$ 而不是 $i$ 。</p>\n<p>然后我们二分单调队列就能得到最先进入队列的满足的那个值的位置，最先进入队列的当然是原序列中最靠后的满足要求的值。</p>\n<p>时间复杂度：$O(n \\cdot \\log n)$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">5e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[MAXN], ans[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\tvector&lt;<span class=\"keyword\">int</span>&gt; v, vp;</span><br><span class=\"line\">\tv.<span class=\"built_in\">push_back</span>(a[n]); vp.<span class=\"built_in\">push_back</span>(n);</span><br><span class=\"line\">\tans[n] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">per</span>(i, n<span class=\"number\">-1</span>, <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> it = <span class=\"built_in\">lower_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), a[i]+m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(it == v.<span class=\"built_in\">end</span>())&#123;</span><br><span class=\"line\">\t\t\tans[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> pos = it - v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t\t\tpos = vp[pos];</span><br><span class=\"line\">\t\t\tans[i] = pos - i - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &gt; v.<span class=\"built_in\">back</span>())&#123;</span><br><span class=\"line\">\t\t\tv.<span class=\"built_in\">push_back</span>(a[i]);</span><br><span class=\"line\">\t\t\tvp.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, ans[i], i == n?<span class=\"string\">&#x27;\\n&#x27;</span>:<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"I-query\"><a href=\"#I-query\" class=\"headerlink\" title=\"I. query\"></a>I. query</h2><p>又是一道二维偏序的问题。</p>\n<p>偏序关系是全序关系的子集。</p>\n<p>全序关系是指对于一个集合，其中的所有对 $&lt;i, j&gt;$ 都会有这种关系，也就是两两可以比较，比如整数域上的大小关系。</p>\n<p>偏序关系是指对于一个集合，其中存在一些（注意：不是所有）对 $&lt;i, j&gt;$ 有这种关系，也就是不需要两两可以比较，比如整数域上的整除关系。</p>\n<p>偏序关系有严格偏序和非严格偏序两种，各有自己的三条基本性质。</p>\n<p>回到这个问题，$min(p_i, p_j) = \\gcd (p_i, p_j)$ 相当于 $p_i, p_j$存在整除关系。显然 $n$ 个数的全排列中满足整除关系的对数小于 $n\\cdot \\log n$对。</p>\n<p>我们先将所有的满足条件的对数直接暴力筛出来，然后就抽象成了这样一个问题：</p>\n<p>给出一些点，查询在区间 $[l, r]$ 内点的数量。</p>\n<p>这就是一个经典的二位偏序问题了，直接对一维排序，二维用树状数组维护一下就好了。</p>\n<p>时间复杂度：$O(n\\cdot \\log n)$  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x)\tcerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[MAXN], id[MAXN];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l, r, val, id;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a.r == b.r)\t<span class=\"keyword\">return</span> a.l &lt; b.l;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.r &lt; b.r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;s[MAXN];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BIT</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> e[MAXN], n;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> x&amp;-x;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(x &lt;= n)&#123;</span><br><span class=\"line\">\t\t\te[x] += v;</span><br><span class=\"line\">\t\t\tx += <span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(x)&#123;</span><br><span class=\"line\">\t\t\tres += e[x];</span><br><span class=\"line\">\t\t\tx -= <span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;bit;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; v[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\tid[a[i]] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>*a[i]; j &lt;= n; j += a[i])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(id[j] &lt; i)\tv[i].<span class=\"built_in\">push_back</span>(id[j]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> v[id[j]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;s[i].l, &amp;s[i].r);</span><br><span class=\"line\">\t\ts[i].id = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>, s + <span class=\"number\">1</span> + m);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbit.n = n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cur = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, (<span class=\"keyword\">int</span>)v[i].<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\tbit.<span class=\"built_in\">add</span>(v[i][j], <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(cur &lt;= m &amp;&amp; s[cur].r == i)&#123;</span><br><span class=\"line\">\t\t\ts[cur].val = bit.<span class=\"built_in\">get</span>(i) - bit.<span class=\"built_in\">get</span>(s[cur].l<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\tcur++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>, s + <span class=\"number\">1</span> + m, [](<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;<span class=\"keyword\">return</span> a.id &lt; b.id;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m)\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, s[i].val);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"J-Random-Access-Iterator\"><a href=\"#J-Random-Access-Iterator\" class=\"headerlink\" title=\"J. Random Access Iterator\"></a>J. Random Access Iterator</h3><p>感觉这个题目属于很简单的树上递推的题目。</p>\n<p>题目的意思就是从树的根结点出发，每次在节点的儿子中随机选择一个，递归，重复子节点个数次。</p>\n<p>我们先一次 $DFS$ 更新出来子树的高度和节点的子节点树，$h[x]$ 和 $son[x]$。</p>\n<p>首先当一个子节点子树的高度加一小于当前节点的高度的时候这个子节点是没用的，因为它更新不到最大值。</p>\n<p>而如果可以的话就加上这个子树的递归求出最大值的概率。叶子节点概率为一。</p>\n<p>形式化来说就是：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">DFS</span><span class=\"params\">(x)</span></span></span><br><span class=\"line\">    k &lt;- the number of sons of x</span><br><span class=\"line\">    <span class=\"keyword\">if</span>  k is <span class=\"number\">0</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    p &lt;- <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> son of x <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> h[x] equal to h[son] + <span class=\"number\">1</span> <span class=\"keyword\">do</span> </span><br><span class=\"line\">          p += <span class=\"built_in\">DFS</span>(son)</span><br><span class=\"line\">    p &lt;- p divided by k</span><br><span class=\"line\">    res &lt;- <span class=\"number\">1</span> - <span class=\"built_in\">pow</span>(<span class=\"number\">1</span>-p, k)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n<p>后半段的处理是基于这样一个原因：</p>\n<p>假设节点取到最大值的概率为p，那么对于一个节点 $x$ 有：</p>\n<p>$$p[x] = 1 - (1 - \\frac{\\sum_{son \\in sons[x]}p[son]}{|sons[x]|})^{|sons[x]|} $$</p>\n<p>就是这样一个公式。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(ll i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(ll i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll MAXN = <span class=\"number\">1e6</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">qpow</span><span class=\"params\">(ll a, ll b)</span></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) res = <span class=\"number\">1ll</span> * res * a % mod;</span><br><span class=\"line\">        a = <span class=\"number\">1ll</span> * a * a % mod;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res = res%mod + mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">inv</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">qpow</span>(x, mod<span class=\"number\">-2</span>);&#125;</span><br><span class=\"line\">vector&lt;ll&gt; G[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\">ll cor[MAXN], son[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(ll x, ll fa = <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll p: G[x])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(p, x);</span><br><span class=\"line\">        res = <span class=\"built_in\">max</span>(res, cor[p]);</span><br><span class=\"line\">        son[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cor[x] = res + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs2</span><span class=\"params\">(ll x, ll fa = <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[x] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll pp: G[x])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pp == fa)    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cor[x] == cor[pp] + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            p += <span class=\"built_in\">dfs2</span>(pp, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p = p * <span class=\"built_in\">inv</span>(son[x]) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">1</span> - <span class=\"built_in\">qpow</span>(<span class=\"number\">1</span>-p+mod, son[x]) + mod) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ll n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;n);</span><br><span class=\"line\">    ll u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld %lld&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        G[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.jisuanke.com/contest/3005\">2019-icpc-徐州网赛</a></p>\n<p>手速场，都是一些很经典的题目。</p>\n<p>重新思考了一下二维偏序究竟是什么。</p>\n<!---more-->\n\n<h2 id=\"A-Who-is-better\"><a href=\"#A-Who-is-better\" class=\"headerlink\" title=\"A. Who is better?\"></a>A. Who is better?</h2><p>生硬的套了两个知识点，扩展中国剩余定理和Fibonacci博弈。</p>\n<p>套个板子就完事了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">def <span class=\"title\">egcd</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"string\">&quot;&quot;</span><span class=\"string\">&quot;扩展欧几里得&quot;</span><span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"function\">    if <span class=\"number\">0</span> =</span>= b:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>, <span class=\"number\">0</span>, a</span><br><span class=\"line\">    x, y, q = <span class=\"built_in\">egcd</span>(b, a % b)</span><br><span class=\"line\">    x, y = y, (x - a <span class=\"comment\">// b * y)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x, y, q</span><br><span class=\"line\"> </span><br><span class=\"line\">n = <span class=\"built_in\"><span class=\"keyword\">int</span></span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">flag = False</span><br><span class=\"line\"> </span><br><span class=\"line\">a1, r1 = <span class=\"built_in\">map</span>(<span class=\"keyword\">int</span>, <span class=\"built_in\">input</span>().<span class=\"built_in\">split</span>())</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> _ in <span class=\"built_in\">range</span>(n<span class=\"number\">-1</span>):</span><br><span class=\"line\">    a2, r2 = <span class=\"built_in\">map</span>(<span class=\"keyword\">int</span>, <span class=\"built_in\">input</span>().<span class=\"built_in\">split</span>())</span><br><span class=\"line\">    R = r2-r1</span><br><span class=\"line\">    x, y, d = <span class=\"built_in\">egcd</span>(a1, a2)</span><br><span class=\"line\">    tmp = a2<span class=\"comment\">//d</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> R%d != <span class=\"number\">0</span>:</span><br><span class=\"line\">        flag = True</span><br><span class=\"line\">    r1=((x*R<span class=\"comment\">//d)%tmp+tmp)%tmp*a1+r1</span></span><br><span class=\"line\">    a1=a1*(a2<span class=\"comment\">//d)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">lcm = a1</span><br><span class=\"line\">ans = (r1%lcm+lcm)%lcm</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Tankernb!&quot;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fac = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">cur = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> True:</span><br><span class=\"line\">    tmp = fac[cur<span class=\"number\">-1</span>] + fac[cur<span class=\"number\">-2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> tmp &gt; ans:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    fac.<span class=\"built_in\">append</span>(tmp)</span><br><span class=\"line\">    cur += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">flag = False</span><br><span class=\"line\"><span class=\"keyword\">for</span> v in fac:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> v == ans:</span><br><span class=\"line\">        flag = True</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Lbnb!&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Zgxnb!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"E-XKC’s-basketball-team\"><a href=\"#E-XKC’s-basketball-team\" class=\"headerlink\" title=\"E. XKC’s basketball team\"></a>E. XKC’s basketball team</h2><p>一个比较有趣的题目。</p>\n<p>考虑从后往前维护一个单调递增的队列，之所以这样维护是因为：</p>\n<p>当 $i &lt; j$ 且 $a[i] &lt; a[j]$ 时 $a[i]$ 是没有任何用处的，因为它又小又靠前，在它前面的那些值如果比 $a[i]$ 小那么肯定也比 $a[j]$ 小，而且 $i &lt; j$ 所以肯定会选择 $j$ 而不是 $i$ 。</p>\n<p>然后我们二分单调队列就能得到最先进入队列的满足的那个值的位置，最先进入队列的当然是原序列中最靠后的满足要求的值。</p>\n<p>时间复杂度：$O(n \\cdot \\log n)$</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">5e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[MAXN], ans[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\tvector&lt;<span class=\"keyword\">int</span>&gt; v, vp;</span><br><span class=\"line\">\tv.<span class=\"built_in\">push_back</span>(a[n]); vp.<span class=\"built_in\">push_back</span>(n);</span><br><span class=\"line\">\tans[n] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">per</span>(i, n<span class=\"number\">-1</span>, <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> it = <span class=\"built_in\">lower_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), a[i]+m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(it == v.<span class=\"built_in\">end</span>())&#123;</span><br><span class=\"line\">\t\t\tans[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> pos = it - v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t\t\tpos = vp[pos];</span><br><span class=\"line\">\t\t\tans[i] = pos - i - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a[i] &gt; v.<span class=\"built_in\">back</span>())&#123;</span><br><span class=\"line\">\t\t\tv.<span class=\"built_in\">push_back</span>(a[i]);</span><br><span class=\"line\">\t\t\tvp.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, ans[i], i == n?<span class=\"string\">&#x27;\\n&#x27;</span>:<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"I-query\"><a href=\"#I-query\" class=\"headerlink\" title=\"I. query\"></a>I. query</h2><p>又是一道二维偏序的问题。</p>\n<p>偏序关系是全序关系的子集。</p>\n<p>全序关系是指对于一个集合，其中的所有对 $&lt;i, j&gt;$ 都会有这种关系，也就是两两可以比较，比如整数域上的大小关系。</p>\n<p>偏序关系是指对于一个集合，其中存在一些（注意：不是所有）对 $&lt;i, j&gt;$ 有这种关系，也就是不需要两两可以比较，比如整数域上的整除关系。</p>\n<p>偏序关系有严格偏序和非严格偏序两种，各有自己的三条基本性质。</p>\n<p>回到这个问题，$min(p_i, p_j) = \\gcd (p_i, p_j)$ 相当于 $p_i, p_j$存在整除关系。显然 $n$ 个数的全排列中满足整除关系的对数小于 $n\\cdot \\log n$对。</p>\n<p>我们先将所有的满足条件的对数直接暴力筛出来，然后就抽象成了这样一个问题：</p>\n<p>给出一些点，查询在区间 $[l, r]$ 内点的数量。</p>\n<p>这就是一个经典的二位偏序问题了，直接对一维排序，二维用树状数组维护一下就好了。</p>\n<p>时间复杂度：$O(n\\cdot \\log n)$  </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x)\tcerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[MAXN], id[MAXN];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l, r, val, id;</span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a.r == b.r)\t<span class=\"keyword\">return</span> a.l &lt; b.l;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.r &lt; b.r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;s[MAXN];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BIT</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> e[MAXN], n;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> x&amp;-x;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(x &lt;= n)&#123;</span><br><span class=\"line\">\t\t\te[x] += v;</span><br><span class=\"line\">\t\t\tx += <span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(x)&#123;</span><br><span class=\"line\">\t\t\tres += e[x];</span><br><span class=\"line\">\t\t\tx -= <span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;bit;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; v[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\tid[a[i]] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>*a[i]; j &lt;= n; j += a[i])&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(id[j] &lt; i)\tv[i].<span class=\"built_in\">push_back</span>(id[j]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> v[id[j]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;s[i].l, &amp;s[i].r);</span><br><span class=\"line\">\t\ts[i].id = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>, s + <span class=\"number\">1</span> + m);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbit.n = n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cur = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, (<span class=\"keyword\">int</span>)v[i].<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\t\tbit.<span class=\"built_in\">add</span>(v[i][j], <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(cur &lt;= m &amp;&amp; s[cur].r == i)&#123;</span><br><span class=\"line\">\t\t\ts[cur].val = bit.<span class=\"built_in\">get</span>(i) - bit.<span class=\"built_in\">get</span>(s[cur].l<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\tcur++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>, s + <span class=\"number\">1</span> + m, [](<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;<span class=\"keyword\">return</span> a.id &lt; b.id;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m)\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, s[i].val);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"J-Random-Access-Iterator\"><a href=\"#J-Random-Access-Iterator\" class=\"headerlink\" title=\"J. Random Access Iterator\"></a>J. Random Access Iterator</h3><p>感觉这个题目属于很简单的树上递推的题目。</p>\n<p>题目的意思就是从树的根结点出发，每次在节点的儿子中随机选择一个，递归，重复子节点个数次。</p>\n<p>我们先一次 $DFS$ 更新出来子树的高度和节点的子节点树，$h[x]$ 和 $son[x]$。</p>\n<p>首先当一个子节点子树的高度加一小于当前节点的高度的时候这个子节点是没用的，因为它更新不到最大值。</p>\n<p>而如果可以的话就加上这个子树的递归求出最大值的概率。叶子节点概率为一。</p>\n<p>形式化来说就是：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">DFS</span><span class=\"params\">(x)</span></span></span><br><span class=\"line\">    k &lt;- the number of sons of x</span><br><span class=\"line\">    <span class=\"keyword\">if</span>  k is <span class=\"number\">0</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    p &lt;- <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> son of x <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> h[x] equal to h[son] + <span class=\"number\">1</span> <span class=\"keyword\">do</span> </span><br><span class=\"line\">          p += <span class=\"built_in\">DFS</span>(son)</span><br><span class=\"line\">    p &lt;- p divided by k</span><br><span class=\"line\">    res &lt;- <span class=\"number\">1</span> - <span class=\"built_in\">pow</span>(<span class=\"number\">1</span>-p, k)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n<p>后半段的处理是基于这样一个原因：</p>\n<p>假设节点取到最大值的概率为p，那么对于一个节点 $x$ 有：</p>\n<p>$$p[x] = 1 - (1 - \\frac{\\sum_{son \\in sons[x]}p[son]}{|sons[x]|})^{|sons[x]|} $$</p>\n<p>就是这样一个公式。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(ll i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(ll i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll MAXN = <span class=\"number\">1e6</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ll mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">qpow</span><span class=\"params\">(ll a, ll b)</span></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) res = <span class=\"number\">1ll</span> * res * a % mod;</span><br><span class=\"line\">        a = <span class=\"number\">1ll</span> * a * a % mod;</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res = res%mod + mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res%mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">inv</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">qpow</span>(x, mod<span class=\"number\">-2</span>);&#125;</span><br><span class=\"line\">vector&lt;ll&gt; G[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\">ll cor[MAXN], son[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(ll x, ll fa = <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll p: G[x])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(p, x);</span><br><span class=\"line\">        res = <span class=\"built_in\">max</span>(res, cor[p]);</span><br><span class=\"line\">        son[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cor[x] = res + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">dfs2</span><span class=\"params\">(ll x, ll fa = <span class=\"number\">0</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[x] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll pp: G[x])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pp == fa)    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cor[x] == cor[pp] + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            p += <span class=\"built_in\">dfs2</span>(pp, x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p = p * <span class=\"built_in\">inv</span>(son[x]) % mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">1</span> - <span class=\"built_in\">qpow</span>(<span class=\"number\">1</span>-p+mod, son[x]) + mod) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ll n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;n);</span><br><span class=\"line\">    ll u, v;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld %lld&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        G[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"2017浙江省赛","thumbnail":"/gallery/thumbnails/0_Magmar, Anton Fadeev_02.jpg","date":"2019-04-12T08:57:53.000Z","_content":"\n## 碎碎念\n\n明天就又去郑轻了（噫，我为什么要说又，哦，上次天梯就是在郑轻），希望这次能取得一个好成绩！不能再这么菜下去了。\n\n<!--more-->\n\n老毕再次KILL一道数位DP，这也太强了。我贡献一发构造题。\n\n## 复盘\n\n早上起晚了，迟到30min，AB两题我到的时候已经Ａ掉了，然后mengshen在上机写Ｃ，然后我看Ｄ，老毕再看Ｇ，说是博弈，然而我根本不会博弈，于是继续看我的Ｄ，看完发现是一个普通的线段合并，觉得可写，此时mengshen还在改Ｃ，于是我给老毕讲了一下题意想让他写，但是讲着讲着发下原来的思路复杂了，其实直接两个人的线段全部丢在一起，直接判断重复区间就可以了，就把mengshen赶下来写Ｄ，写完测样例通过直接就交上去了，然后ＷＡ了，发现ＤＥＢＵＧ的输出没删除，删除掉ＡＣ。然后mengshen又上机写Ｃ，并改变了做法，３ＡＣ。然后Ｅ题数位ＤＰ丢给老毕没管过，看Ｆ，本来用的优先队列写了一个假算法，演了一发，然后找到了一组数据ｈａｃｋ了自己，发现是没有贪心，改用multiset贪心，写完测过样例交了，TLE，然后mengshen提议讲ＳＴＬ的lower_bound()换成multiset自带的，说是曾经在CF上看到过一个被lower_bound()卡时间的帖子，遂改，3ＡＣ。\n\n## 总结\n\n最终６题，听说这套省赛题目难度挺大的，感觉打的还可以。\n\n由于前天睡得太晚导致迟到实在不应该，老毕还是强啊，精通数位ＤＰ，还是要继续加油。\n\n\n\n","source":"_posts/2017-Zhejiang-provincial-competition.md","raw":"---\ntitle: 2017浙江省赛\nthumbnail: /gallery/thumbnails/0_Magmar, Anton Fadeev_02.jpg\ndate: 2019-04-12 16:57:53\ntags: \n    - 数据结构\n    - 动态规划\n    - 旅游\ncategories: \n    - 竞赛\n---\n\n## 碎碎念\n\n明天就又去郑轻了（噫，我为什么要说又，哦，上次天梯就是在郑轻），希望这次能取得一个好成绩！不能再这么菜下去了。\n\n<!--more-->\n\n老毕再次KILL一道数位DP，这也太强了。我贡献一发构造题。\n\n## 复盘\n\n早上起晚了，迟到30min，AB两题我到的时候已经Ａ掉了，然后mengshen在上机写Ｃ，然后我看Ｄ，老毕再看Ｇ，说是博弈，然而我根本不会博弈，于是继续看我的Ｄ，看完发现是一个普通的线段合并，觉得可写，此时mengshen还在改Ｃ，于是我给老毕讲了一下题意想让他写，但是讲着讲着发下原来的思路复杂了，其实直接两个人的线段全部丢在一起，直接判断重复区间就可以了，就把mengshen赶下来写Ｄ，写完测样例通过直接就交上去了，然后ＷＡ了，发现ＤＥＢＵＧ的输出没删除，删除掉ＡＣ。然后mengshen又上机写Ｃ，并改变了做法，３ＡＣ。然后Ｅ题数位ＤＰ丢给老毕没管过，看Ｆ，本来用的优先队列写了一个假算法，演了一发，然后找到了一组数据ｈａｃｋ了自己，发现是没有贪心，改用multiset贪心，写完测过样例交了，TLE，然后mengshen提议讲ＳＴＬ的lower_bound()换成multiset自带的，说是曾经在CF上看到过一个被lower_bound()卡时间的帖子，遂改，3ＡＣ。\n\n## 总结\n\n最终６题，听说这套省赛题目难度挺大的，感觉打的还可以。\n\n由于前天睡得太晚导致迟到实在不应该，老毕还是强啊，精通数位ＤＰ，还是要继续加油。\n\n\n\n","slug":"2017-Zhejiang-provincial-competition","published":1,"updated":"2021-03-28T08:39:16.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hybr000669kjcyxp5tie","content":"<h2 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h2><p>明天就又去郑轻了（噫，我为什么要说又，哦，上次天梯就是在郑轻），希望这次能取得一个好成绩！不能再这么菜下去了。</p>\n<span id=\"more\"></span>\n\n<p>老毕再次KILL一道数位DP，这也太强了。我贡献一发构造题。</p>\n<h2 id=\"复盘\"><a href=\"#复盘\" class=\"headerlink\" title=\"复盘\"></a>复盘</h2><p>早上起晚了，迟到30min，AB两题我到的时候已经Ａ掉了，然后mengshen在上机写Ｃ，然后我看Ｄ，老毕再看Ｇ，说是博弈，然而我根本不会博弈，于是继续看我的Ｄ，看完发现是一个普通的线段合并，觉得可写，此时mengshen还在改Ｃ，于是我给老毕讲了一下题意想让他写，但是讲着讲着发下原来的思路复杂了，其实直接两个人的线段全部丢在一起，直接判断重复区间就可以了，就把mengshen赶下来写Ｄ，写完测样例通过直接就交上去了，然后ＷＡ了，发现ＤＥＢＵＧ的输出没删除，删除掉ＡＣ。然后mengshen又上机写Ｃ，并改变了做法，３ＡＣ。然后Ｅ题数位ＤＰ丢给老毕没管过，看Ｆ，本来用的优先队列写了一个假算法，演了一发，然后找到了一组数据ｈａｃｋ了自己，发现是没有贪心，改用multiset贪心，写完测过样例交了，TLE，然后mengshen提议讲ＳＴＬ的lower_bound()换成multiset自带的，说是曾经在CF上看到过一个被lower_bound()卡时间的帖子，遂改，3ＡＣ。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最终６题，听说这套省赛题目难度挺大的，感觉打的还可以。</p>\n<p>由于前天睡得太晚导致迟到实在不应该，老毕还是强啊，精通数位ＤＰ，还是要继续加油。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h2><p>明天就又去郑轻了（噫，我为什么要说又，哦，上次天梯就是在郑轻），希望这次能取得一个好成绩！不能再这么菜下去了。</p>","more":"<p>老毕再次KILL一道数位DP，这也太强了。我贡献一发构造题。</p>\n<h2 id=\"复盘\"><a href=\"#复盘\" class=\"headerlink\" title=\"复盘\"></a>复盘</h2><p>早上起晚了，迟到30min，AB两题我到的时候已经Ａ掉了，然后mengshen在上机写Ｃ，然后我看Ｄ，老毕再看Ｇ，说是博弈，然而我根本不会博弈，于是继续看我的Ｄ，看完发现是一个普通的线段合并，觉得可写，此时mengshen还在改Ｃ，于是我给老毕讲了一下题意想让他写，但是讲着讲着发下原来的思路复杂了，其实直接两个人的线段全部丢在一起，直接判断重复区间就可以了，就把mengshen赶下来写Ｄ，写完测样例通过直接就交上去了，然后ＷＡ了，发现ＤＥＢＵＧ的输出没删除，删除掉ＡＣ。然后mengshen又上机写Ｃ，并改变了做法，３ＡＣ。然后Ｅ题数位ＤＰ丢给老毕没管过，看Ｆ，本来用的优先队列写了一个假算法，演了一发，然后找到了一组数据ｈａｃｋ了自己，发现是没有贪心，改用multiset贪心，写完测过样例交了，TLE，然后mengshen提议讲ＳＴＬ的lower_bound()换成multiset自带的，说是曾经在CF上看到过一个被lower_bound()卡时间的帖子，遂改，3ＡＣ。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最终６题，听说这套省赛题目难度挺大的，感觉打的还可以。</p>\n<p>由于前天睡得太晚导致迟到实在不应该，老毕还是强啊，精通数位ＤＰ，还是要继续加油。</p>"},{"title":"2019-蓝桥杯国赛","thumbnail":"/gallery/thumbnails/0_Monolith - view1, Anton Fadeev_01.jpg","date":"2019-05-30T04:52:38.000Z","_content":"\n# 碎碎念\n\n<!--more-->\n\n## Day1\n\n第一年没比赛，本来以为是需要去报道的，结果不用。也没有其他的安排，就去故宫了。下午还去了北大，自己瞎逛没见到图书馆。\n\n## Day2\n\n上午在宾馆宅了一上午，下午比赛。\n\n比赛题目突变，暴力能过杯变成了暴力骗分杯。\n\nDP、搜索很多，甚至还有一道复杂的数据结构，蓝桥杯真的转型了。\n\n写的很差，对答案的时候发现就没写对几道题，大概三四十分，心想凉凉。\n\n## Day3\n\n早上出了成绩发现竟然国一，激动得不行。也发现蓝桥杯还是那么水，这都能国一。\n\n早上的招聘会约了但是没起来没去，只去了下午的颁奖，本来以后国一还能有个U盘，结果什么都没有。\n\n颁奖典礼是真的体面，表白民族大学的小姐姐。魔术师贼帅。蓝桥大气，羡慕国特笔记本+手机。\n\n因为是晚上十点的车，颁完奖才四点多，又去逛了逛圆明园，当天下了雨，圆明园是真的好看。\n\n![ymy](/gallery/photos/ymy.png)\n\n完。","source":"_posts/2019-lanqiao-guosai.md","raw":"---\ntitle: 2019-蓝桥杯国赛\nthumbnail: /gallery/thumbnails/0_Monolith - view1, Anton Fadeev_01.jpg\ndate: 2019-05-30 12:52:38\ntags: \n    - 旅游\ncategories: \n    - 竞赛\n---\n\n# 碎碎念\n\n<!--more-->\n\n## Day1\n\n第一年没比赛，本来以为是需要去报道的，结果不用。也没有其他的安排，就去故宫了。下午还去了北大，自己瞎逛没见到图书馆。\n\n## Day2\n\n上午在宾馆宅了一上午，下午比赛。\n\n比赛题目突变，暴力能过杯变成了暴力骗分杯。\n\nDP、搜索很多，甚至还有一道复杂的数据结构，蓝桥杯真的转型了。\n\n写的很差，对答案的时候发现就没写对几道题，大概三四十分，心想凉凉。\n\n## Day3\n\n早上出了成绩发现竟然国一，激动得不行。也发现蓝桥杯还是那么水，这都能国一。\n\n早上的招聘会约了但是没起来没去，只去了下午的颁奖，本来以后国一还能有个U盘，结果什么都没有。\n\n颁奖典礼是真的体面，表白民族大学的小姐姐。魔术师贼帅。蓝桥大气，羡慕国特笔记本+手机。\n\n因为是晚上十点的车，颁完奖才四点多，又去逛了逛圆明园，当天下了雨，圆明园是真的好看。\n\n![ymy](/gallery/photos/ymy.png)\n\n完。","slug":"2019-lanqiao-guosai","published":1,"updated":"2021-03-28T08:41:34.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hybs000769kjhtsq9gii","content":"<h1 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h1><span id=\"more\"></span>\n\n<h2 id=\"Day1\"><a href=\"#Day1\" class=\"headerlink\" title=\"Day1\"></a>Day1</h2><p>第一年没比赛，本来以为是需要去报道的，结果不用。也没有其他的安排，就去故宫了。下午还去了北大，自己瞎逛没见到图书馆。</p>\n<h2 id=\"Day2\"><a href=\"#Day2\" class=\"headerlink\" title=\"Day2\"></a>Day2</h2><p>上午在宾馆宅了一上午，下午比赛。</p>\n<p>比赛题目突变，暴力能过杯变成了暴力骗分杯。</p>\n<p>DP、搜索很多，甚至还有一道复杂的数据结构，蓝桥杯真的转型了。</p>\n<p>写的很差，对答案的时候发现就没写对几道题，大概三四十分，心想凉凉。</p>\n<h2 id=\"Day3\"><a href=\"#Day3\" class=\"headerlink\" title=\"Day3\"></a>Day3</h2><p>早上出了成绩发现竟然国一，激动得不行。也发现蓝桥杯还是那么水，这都能国一。</p>\n<p>早上的招聘会约了但是没起来没去，只去了下午的颁奖，本来以后国一还能有个U盘，结果什么都没有。</p>\n<p>颁奖典礼是真的体面，表白民族大学的小姐姐。魔术师贼帅。蓝桥大气，羡慕国特笔记本+手机。</p>\n<p>因为是晚上十点的车，颁完奖才四点多，又去逛了逛圆明园，当天下了雨，圆明园是真的好看。</p>\n<p><img src=\"/gallery/photos/ymy.png\" alt=\"ymy\"></p>\n<p>完。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h1>","more":"<h2 id=\"Day1\"><a href=\"#Day1\" class=\"headerlink\" title=\"Day1\"></a>Day1</h2><p>第一年没比赛，本来以为是需要去报道的，结果不用。也没有其他的安排，就去故宫了。下午还去了北大，自己瞎逛没见到图书馆。</p>\n<h2 id=\"Day2\"><a href=\"#Day2\" class=\"headerlink\" title=\"Day2\"></a>Day2</h2><p>上午在宾馆宅了一上午，下午比赛。</p>\n<p>比赛题目突变，暴力能过杯变成了暴力骗分杯。</p>\n<p>DP、搜索很多，甚至还有一道复杂的数据结构，蓝桥杯真的转型了。</p>\n<p>写的很差，对答案的时候发现就没写对几道题，大概三四十分，心想凉凉。</p>\n<h2 id=\"Day3\"><a href=\"#Day3\" class=\"headerlink\" title=\"Day3\"></a>Day3</h2><p>早上出了成绩发现竟然国一，激动得不行。也发现蓝桥杯还是那么水，这都能国一。</p>\n<p>早上的招聘会约了但是没起来没去，只去了下午的颁奖，本来以后国一还能有个U盘，结果什么都没有。</p>\n<p>颁奖典礼是真的体面，表白民族大学的小姐姐。魔术师贼帅。蓝桥大气，羡慕国特笔记本+手机。</p>\n<p>因为是晚上十点的车，颁完奖才四点多，又去逛了逛圆明园，当天下了雨，圆明园是真的好看。</p>\n<p><img src=\"/gallery/photos/ymy.png\" alt=\"ymy\"></p>\n<p>完。</p>"},{"title":"BZOJ-2956-模积和","thumbnail":"/gallery/thumbnails/0_The Frozen Floes of Northern Celandine, Anton Fadeev_01.jpg","date":"2019-08-06T01:27:40.000Z","_content":"\n# 题目\n\n[BZOJ-2056](https://www.lydsy.com/JudgeOnline/problem.php?id=2956)\n\n一道有点复杂的数论分块。\n\n<!--more-->\n\n## 公式推导\n\n所求即为：\n\n$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n \\bmod i )\\cdot (m\\bmod j)(i \\neq j)}$$\n\n先不管$i\\neq j$的情况:\n$$\\sum_{i=1}^{n}(\\sum_{j=1}^{m}{(n\\bmod i) \\cdot (m\\bmod j)})$$\n\n$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n-i\\lfloor \\frac{n}{i} \\rfloor)(m-j\\lfloor \\frac{m}{j} \\rfloor)}$$\n\n$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n m - n\\cdot j\\lfloor \\frac{m}{j} \\rfloor - m\\cdot i\\lfloor \\frac{n}{i} \\rfloor + ij\\lfloor \\frac{n}{i} \\rfloor \\lfloor \\frac{m}{j} \\rfloor)}$$\n\n$$n^2m^2 - n^2\\sum_{j=1}^{m}{j\\lfloor \\frac{m}{j} \\rfloor} - m^2\\sum_{i=1}^{n}i\\lfloor \\frac{n}{i} \\rfloor + \\sum_{i=1}^{n}i\\lfloor \\frac{n}{i} \\rfloor\\sum_{i=1}^{m}j\\lfloor \\frac{m}{j} \\rfloor$$\n\n然后在讨论$i = j$的情况:\n\n$$\\sum_{i=1}^{min(n, m)}{(n\\bmod i)\\cdot (m\\bmod i)}$$\n\n$$\\sum_{i=1}^{min(n, m)}{(n - i\\lfloor \\frac{n}{i} \\rfloor)(m - i\\lfloor \\frac{m}{i} \\rfloor)} $$\n\n$$\\sum_{i=1}^{min(n, m)}{n m - m\\cdot i\\lfloor \\frac{n}{i} \\rfloor - n\\cdot i\\lfloor \\frac{m}{i} \\rfloor + i^2 \\lfloor \\frac{n}{i} \\rfloor \\lfloor \\frac{m}{i} \\rfloor} $$\n\n然后就可以愉快的分块了。\n\n## 代码\n\n~~~c++\n/**************************************************************\n    Problem: 2956\n    User: Dicer\n    Language: C++\n    Result: Accepted\n    Time:184 ms\n    Memory:1292 kb\n****************************************************************/\n \n#include<bits/stdc++.h>\n#define rep(i, a, b)    for(int i = (a); i <= (int)(b); ++i)\n#define per(i, a, b)    for(int i = (a); i >= (int)(b); --i)\n#define debug(x)    cout << #x << ' ' << x << endl;\nusing namespace std;\n \ntypedef long long ll;\nconst int MAXN = 1e5 + 7;\nconst int MOD = 19940417;\nconst int INV = 3323403;\n \nll cal(ll n){\n    ll ans = 0;\n    for(ll i = 1, j; i <= n; i = j + 1){\n        j = n / ( n / i);\n        ans += (i + j) * (j - i + 1) / 2 * (n / i);\n        ans %= MOD;\n    }\n    return ans;\n}\nll cal(ll n, ll k){\n    ll ans = 0;\n    for(ll i = 1, j; i <= k; i = j + 1){\n        j = min(k, n / ( n / i));\n        ans += (i + j) * (j - i + 1) / 2 * (n / i);\n        ans %= MOD;\n    }\n    return ans;\n}\n \nll sum(ll n){\n    return n * (n + 1) % MOD * (2 * n + 1) % MOD * INV % MOD;\n}\n \nll cal(ll n, ll m, ll k){\n    ll ans = 0;\n    for(ll i = 1, j; i <= k; i = j + 1){\n        j = min(k, min(n / (n / i), m / (m / i)));\n        ans += (sum(j) - sum(i-1)) * (n/i) % MOD * (m/i) % MOD;\n        ans %= MOD;\n    }\n    return ans;\n}\n \nll mul(ll a, ll b){\n    a %= MOD; b %= MOD;\n    return a * b % MOD;\n}\n \nint main(){\n    ll n, m, k;\n    scanf(\"%lld%lld\", &n, &m);\n    k = min(n, m);\n    long long ans = 0;\n    ans += mul(n * n, m * m);\n    ans -= mul(n * n, cal(m));\n    ans -= mul(m * m, cal(n));\n    ans += mul(cal(n), cal(m));\n    ans = ((ans % MOD) + MOD) % MOD;\n    ans -= mul(k, n * m);\n    ans += mul(n, cal(m, k));\n    ans += mul(m, cal(n, k));\n    ans -= cal(n, m, k);\n    ans = ((ans % MOD) + MOD) % MOD;\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n~~~\n\n","source":"_posts/BZOJ-2956.md","raw":"---\ntitle: BZOJ-2956-模积和\nthumbnail: /gallery/thumbnails/0_The Frozen Floes of Northern Celandine, Anton Fadeev_01.jpg\ndate: 2019-08-06 09:27:40\ntags: \n    - 数论\ncategories: \n---\n\n# 题目\n\n[BZOJ-2056](https://www.lydsy.com/JudgeOnline/problem.php?id=2956)\n\n一道有点复杂的数论分块。\n\n<!--more-->\n\n## 公式推导\n\n所求即为：\n\n$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n \\bmod i )\\cdot (m\\bmod j)(i \\neq j)}$$\n\n先不管$i\\neq j$的情况:\n$$\\sum_{i=1}^{n}(\\sum_{j=1}^{m}{(n\\bmod i) \\cdot (m\\bmod j)})$$\n\n$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n-i\\lfloor \\frac{n}{i} \\rfloor)(m-j\\lfloor \\frac{m}{j} \\rfloor)}$$\n\n$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n m - n\\cdot j\\lfloor \\frac{m}{j} \\rfloor - m\\cdot i\\lfloor \\frac{n}{i} \\rfloor + ij\\lfloor \\frac{n}{i} \\rfloor \\lfloor \\frac{m}{j} \\rfloor)}$$\n\n$$n^2m^2 - n^2\\sum_{j=1}^{m}{j\\lfloor \\frac{m}{j} \\rfloor} - m^2\\sum_{i=1}^{n}i\\lfloor \\frac{n}{i} \\rfloor + \\sum_{i=1}^{n}i\\lfloor \\frac{n}{i} \\rfloor\\sum_{i=1}^{m}j\\lfloor \\frac{m}{j} \\rfloor$$\n\n然后在讨论$i = j$的情况:\n\n$$\\sum_{i=1}^{min(n, m)}{(n\\bmod i)\\cdot (m\\bmod i)}$$\n\n$$\\sum_{i=1}^{min(n, m)}{(n - i\\lfloor \\frac{n}{i} \\rfloor)(m - i\\lfloor \\frac{m}{i} \\rfloor)} $$\n\n$$\\sum_{i=1}^{min(n, m)}{n m - m\\cdot i\\lfloor \\frac{n}{i} \\rfloor - n\\cdot i\\lfloor \\frac{m}{i} \\rfloor + i^2 \\lfloor \\frac{n}{i} \\rfloor \\lfloor \\frac{m}{i} \\rfloor} $$\n\n然后就可以愉快的分块了。\n\n## 代码\n\n~~~c++\n/**************************************************************\n    Problem: 2956\n    User: Dicer\n    Language: C++\n    Result: Accepted\n    Time:184 ms\n    Memory:1292 kb\n****************************************************************/\n \n#include<bits/stdc++.h>\n#define rep(i, a, b)    for(int i = (a); i <= (int)(b); ++i)\n#define per(i, a, b)    for(int i = (a); i >= (int)(b); --i)\n#define debug(x)    cout << #x << ' ' << x << endl;\nusing namespace std;\n \ntypedef long long ll;\nconst int MAXN = 1e5 + 7;\nconst int MOD = 19940417;\nconst int INV = 3323403;\n \nll cal(ll n){\n    ll ans = 0;\n    for(ll i = 1, j; i <= n; i = j + 1){\n        j = n / ( n / i);\n        ans += (i + j) * (j - i + 1) / 2 * (n / i);\n        ans %= MOD;\n    }\n    return ans;\n}\nll cal(ll n, ll k){\n    ll ans = 0;\n    for(ll i = 1, j; i <= k; i = j + 1){\n        j = min(k, n / ( n / i));\n        ans += (i + j) * (j - i + 1) / 2 * (n / i);\n        ans %= MOD;\n    }\n    return ans;\n}\n \nll sum(ll n){\n    return n * (n + 1) % MOD * (2 * n + 1) % MOD * INV % MOD;\n}\n \nll cal(ll n, ll m, ll k){\n    ll ans = 0;\n    for(ll i = 1, j; i <= k; i = j + 1){\n        j = min(k, min(n / (n / i), m / (m / i)));\n        ans += (sum(j) - sum(i-1)) * (n/i) % MOD * (m/i) % MOD;\n        ans %= MOD;\n    }\n    return ans;\n}\n \nll mul(ll a, ll b){\n    a %= MOD; b %= MOD;\n    return a * b % MOD;\n}\n \nint main(){\n    ll n, m, k;\n    scanf(\"%lld%lld\", &n, &m);\n    k = min(n, m);\n    long long ans = 0;\n    ans += mul(n * n, m * m);\n    ans -= mul(n * n, cal(m));\n    ans -= mul(m * m, cal(n));\n    ans += mul(cal(n), cal(m));\n    ans = ((ans % MOD) + MOD) % MOD;\n    ans -= mul(k, n * m);\n    ans += mul(n, cal(m, k));\n    ans += mul(m, cal(n, k));\n    ans -= cal(n, m, k);\n    ans = ((ans % MOD) + MOD) % MOD;\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n~~~\n\n","slug":"BZOJ-2956","published":1,"updated":"2021-03-28T08:42:56.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hybx000b69kjb0m80b8n","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=2956\">BZOJ-2056</a></p>\n<p>一道有点复杂的数论分块。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"公式推导\"><a href=\"#公式推导\" class=\"headerlink\" title=\"公式推导\"></a>公式推导</h2><p>所求即为：</p>\n<p>$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n \\bmod i )\\cdot (m\\bmod j)(i \\neq j)}$$</p>\n<p>先不管$i\\neq j$的情况:<br>$$\\sum_{i=1}^{n}(\\sum_{j=1}^{m}{(n\\bmod i) \\cdot (m\\bmod j)})$$</p>\n<p>$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n-i\\lfloor \\frac{n}{i} \\rfloor)(m-j\\lfloor \\frac{m}{j} \\rfloor)}$$</p>\n<p>$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n m - n\\cdot j\\lfloor \\frac{m}{j} \\rfloor - m\\cdot i\\lfloor \\frac{n}{i} \\rfloor + ij\\lfloor \\frac{n}{i} \\rfloor \\lfloor \\frac{m}{j} \\rfloor)}$$</p>\n<p>$$n^2m^2 - n^2\\sum_{j=1}^{m}{j\\lfloor \\frac{m}{j} \\rfloor} - m^2\\sum_{i=1}^{n}i\\lfloor \\frac{n}{i} \\rfloor + \\sum_{i=1}^{n}i\\lfloor \\frac{n}{i} \\rfloor\\sum_{i=1}^{m}j\\lfloor \\frac{m}{j} \\rfloor$$</p>\n<p>然后在讨论$i = j$的情况:</p>\n<p>$$\\sum_{i=1}^{min(n, m)}{(n\\bmod i)\\cdot (m\\bmod i)}$$</p>\n<p>$$\\sum_{i=1}^{min(n, m)}{(n - i\\lfloor \\frac{n}{i} \\rfloor)(m - i\\lfloor \\frac{m}{i} \\rfloor)} $$</p>\n<p>$$\\sum_{i=1}^{min(n, m)}{n m - m\\cdot i\\lfloor \\frac{n}{i} \\rfloor - n\\cdot i\\lfloor \\frac{m}{i} \\rfloor + i^2 \\lfloor \\frac{n}{i} \\rfloor \\lfloor \\frac{m}{i} \\rfloor} $$</p>\n<p>然后就可以愉快的分块了。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">    Problem: 2956</span></span><br><span class=\"line\"><span class=\"comment\">    User: Dicer</span></span><br><span class=\"line\"><span class=\"comment\">    Language: C++</span></span><br><span class=\"line\"><span class=\"comment\">    Result: Accepted</span></span><br><span class=\"line\"><span class=\"comment\">    Time:184 ms</span></span><br><span class=\"line\"><span class=\"comment\">    Memory:1292 kb</span></span><br><span class=\"line\"><span class=\"comment\">****************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b)    for(int i = (a); i &lt;= (int)(b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b)    for(int i = (a); i &gt;= (int)(b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x)    cout &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">19940417</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INV = <span class=\"number\">3323403</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">cal</span><span class=\"params\">(ll n)</span></span>&#123;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll i = <span class=\"number\">1</span>, j; i &lt;= n; i = j + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        j = n / ( n / i);</span><br><span class=\"line\">        ans += (i + j) * (j - i + <span class=\"number\">1</span>) / <span class=\"number\">2</span> * (n / i);</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">cal</span><span class=\"params\">(ll n, ll k)</span></span>&#123;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll i = <span class=\"number\">1</span>, j; i &lt;= k; i = j + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        j = <span class=\"built_in\">min</span>(k, n / ( n / i));</span><br><span class=\"line\">        ans += (i + j) * (j - i + <span class=\"number\">1</span>) / <span class=\"number\">2</span> * (n / i);</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">sum</span><span class=\"params\">(ll n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * (n + <span class=\"number\">1</span>) % MOD * (<span class=\"number\">2</span> * n + <span class=\"number\">1</span>) % MOD * INV % MOD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">cal</span><span class=\"params\">(ll n, ll m, ll k)</span></span>&#123;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll i = <span class=\"number\">1</span>, j; i &lt;= k; i = j + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        j = <span class=\"built_in\">min</span>(k, <span class=\"built_in\">min</span>(n / (n / i), m / (m / i)));</span><br><span class=\"line\">        ans += (<span class=\"built_in\">sum</span>(j) - <span class=\"built_in\">sum</span>(i<span class=\"number\">-1</span>)) * (n/i) % MOD * (m/i) % MOD;</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mul</span><span class=\"params\">(ll a, ll b)</span></span>&#123;</span><br><span class=\"line\">    a %= MOD; b %= MOD;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * b % MOD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ll n, m, k;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    k = <span class=\"built_in\">min</span>(n, m);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ans += <span class=\"built_in\">mul</span>(n * n, m * m);</span><br><span class=\"line\">    ans -= <span class=\"built_in\">mul</span>(n * n, <span class=\"built_in\">cal</span>(m));</span><br><span class=\"line\">    ans -= <span class=\"built_in\">mul</span>(m * m, <span class=\"built_in\">cal</span>(n));</span><br><span class=\"line\">    ans += <span class=\"built_in\">mul</span>(<span class=\"built_in\">cal</span>(n), <span class=\"built_in\">cal</span>(m));</span><br><span class=\"line\">    ans = ((ans % MOD) + MOD) % MOD;</span><br><span class=\"line\">    ans -= <span class=\"built_in\">mul</span>(k, n * m);</span><br><span class=\"line\">    ans += <span class=\"built_in\">mul</span>(n, <span class=\"built_in\">cal</span>(m, k));</span><br><span class=\"line\">    ans += <span class=\"built_in\">mul</span>(m, <span class=\"built_in\">cal</span>(n, k));</span><br><span class=\"line\">    ans -= <span class=\"built_in\">cal</span>(n, m, k);</span><br><span class=\"line\">    ans = ((ans % MOD) + MOD) % MOD;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=2956\">BZOJ-2056</a></p>\n<p>一道有点复杂的数论分块。</p>","more":"<h2 id=\"公式推导\"><a href=\"#公式推导\" class=\"headerlink\" title=\"公式推导\"></a>公式推导</h2><p>所求即为：</p>\n<p>$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n \\bmod i )\\cdot (m\\bmod j)(i \\neq j)}$$</p>\n<p>先不管$i\\neq j$的情况:<br>$$\\sum_{i=1}^{n}(\\sum_{j=1}^{m}{(n\\bmod i) \\cdot (m\\bmod j)})$$</p>\n<p>$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n-i\\lfloor \\frac{n}{i} \\rfloor)(m-j\\lfloor \\frac{m}{j} \\rfloor)}$$</p>\n<p>$$\\sum_{i=1}^{n}\\sum_{j=1}^{m}{(n m - n\\cdot j\\lfloor \\frac{m}{j} \\rfloor - m\\cdot i\\lfloor \\frac{n}{i} \\rfloor + ij\\lfloor \\frac{n}{i} \\rfloor \\lfloor \\frac{m}{j} \\rfloor)}$$</p>\n<p>$$n^2m^2 - n^2\\sum_{j=1}^{m}{j\\lfloor \\frac{m}{j} \\rfloor} - m^2\\sum_{i=1}^{n}i\\lfloor \\frac{n}{i} \\rfloor + \\sum_{i=1}^{n}i\\lfloor \\frac{n}{i} \\rfloor\\sum_{i=1}^{m}j\\lfloor \\frac{m}{j} \\rfloor$$</p>\n<p>然后在讨论$i = j$的情况:</p>\n<p>$$\\sum_{i=1}^{min(n, m)}{(n\\bmod i)\\cdot (m\\bmod i)}$$</p>\n<p>$$\\sum_{i=1}^{min(n, m)}{(n - i\\lfloor \\frac{n}{i} \\rfloor)(m - i\\lfloor \\frac{m}{i} \\rfloor)} $$</p>\n<p>$$\\sum_{i=1}^{min(n, m)}{n m - m\\cdot i\\lfloor \\frac{n}{i} \\rfloor - n\\cdot i\\lfloor \\frac{m}{i} \\rfloor + i^2 \\lfloor \\frac{n}{i} \\rfloor \\lfloor \\frac{m}{i} \\rfloor} $$</p>\n<p>然后就可以愉快的分块了。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">    Problem: 2956</span></span><br><span class=\"line\"><span class=\"comment\">    User: Dicer</span></span><br><span class=\"line\"><span class=\"comment\">    Language: C++</span></span><br><span class=\"line\"><span class=\"comment\">    Result: Accepted</span></span><br><span class=\"line\"><span class=\"comment\">    Time:184 ms</span></span><br><span class=\"line\"><span class=\"comment\">    Memory:1292 kb</span></span><br><span class=\"line\"><span class=\"comment\">****************************************************************/</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b)    for(int i = (a); i &lt;= (int)(b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b)    for(int i = (a); i &gt;= (int)(b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x)    cout &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">19940417</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INV = <span class=\"number\">3323403</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">cal</span><span class=\"params\">(ll n)</span></span>&#123;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll i = <span class=\"number\">1</span>, j; i &lt;= n; i = j + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        j = n / ( n / i);</span><br><span class=\"line\">        ans += (i + j) * (j - i + <span class=\"number\">1</span>) / <span class=\"number\">2</span> * (n / i);</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">cal</span><span class=\"params\">(ll n, ll k)</span></span>&#123;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll i = <span class=\"number\">1</span>, j; i &lt;= k; i = j + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        j = <span class=\"built_in\">min</span>(k, n / ( n / i));</span><br><span class=\"line\">        ans += (i + j) * (j - i + <span class=\"number\">1</span>) / <span class=\"number\">2</span> * (n / i);</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">sum</span><span class=\"params\">(ll n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * (n + <span class=\"number\">1</span>) % MOD * (<span class=\"number\">2</span> * n + <span class=\"number\">1</span>) % MOD * INV % MOD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">cal</span><span class=\"params\">(ll n, ll m, ll k)</span></span>&#123;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll i = <span class=\"number\">1</span>, j; i &lt;= k; i = j + <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        j = <span class=\"built_in\">min</span>(k, <span class=\"built_in\">min</span>(n / (n / i), m / (m / i)));</span><br><span class=\"line\">        ans += (<span class=\"built_in\">sum</span>(j) - <span class=\"built_in\">sum</span>(i<span class=\"number\">-1</span>)) * (n/i) % MOD * (m/i) % MOD;</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">mul</span><span class=\"params\">(ll a, ll b)</span></span>&#123;</span><br><span class=\"line\">    a %= MOD; b %= MOD;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a * b % MOD;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ll n, m, k;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    k = <span class=\"built_in\">min</span>(n, m);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    ans += <span class=\"built_in\">mul</span>(n * n, m * m);</span><br><span class=\"line\">    ans -= <span class=\"built_in\">mul</span>(n * n, <span class=\"built_in\">cal</span>(m));</span><br><span class=\"line\">    ans -= <span class=\"built_in\">mul</span>(m * m, <span class=\"built_in\">cal</span>(n));</span><br><span class=\"line\">    ans += <span class=\"built_in\">mul</span>(<span class=\"built_in\">cal</span>(n), <span class=\"built_in\">cal</span>(m));</span><br><span class=\"line\">    ans = ((ans % MOD) + MOD) % MOD;</span><br><span class=\"line\">    ans -= <span class=\"built_in\">mul</span>(k, n * m);</span><br><span class=\"line\">    ans += <span class=\"built_in\">mul</span>(n, <span class=\"built_in\">cal</span>(m, k));</span><br><span class=\"line\">    ans += <span class=\"built_in\">mul</span>(m, <span class=\"built_in\">cal</span>(n, k));</span><br><span class=\"line\">    ans -= <span class=\"built_in\">cal</span>(n, m, k);</span><br><span class=\"line\">    ans = ((ans % MOD) + MOD) % MOD;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Codeforces-1207-F","thumbnail":"/gallery/thumbnails/girl-pick.jpg","date":"2019-08-29T13:56:34.000Z","_content":"\n## 题目\n\n[题目链接](https://codeforces.com/contest/1207/problem/F)\n\n<!--more-->\n\n## 分析\n\n以前从来没有做过这种问法的题目，觉得很有意思。\n\n本来想的是可不可以把操作转化一下改到线段树上去，结果没有想到，好像也真的不行。\n\n然后就灵光一闪发现当询问的 $x$ ，比较大的时候暴力查询也是跑的飞快，于是就开始想大数据暴力查询。\n\n小数据可以发现直接维护一个二维数组 $sum[x][y]$ 表示答案。\n\n然后大小的分隔本来以为就是 $sqrt(5 \\cdot 10^5)$ ，但其实并不是，因为这道题目并不是传统意义上的**分块**。\n\n而是一种用空间换时间的方法，当 $x$ 比较大的时候我们很难去更新 $sum[x][y]$，也开不了那么大的空间。\n\n思考一下，假如分割点是 $p$，那么对于更新操作来说，因为我们需要更新所有的 $sum[x][y]$ 以便查询小数据。\n\n所以更新的复杂度就是：$O(p)$。\n\n对于查询操作来说：如果查询的 $x \\leq p$ ，那么我们可以直接输出答案也就是 $O(1)$。\n\n如果查询的 $ x > p$，那么我们可以暴力查询，复杂度是：$O(\\frac{5\\cdot 10^5}{x})$。具体复杂度是：$\\Omega(\\frac{5\\cdot 10^5}{p}) - O(1)$。\n\n分析一下 $p$ 取 300~1000 都是可以的。\n\n## 代码\n\n~~~c++\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 5e5 + 7;\n\nint a[MAXN];\nint sum[1001][1001];\nint main(int argc, char const *argv[])\n{\n\tint q;\n\tscanf(\"%d\", &q);\n\tint op, x, y;\n\twhile(q--){\n\t\tscanf(\"%d %d %d\", &op, &x, &y);\n\t\tif(op == 1){\n\t\t\ta[x] += y;\n\t\t\tfor(int i = 1; i <= 1000; ++i){\n\t\t\t\tsum[i][x%i] += y;\n\t\t\t}\n\t\t} else {\n\t\t\tif(x <= 1000){\n\t\t\t\tprintf(\"%d\\n\", sum[x][y]);\n\t\t\t} else {\n\t\t\t\tint res = 0;\n\t\t\t\twhile(y <= 500000){\n\t\t\t\t\tres += a[y];\n\t\t\t\t\ty += x;\n\t\t\t\t}\n\t\t\t\tprintf(\"%d\\n\", res);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n~~~\n\n","source":"_posts/Codeforces-1207-F.md","raw":"---\ntitle: Codeforces-1207-F\nthumbnail: /gallery/thumbnails/girl-pick.jpg\ndate: 2019-08-29 21:56:34\ntags: \n\t- 数据结构\ncategories: \n---\n\n## 题目\n\n[题目链接](https://codeforces.com/contest/1207/problem/F)\n\n<!--more-->\n\n## 分析\n\n以前从来没有做过这种问法的题目，觉得很有意思。\n\n本来想的是可不可以把操作转化一下改到线段树上去，结果没有想到，好像也真的不行。\n\n然后就灵光一闪发现当询问的 $x$ ，比较大的时候暴力查询也是跑的飞快，于是就开始想大数据暴力查询。\n\n小数据可以发现直接维护一个二维数组 $sum[x][y]$ 表示答案。\n\n然后大小的分隔本来以为就是 $sqrt(5 \\cdot 10^5)$ ，但其实并不是，因为这道题目并不是传统意义上的**分块**。\n\n而是一种用空间换时间的方法，当 $x$ 比较大的时候我们很难去更新 $sum[x][y]$，也开不了那么大的空间。\n\n思考一下，假如分割点是 $p$，那么对于更新操作来说，因为我们需要更新所有的 $sum[x][y]$ 以便查询小数据。\n\n所以更新的复杂度就是：$O(p)$。\n\n对于查询操作来说：如果查询的 $x \\leq p$ ，那么我们可以直接输出答案也就是 $O(1)$。\n\n如果查询的 $ x > p$，那么我们可以暴力查询，复杂度是：$O(\\frac{5\\cdot 10^5}{x})$。具体复杂度是：$\\Omega(\\frac{5\\cdot 10^5}{p}) - O(1)$。\n\n分析一下 $p$ 取 300~1000 都是可以的。\n\n## 代码\n\n~~~c++\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 5e5 + 7;\n\nint a[MAXN];\nint sum[1001][1001];\nint main(int argc, char const *argv[])\n{\n\tint q;\n\tscanf(\"%d\", &q);\n\tint op, x, y;\n\twhile(q--){\n\t\tscanf(\"%d %d %d\", &op, &x, &y);\n\t\tif(op == 1){\n\t\t\ta[x] += y;\n\t\t\tfor(int i = 1; i <= 1000; ++i){\n\t\t\t\tsum[i][x%i] += y;\n\t\t\t}\n\t\t} else {\n\t\t\tif(x <= 1000){\n\t\t\t\tprintf(\"%d\\n\", sum[x][y]);\n\t\t\t} else {\n\t\t\t\tint res = 0;\n\t\t\t\twhile(y <= 500000){\n\t\t\t\t\tres += a[y];\n\t\t\t\t\ty += x;\n\t\t\t\t}\n\t\t\t\tprintf(\"%d\\n\", res);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n~~~\n\n","slug":"Codeforces-1207-F","published":1,"updated":"2021-03-28T08:43:44.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hybz000d69kj76qbfcse","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><a href=\"https://codeforces.com/contest/1207/problem/F\">题目链接</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>以前从来没有做过这种问法的题目，觉得很有意思。</p>\n<p>本来想的是可不可以把操作转化一下改到线段树上去，结果没有想到，好像也真的不行。</p>\n<p>然后就灵光一闪发现当询问的 $x$ ，比较大的时候暴力查询也是跑的飞快，于是就开始想大数据暴力查询。</p>\n<p>小数据可以发现直接维护一个二维数组 $sum[x][y]$ 表示答案。</p>\n<p>然后大小的分隔本来以为就是 $sqrt(5 \\cdot 10^5)$ ，但其实并不是，因为这道题目并不是传统意义上的<strong>分块</strong>。</p>\n<p>而是一种用空间换时间的方法，当 $x$ 比较大的时候我们很难去更新 $sum[x][y]$，也开不了那么大的空间。</p>\n<p>思考一下，假如分割点是 $p$，那么对于更新操作来说，因为我们需要更新所有的 $sum[x][y]$ 以便查询小数据。</p>\n<p>所以更新的复杂度就是：$O(p)$。</p>\n<p>对于查询操作来说：如果查询的 $x \\leq p$ ，那么我们可以直接输出答案也就是 $O(1)$。</p>\n<p>如果查询的 $ x &gt; p$，那么我们可以暴力查询，复杂度是：$O(\\frac{5\\cdot 10^5}{x})$。具体复杂度是：$\\Omega(\\frac{5\\cdot 10^5}{p}) - O(1)$。</p>\n<p>分析一下 $p$ 取 300~1000 都是可以的。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">5e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[<span class=\"number\">1001</span>][<span class=\"number\">1001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> q;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> op, x, y;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;op, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\ta[x] += y;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000</span>; ++i)&#123;</span><br><span class=\"line\">\t\t\t\tsum[i][x%i] += y;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">1000</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, sum[x][y]);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(y &lt;= <span class=\"number\">500000</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tres += a[y];</span><br><span class=\"line\">\t\t\t\t\ty += x;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, res);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><a href=\"https://codeforces.com/contest/1207/problem/F\">题目链接</a></p>","more":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>以前从来没有做过这种问法的题目，觉得很有意思。</p>\n<p>本来想的是可不可以把操作转化一下改到线段树上去，结果没有想到，好像也真的不行。</p>\n<p>然后就灵光一闪发现当询问的 $x$ ，比较大的时候暴力查询也是跑的飞快，于是就开始想大数据暴力查询。</p>\n<p>小数据可以发现直接维护一个二维数组 $sum[x][y]$ 表示答案。</p>\n<p>然后大小的分隔本来以为就是 $sqrt(5 \\cdot 10^5)$ ，但其实并不是，因为这道题目并不是传统意义上的<strong>分块</strong>。</p>\n<p>而是一种用空间换时间的方法，当 $x$ 比较大的时候我们很难去更新 $sum[x][y]$，也开不了那么大的空间。</p>\n<p>思考一下，假如分割点是 $p$，那么对于更新操作来说，因为我们需要更新所有的 $sum[x][y]$ 以便查询小数据。</p>\n<p>所以更新的复杂度就是：$O(p)$。</p>\n<p>对于查询操作来说：如果查询的 $x \\leq p$ ，那么我们可以直接输出答案也就是 $O(1)$。</p>\n<p>如果查询的 $ x &gt; p$，那么我们可以暴力查询，复杂度是：$O(\\frac{5\\cdot 10^5}{x})$。具体复杂度是：$\\Omega(\\frac{5\\cdot 10^5}{p}) - O(1)$。</p>\n<p>分析一下 $p$ 取 300~1000 都是可以的。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">5e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[<span class=\"number\">1001</span>][<span class=\"number\">1001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> q;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> op, x, y;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;op, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t\ta[x] += y;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">1000</span>; ++i)&#123;</span><br><span class=\"line\">\t\t\t\tsum[i][x%i] += y;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">1000</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, sum[x][y]);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(y &lt;= <span class=\"number\">500000</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tres += a[y];</span><br><span class=\"line\">\t\t\t\t\ty += x;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, res);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Codeforces-568-G1","thumbnail":"/gallery/thumbnails/0_Kaero, Anton Fadeev_01.jpg","date":"2019-06-23T16:16:41.000Z","_content":"\n# 题目\n\n[hpuoj-74](https://hpuoj.com/problem/74/)\n\n[codeforces-568-G1](https://codeforces.com/contest/1185/problem/G1)\n\n<!--more-->\n\n# 题解\n\n两个题目都是状压DP，有一定的相似之处，放在一起写。\n\n## 第一题\n\n显然，对于每个宿舍楼内部的宿舍来说，当顺序固定了以后，可以简单的通过贪心得到最少抗议的人数。\n\n那么，我们的主要问题就变成了，求解宿舍楼安装空调最合适的顺序。\n\n定义$dp[sta]$表示状态为$sta$时的最少抗议人数，$cost[i][j]$表示第$i$幢寝室楼第$j$个空调的贪心值。\n\n那么我们可以这样更新：\n\n~~~pascal\nfor sta := 0 to (1<<n)-1 do\n\tcal = sta.count(1)\n\tfor  nex := 0 to n-1 do\n\t\tif (sta>>nex)&1\n\t\t\tthen continue\n\t\telse\n\t\t\tdp[sta|1<<nex] = min(dp[sta|1<<nex], dp[sta] + cost[nex][cal+1])\n~~~\n\n结果就是$dp[(1<<n)-1] $。\n\n这样更新的理由是：\n\n对于一个状态$sta$，用1表示宿舍楼已经被安排过位置了，0表示还没有安排，统计一下1的个数就能知道在这个状态下，下一个宿舍楼是第几个被装的，而且这个宿舍楼之前一定是没有装过。\n\n例如：\n\n$n = 4, sta = 1001$，下一个要装第三个宿舍楼，而二号、三号宿舍楼还没有装。\n\n因此可以更新到$sta = 1101, 1011$这两个状态。\n\n## 第二题\n\n### 方法一\n\n定义$dp[cap][sta][last]$表示当前总和为$cap$，状态为$sta$，最后一首歌的类型为$last$，然后直接维护更新就好了。\n\n时间复杂度：O(T\\*n\\*2^n)\n\n### 方法二\n\n定义$dp[sta][last]$表示当前状态为$sta$，最后一首歌的类型为$last$，进行一下更新：\n\n~~~pascal\nfor sta := 0 to (1<<n)-1 do\n\tfor i := 1 to n do\n\t\tif (sta>>i)&1\n\t\t\tthen continue\n\t\tfor type := 1 to 3 do\n\t\t\tif type == last[i]\n\t\t\t\tthen continue\n\t\t\tdp[sta|1<<(i-1)][last[i]] += dp[sta][type]\n~~~\n\n这样就能得到所有的情况，但是不一定每一种情况的$cap$都是$T$，所以我们在求和的时候进行判断：\n\n~~~pascal\nsum = 0\nfor sta := 0 to (1<<n)-1 do\n\tcap = 0\n\tfor i := 1 to n do\n\t\tif (sta>>i)&1\n\t\t\tthen\tcap += t[i]\n\tif cap == T\n\t\tthen\n\t\t\tfor type := 1 to 3 do\n\t\t\t\tsum += dp[sta][type]\n~~~\n\n时间复杂度：O(n\\*2^n)\n\n# 代码\n\n## 第一题\n\n~~~c++\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int > pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst int mod = 1e9 + 7;\nconst int MAXN = 2e5 + 7;\n\nint dp[1<<23];\nint f[23][2333];\nint a[23][23];\n\nint main(){\n    #ifndef ONLINE_JUDGE         \n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif \n    \n    int n, m;\n    cin >> n >> m;\n    for(int i = 1; i <= n; ++i){\n        for(int j = 1; j <= m; ++j){\n            cin >> f[i][j];\n        }\n        sort(f[i]+1, f[i]+1+m);\n    }\n    for(int i = 1; i <= n; ++i){\n        for(int j = 1; j <= n; ++j){\n            int cur = (j-1)*m + 1, res = 0;\n            for(int k = 1; k <= m; ++k){\n                if(f[i][k] >= cur){\n                    cur++;\n                } else res++;\n            }\n            a[i][j] = res;\n        }\n    }\n    memset(dp, 0x3f, sizeof dp);\n    dp[0] = 0;\n    function<int(int)> cal = [&](int x){\n        int res = 0;\n        while(x){\n            res += x&1;\n            x >>= 1;\n        }\n        return res;\n    };\n    for(int i = 0; i < (1<<n); ++i){\n        int cur = cal(i) + 1;\n        for(int j = 0; j < n; ++j){\n            if((i>>j)&1)    continue;\n            dp[i|1<<j] = min(dp[i|1<<j], dp[i] + a[j+1][cur]);\n        }\n    }\n    cout << dp[(1<<n)-1] << endl;\n    return 0;\n}\n~~~\n\n## 第二题\n\n### 方法一\n\n~~~c++\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int > pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst int mod = 1e9 + 7;\nconst int MAXN = 2e5 + 7;\n\nint t[16], g[16];\nint dp[226][1<<15][3];\nint main(){\n    #ifndef ONLINE_JUDGE         \n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif \n    \n    int n, m;\n    cin >> n >> m;\n    for(int i = 1; i <= n; ++i){\n        cin >> t[i] >> g[i];\n        g[i]--;\n    }\n    dp[0][0][0] = 1;\n    dp[0][0][1] = 1;\n    dp[0][0][2] = 1;\n    for(int i = 0; i <= m; ++i){\n        for(int j = 0; j < (1<<n); ++j){\n            for(int k = 0; k < n; ++k){\n                if((j>>k)&1)    continue;\n                if(i+t[k+1] > m)    continue;\n                for(int type = 0; type < 3; ++type){\n                    if(type == g[k+1])    continue;\n                    // cout << i+t[k+1] << ' ' << (j|1<<k) << ' ' << g[k+1] << endl;\n                    dp[i+t[k+1]][j|1<<k][g[k+1]] += dp[i][j][type];\n                    dp[i+t[k+1]][j|1<<k][g[k+1]] %= mod;\n                }\n            }\n        }\n    }\n    ll res = 0;\n    for(int i = 0; i < (1<<n); ++i){\n        for(int j = 0; j < 3; ++j){\n            res += dp[m][i][j];\n            res %= mod;\n        }\n    }\n    cout << res*qpow(2, mod-2, mod)%mod << endl;\n    return 0;\n}\n~~~\n\n\n\n### 方法二\n\n~~~c++\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int > pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst int mod = 1e9 + 7;\nconst int MAXN = 2e5 + 7;\n\nint t[16], g[16];\nint dp[1<<16][3];\nint main(){\n    #ifndef ONLINE_JUDGE         \n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif \n    \n    int n, m;\n    cin >> n >> m;\n    for(int i = 1; i <= n; ++i){\n        cin >> t[i] >> g[i];\n    }\n    dp[0][1] = dp[0][2] = dp[0][3] = 1;\n    for(int i = 0; i < (1<<n); ++i){\n        for(int j = 0; j < n; ++j){\n            if((i>>j)&1)    continue;\n            for(int k = 1; k <= 3; ++k){\n                if(k == g[j+1]) continue;\n                dp[i|1<<j][g[j+1]] += dp[i][k];\n                dp[i|1<<j][g[j+1]] %= mod;\n            }\n        }\n    }\n    ll res = 0;\n    for(int i = 0; i < (1<<n); ++i){\n        for(int j = 1; j <= 3; ++j){\n            int tmp = 0;\n            for(int k = 0; k < n; ++k){\n                if((i>>k)&1){\n                    tmp += t[k+1];\n                }\n            }\n            if(tmp == m){\n                res += dp[i][j];\n                res %= mod;\n            }\n        }\n    }\n    cout << res*qpow(2, mod-2, mod)%mod << endl;\n    return 0;\n}\n~~~\n\n","source":"_posts/Codeforces-568-G1.md","raw":"---\ntitle: Codeforces-568-G1\nthumbnail: /gallery/thumbnails/0_Kaero, Anton Fadeev_01.jpg\ndate: 2019-06-24 00:16:41\ntags: \n    - 动态规划\ncategories: \n---\n\n# 题目\n\n[hpuoj-74](https://hpuoj.com/problem/74/)\n\n[codeforces-568-G1](https://codeforces.com/contest/1185/problem/G1)\n\n<!--more-->\n\n# 题解\n\n两个题目都是状压DP，有一定的相似之处，放在一起写。\n\n## 第一题\n\n显然，对于每个宿舍楼内部的宿舍来说，当顺序固定了以后，可以简单的通过贪心得到最少抗议的人数。\n\n那么，我们的主要问题就变成了，求解宿舍楼安装空调最合适的顺序。\n\n定义$dp[sta]$表示状态为$sta$时的最少抗议人数，$cost[i][j]$表示第$i$幢寝室楼第$j$个空调的贪心值。\n\n那么我们可以这样更新：\n\n~~~pascal\nfor sta := 0 to (1<<n)-1 do\n\tcal = sta.count(1)\n\tfor  nex := 0 to n-1 do\n\t\tif (sta>>nex)&1\n\t\t\tthen continue\n\t\telse\n\t\t\tdp[sta|1<<nex] = min(dp[sta|1<<nex], dp[sta] + cost[nex][cal+1])\n~~~\n\n结果就是$dp[(1<<n)-1] $。\n\n这样更新的理由是：\n\n对于一个状态$sta$，用1表示宿舍楼已经被安排过位置了，0表示还没有安排，统计一下1的个数就能知道在这个状态下，下一个宿舍楼是第几个被装的，而且这个宿舍楼之前一定是没有装过。\n\n例如：\n\n$n = 4, sta = 1001$，下一个要装第三个宿舍楼，而二号、三号宿舍楼还没有装。\n\n因此可以更新到$sta = 1101, 1011$这两个状态。\n\n## 第二题\n\n### 方法一\n\n定义$dp[cap][sta][last]$表示当前总和为$cap$，状态为$sta$，最后一首歌的类型为$last$，然后直接维护更新就好了。\n\n时间复杂度：O(T\\*n\\*2^n)\n\n### 方法二\n\n定义$dp[sta][last]$表示当前状态为$sta$，最后一首歌的类型为$last$，进行一下更新：\n\n~~~pascal\nfor sta := 0 to (1<<n)-1 do\n\tfor i := 1 to n do\n\t\tif (sta>>i)&1\n\t\t\tthen continue\n\t\tfor type := 1 to 3 do\n\t\t\tif type == last[i]\n\t\t\t\tthen continue\n\t\t\tdp[sta|1<<(i-1)][last[i]] += dp[sta][type]\n~~~\n\n这样就能得到所有的情况，但是不一定每一种情况的$cap$都是$T$，所以我们在求和的时候进行判断：\n\n~~~pascal\nsum = 0\nfor sta := 0 to (1<<n)-1 do\n\tcap = 0\n\tfor i := 1 to n do\n\t\tif (sta>>i)&1\n\t\t\tthen\tcap += t[i]\n\tif cap == T\n\t\tthen\n\t\t\tfor type := 1 to 3 do\n\t\t\t\tsum += dp[sta][type]\n~~~\n\n时间复杂度：O(n\\*2^n)\n\n# 代码\n\n## 第一题\n\n~~~c++\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int > pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst int mod = 1e9 + 7;\nconst int MAXN = 2e5 + 7;\n\nint dp[1<<23];\nint f[23][2333];\nint a[23][23];\n\nint main(){\n    #ifndef ONLINE_JUDGE         \n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif \n    \n    int n, m;\n    cin >> n >> m;\n    for(int i = 1; i <= n; ++i){\n        for(int j = 1; j <= m; ++j){\n            cin >> f[i][j];\n        }\n        sort(f[i]+1, f[i]+1+m);\n    }\n    for(int i = 1; i <= n; ++i){\n        for(int j = 1; j <= n; ++j){\n            int cur = (j-1)*m + 1, res = 0;\n            for(int k = 1; k <= m; ++k){\n                if(f[i][k] >= cur){\n                    cur++;\n                } else res++;\n            }\n            a[i][j] = res;\n        }\n    }\n    memset(dp, 0x3f, sizeof dp);\n    dp[0] = 0;\n    function<int(int)> cal = [&](int x){\n        int res = 0;\n        while(x){\n            res += x&1;\n            x >>= 1;\n        }\n        return res;\n    };\n    for(int i = 0; i < (1<<n); ++i){\n        int cur = cal(i) + 1;\n        for(int j = 0; j < n; ++j){\n            if((i>>j)&1)    continue;\n            dp[i|1<<j] = min(dp[i|1<<j], dp[i] + a[j+1][cur]);\n        }\n    }\n    cout << dp[(1<<n)-1] << endl;\n    return 0;\n}\n~~~\n\n## 第二题\n\n### 方法一\n\n~~~c++\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int > pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst int mod = 1e9 + 7;\nconst int MAXN = 2e5 + 7;\n\nint t[16], g[16];\nint dp[226][1<<15][3];\nint main(){\n    #ifndef ONLINE_JUDGE         \n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif \n    \n    int n, m;\n    cin >> n >> m;\n    for(int i = 1; i <= n; ++i){\n        cin >> t[i] >> g[i];\n        g[i]--;\n    }\n    dp[0][0][0] = 1;\n    dp[0][0][1] = 1;\n    dp[0][0][2] = 1;\n    for(int i = 0; i <= m; ++i){\n        for(int j = 0; j < (1<<n); ++j){\n            for(int k = 0; k < n; ++k){\n                if((j>>k)&1)    continue;\n                if(i+t[k+1] > m)    continue;\n                for(int type = 0; type < 3; ++type){\n                    if(type == g[k+1])    continue;\n                    // cout << i+t[k+1] << ' ' << (j|1<<k) << ' ' << g[k+1] << endl;\n                    dp[i+t[k+1]][j|1<<k][g[k+1]] += dp[i][j][type];\n                    dp[i+t[k+1]][j|1<<k][g[k+1]] %= mod;\n                }\n            }\n        }\n    }\n    ll res = 0;\n    for(int i = 0; i < (1<<n); ++i){\n        for(int j = 0; j < 3; ++j){\n            res += dp[m][i][j];\n            res %= mod;\n        }\n    }\n    cout << res*qpow(2, mod-2, mod)%mod << endl;\n    return 0;\n}\n~~~\n\n\n\n### 方法二\n\n~~~c++\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int > pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst int mod = 1e9 + 7;\nconst int MAXN = 2e5 + 7;\n\nint t[16], g[16];\nint dp[1<<16][3];\nint main(){\n    #ifndef ONLINE_JUDGE         \n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif \n    \n    int n, m;\n    cin >> n >> m;\n    for(int i = 1; i <= n; ++i){\n        cin >> t[i] >> g[i];\n    }\n    dp[0][1] = dp[0][2] = dp[0][3] = 1;\n    for(int i = 0; i < (1<<n); ++i){\n        for(int j = 0; j < n; ++j){\n            if((i>>j)&1)    continue;\n            for(int k = 1; k <= 3; ++k){\n                if(k == g[j+1]) continue;\n                dp[i|1<<j][g[j+1]] += dp[i][k];\n                dp[i|1<<j][g[j+1]] %= mod;\n            }\n        }\n    }\n    ll res = 0;\n    for(int i = 0; i < (1<<n); ++i){\n        for(int j = 1; j <= 3; ++j){\n            int tmp = 0;\n            for(int k = 0; k < n; ++k){\n                if((i>>k)&1){\n                    tmp += t[k+1];\n                }\n            }\n            if(tmp == m){\n                res += dp[i][j];\n                res %= mod;\n            }\n        }\n    }\n    cout << res*qpow(2, mod-2, mod)%mod << endl;\n    return 0;\n}\n~~~\n\n","slug":"Codeforces-568-G1","published":1,"updated":"2021-03-28T08:43:21.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyc0000h69kj2znmgo2x","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://hpuoj.com/problem/74/\">hpuoj-74</a></p>\n<p><a href=\"https://codeforces.com/contest/1185/problem/G1\">codeforces-568-G1</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>两个题目都是状压DP，有一定的相似之处，放在一起写。</p>\n<h2 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h2><p>显然，对于每个宿舍楼内部的宿舍来说，当顺序固定了以后，可以简单的通过贪心得到最少抗议的人数。</p>\n<p>那么，我们的主要问题就变成了，求解宿舍楼安装空调最合适的顺序。</p>\n<p>定义$dp[sta]$表示状态为$sta$时的最少抗议人数，$cost[i][j]$表示第$i$幢寝室楼第$j$个空调的贪心值。</p>\n<p>那么我们可以这样更新：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> sta := <span class=\"number\">0</span> <span class=\"keyword\">to</span> (<span class=\"number\">1</span>&lt;&lt;n)-<span class=\"number\">1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\tcal = sta.count(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>  nex := <span class=\"number\">0</span> <span class=\"keyword\">to</span> n-<span class=\"number\">1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sta&gt;&gt;nex)<span class=\"number\">&amp;1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">then</span> <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tdp[sta|1&lt;&lt;nex] = min(dp[sta|1&lt;&lt;nex], dp[sta] + cost[nex][cal+1])</span><br></pre></td></tr></table></figure>\n\n<p>结果就是$dp[(1&lt;&lt;n)-1] $。</p>\n<p>这样更新的理由是：</p>\n<p>对于一个状态$sta$，用1表示宿舍楼已经被安排过位置了，0表示还没有安排，统计一下1的个数就能知道在这个状态下，下一个宿舍楼是第几个被装的，而且这个宿舍楼之前一定是没有装过。</p>\n<p>例如：</p>\n<p>$n = 4, sta = 1001$，下一个要装第三个宿舍楼，而二号、三号宿舍楼还没有装。</p>\n<p>因此可以更新到$sta = 1101, 1011$这两个状态。</p>\n<h2 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>定义$dp[cap][sta][last]$表示当前总和为$cap$，状态为$sta$，最后一首歌的类型为$last$，然后直接维护更新就好了。</p>\n<p>时间复杂度：O(T*n*2^n)</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>定义$dp[sta][last]$表示当前状态为$sta$，最后一首歌的类型为$last$，进行一下更新：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> sta := <span class=\"number\">0</span> <span class=\"keyword\">to</span> (<span class=\"number\">1</span>&lt;&lt;n)-<span class=\"number\">1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span> <span class=\"keyword\">to</span> n <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sta&gt;&gt;i)<span class=\"number\">&amp;1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">then</span> <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> <span class=\"keyword\">type</span> := <span class=\"number\">1</span> <span class=\"keyword\">to</span> <span class=\"number\">3</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">type</span> == last[i]</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">then</span> <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\tdp[sta|1&lt;&lt;(i-1)][last[i]] += dp[sta][type]</span><br></pre></td></tr></table></figure>\n\n<p>这样就能得到所有的情况，但是不一定每一种情况的$cap$都是$T$，所以我们在求和的时候进行判断：</p>\n<figure class=\"highlight pascal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> sta := <span class=\"number\">0</span> <span class=\"keyword\">to</span> (<span class=\"number\">1</span>&lt;&lt;n)-<span class=\"number\">1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\tcap = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span> <span class=\"keyword\">to</span> n <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sta&gt;&gt;i)<span class=\"number\">&amp;1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">then</span>\tcap += t[i]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cap == T</span><br><span class=\"line\">\t\t<span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> <span class=\"keyword\">type</span> := <span class=\"number\">1</span> <span class=\"keyword\">to</span> <span class=\"number\">3</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t\tsum += dp[sta][<span class=\"keyword\">type</span>]</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：O(n*2^n)</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"第一题-1\"><a href=\"#第一题-1\" class=\"headerlink\" title=\"第一题\"></a>第一题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span> &gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">23</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">23</span>][<span class=\"number\">2333</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">23</span>][<span class=\"number\">23</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE         </span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j)&#123;</span><br><span class=\"line\">            cin &gt;&gt; f[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(f[i]+<span class=\"number\">1</span>, f[i]+<span class=\"number\">1</span>+m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cur = (j<span class=\"number\">-1</span>)*m + <span class=\"number\">1</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= m; ++k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(f[i][k] &gt;= cur)&#123;</span><br><span class=\"line\">                    cur++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> res++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            a[i][j] = res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> dp);</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    function&lt;<span class=\"built_in\"><span class=\"keyword\">int</span></span>(<span class=\"keyword\">int</span>)&gt; cal = [&amp;](<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x)&#123;</span><br><span class=\"line\">            res += x&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">            x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = <span class=\"built_in\">cal</span>(i) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i&gt;&gt;j)&amp;<span class=\"number\">1</span>)    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            dp[i|<span class=\"number\">1</span>&lt;&lt;j] = <span class=\"built_in\">min</span>(dp[i|<span class=\"number\">1</span>&lt;&lt;j], dp[i] + a[j+<span class=\"number\">1</span>][cur]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; dp[(<span class=\"number\">1</span>&lt;&lt;n)<span class=\"number\">-1</span>] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二题-1\"><a href=\"#第二题-1\" class=\"headerlink\" title=\"第二题\"></a>第二题</h2><h3 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span> &gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> t[<span class=\"number\">16</span>], g[<span class=\"number\">16</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">226</span>][<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE         </span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        cin &gt;&gt; t[i] &gt;&gt; g[i];</span><br><span class=\"line\">        g[i]--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (<span class=\"number\">1</span>&lt;&lt;n); ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((j&gt;&gt;k)&amp;<span class=\"number\">1</span>)    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i+t[k+<span class=\"number\">1</span>] &gt; m)    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> type = <span class=\"number\">0</span>; type &lt; <span class=\"number\">3</span>; ++type)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(type == g[k+<span class=\"number\">1</span>])    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// cout &lt;&lt; i+t[k+1] &lt;&lt; &#x27; &#x27; &lt;&lt; (j|1&lt;&lt;k) &lt;&lt; &#x27; &#x27; &lt;&lt; g[k+1] &lt;&lt; endl;</span></span><br><span class=\"line\">                    dp[i+t[k+<span class=\"number\">1</span>]][j|<span class=\"number\">1</span>&lt;&lt;k][g[k+<span class=\"number\">1</span>]] += dp[i][j][type];</span><br><span class=\"line\">                    dp[i+t[k+<span class=\"number\">1</span>]][j|<span class=\"number\">1</span>&lt;&lt;k][g[k+<span class=\"number\">1</span>]] %= mod;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)&#123;</span><br><span class=\"line\">            res += dp[m][i][j];</span><br><span class=\"line\">            res %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res*qpow(2, mod-2, mod)%mod &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span> &gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> t[<span class=\"number\">16</span>], g[<span class=\"number\">16</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">16</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE         </span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        cin &gt;&gt; t[i] &gt;&gt; g[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = dp[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = dp[<span class=\"number\">0</span>][<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i&gt;&gt;j)&amp;<span class=\"number\">1</span>)    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">3</span>; ++k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(k == g[j+<span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                dp[i|<span class=\"number\">1</span>&lt;&lt;j][g[j+<span class=\"number\">1</span>]] += dp[i][k];</span><br><span class=\"line\">                dp[i|<span class=\"number\">1</span>&lt;&lt;j][g[j+<span class=\"number\">1</span>]] %= mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">3</span>; ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((i&gt;&gt;k)&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    tmp += t[k+<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp == m)&#123;</span><br><span class=\"line\">                res += dp[i][j];</span><br><span class=\"line\">                res %= mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res*qpow(2, mod-2, mod)%mod &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://hpuoj.com/problem/74/\">hpuoj-74</a></p>\n<p><a href=\"https://codeforces.com/contest/1185/problem/G1\">codeforces-568-G1</a></p>","more":"<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>两个题目都是状压DP，有一定的相似之处，放在一起写。</p>\n<h2 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h2><p>显然，对于每个宿舍楼内部的宿舍来说，当顺序固定了以后，可以简单的通过贪心得到最少抗议的人数。</p>\n<p>那么，我们的主要问题就变成了，求解宿舍楼安装空调最合适的顺序。</p>\n<p>定义$dp[sta]$表示状态为$sta$时的最少抗议人数，$cost[i][j]$表示第$i$幢寝室楼第$j$个空调的贪心值。</p>\n<p>那么我们可以这样更新：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> sta := <span class=\"number\">0</span> <span class=\"keyword\">to</span> (<span class=\"number\">1</span>&lt;&lt;n)-<span class=\"number\">1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\tcal = sta.count(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>  nex := <span class=\"number\">0</span> <span class=\"keyword\">to</span> n-<span class=\"number\">1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sta&gt;&gt;nex)<span class=\"number\">&amp;1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">then</span> <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tdp[sta|1&lt;&lt;nex] = min(dp[sta|1&lt;&lt;nex], dp[sta] + cost[nex][cal+1])</span><br></pre></td></tr></table></figure>\n\n<p>结果就是$dp[(1&lt;&lt;n)-1] $。</p>\n<p>这样更新的理由是：</p>\n<p>对于一个状态$sta$，用1表示宿舍楼已经被安排过位置了，0表示还没有安排，统计一下1的个数就能知道在这个状态下，下一个宿舍楼是第几个被装的，而且这个宿舍楼之前一定是没有装过。</p>\n<p>例如：</p>\n<p>$n = 4, sta = 1001$，下一个要装第三个宿舍楼，而二号、三号宿舍楼还没有装。</p>\n<p>因此可以更新到$sta = 1101, 1011$这两个状态。</p>\n<h2 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><p>定义$dp[cap][sta][last]$表示当前总和为$cap$，状态为$sta$，最后一首歌的类型为$last$，然后直接维护更新就好了。</p>\n<p>时间复杂度：O(T*n*2^n)</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><p>定义$dp[sta][last]$表示当前状态为$sta$，最后一首歌的类型为$last$，进行一下更新：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> sta := <span class=\"number\">0</span> <span class=\"keyword\">to</span> (<span class=\"number\">1</span>&lt;&lt;n)-<span class=\"number\">1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span> <span class=\"keyword\">to</span> n <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sta&gt;&gt;i)<span class=\"number\">&amp;1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">then</span> <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> <span class=\"keyword\">type</span> := <span class=\"number\">1</span> <span class=\"keyword\">to</span> <span class=\"number\">3</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"keyword\">type</span> == last[i]</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">then</span> <span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\tdp[sta|1&lt;&lt;(i-1)][last[i]] += dp[sta][type]</span><br></pre></td></tr></table></figure>\n\n<p>这样就能得到所有的情况，但是不一定每一种情况的$cap$都是$T$，所以我们在求和的时候进行判断：</p>\n<figure class=\"highlight pascal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> sta := <span class=\"number\">0</span> <span class=\"keyword\">to</span> (<span class=\"number\">1</span>&lt;&lt;n)-<span class=\"number\">1</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\tcap = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span> <span class=\"keyword\">to</span> n <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sta&gt;&gt;i)<span class=\"number\">&amp;1</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">then</span>\tcap += t[i]</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cap == T</span><br><span class=\"line\">\t\t<span class=\"keyword\">then</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> <span class=\"keyword\">type</span> := <span class=\"number\">1</span> <span class=\"keyword\">to</span> <span class=\"number\">3</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t\t\tsum += dp[sta][<span class=\"keyword\">type</span>]</span><br></pre></td></tr></table></figure>\n\n<p>时间复杂度：O(n*2^n)</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"第一题-1\"><a href=\"#第一题-1\" class=\"headerlink\" title=\"第一题\"></a>第一题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span> &gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">23</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">23</span>][<span class=\"number\">2333</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">23</span>][<span class=\"number\">23</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE         </span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j)&#123;</span><br><span class=\"line\">            cin &gt;&gt; f[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(f[i]+<span class=\"number\">1</span>, f[i]+<span class=\"number\">1</span>+m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> cur = (j<span class=\"number\">-1</span>)*m + <span class=\"number\">1</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= m; ++k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(f[i][k] &gt;= cur)&#123;</span><br><span class=\"line\">                    cur++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> res++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            a[i][j] = res;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> dp);</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    function&lt;<span class=\"built_in\"><span class=\"keyword\">int</span></span>(<span class=\"keyword\">int</span>)&gt; cal = [&amp;](<span class=\"keyword\">int</span> x)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x)&#123;</span><br><span class=\"line\">            res += x&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">            x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = <span class=\"built_in\">cal</span>(i) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i&gt;&gt;j)&amp;<span class=\"number\">1</span>)    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            dp[i|<span class=\"number\">1</span>&lt;&lt;j] = <span class=\"built_in\">min</span>(dp[i|<span class=\"number\">1</span>&lt;&lt;j], dp[i] + a[j+<span class=\"number\">1</span>][cur]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; dp[(<span class=\"number\">1</span>&lt;&lt;n)<span class=\"number\">-1</span>] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第二题-1\"><a href=\"#第二题-1\" class=\"headerlink\" title=\"第二题\"></a>第二题</h2><h3 id=\"方法一-1\"><a href=\"#方法一-1\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span> &gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> t[<span class=\"number\">16</span>], g[<span class=\"number\">16</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">226</span>][<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">15</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE         </span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        cin &gt;&gt; t[i] &gt;&gt; g[i];</span><br><span class=\"line\">        g[i]--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; (<span class=\"number\">1</span>&lt;&lt;n); ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((j&gt;&gt;k)&amp;<span class=\"number\">1</span>)    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i+t[k+<span class=\"number\">1</span>] &gt; m)    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> type = <span class=\"number\">0</span>; type &lt; <span class=\"number\">3</span>; ++type)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(type == g[k+<span class=\"number\">1</span>])    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"comment\">// cout &lt;&lt; i+t[k+1] &lt;&lt; &#x27; &#x27; &lt;&lt; (j|1&lt;&lt;k) &lt;&lt; &#x27; &#x27; &lt;&lt; g[k+1] &lt;&lt; endl;</span></span><br><span class=\"line\">                    dp[i+t[k+<span class=\"number\">1</span>]][j|<span class=\"number\">1</span>&lt;&lt;k][g[k+<span class=\"number\">1</span>]] += dp[i][j][type];</span><br><span class=\"line\">                    dp[i+t[k+<span class=\"number\">1</span>]][j|<span class=\"number\">1</span>&lt;&lt;k][g[k+<span class=\"number\">1</span>]] %= mod;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j)&#123;</span><br><span class=\"line\">            res += dp[m][i][j];</span><br><span class=\"line\">            res %= mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res*qpow(2, mod-2, mod)%mod &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方法二-1\"><a href=\"#方法二-1\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span> &gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> t[<span class=\"number\">16</span>], g[<span class=\"number\">16</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">16</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE         </span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        cin &gt;&gt; t[i] &gt;&gt; g[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = dp[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = dp[<span class=\"number\">0</span>][<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i&gt;&gt;j)&amp;<span class=\"number\">1</span>)    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt;= <span class=\"number\">3</span>; ++k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(k == g[j+<span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                dp[i|<span class=\"number\">1</span>&lt;&lt;j][g[j+<span class=\"number\">1</span>]] += dp[i][k];</span><br><span class=\"line\">                dp[i|<span class=\"number\">1</span>&lt;&lt;j][g[j+<span class=\"number\">1</span>]] %= mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span>&lt;&lt;n); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= <span class=\"number\">3</span>; ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; ++k)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((i&gt;&gt;k)&amp;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    tmp += t[k+<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp == m)&#123;</span><br><span class=\"line\">                res += dp[i][j];</span><br><span class=\"line\">                res %= mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res*qpow(2, mod-2, mod)%mod &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Codeforces-622-F","thumbnail":"/gallery/thumbnails/Lagrange_polynomial.svg","date":"2019-06-18T02:43:58.000Z","_content":"\n# 题目\n\n[F. The Sum of the k-th Powers](https://codeforces.com/contest/622/problem/F)\n\n<!--more-->\n\n# 题解\n\n设$F(n) =  \\sum _{i=1}^n{i^k} $，当k很小的时候，可以找到一些通项公式，比如：当$k= 1 $时，$F(n) = \\frac{(n \\cdot (n+1))}{2} $，当$k=2 $时，$F(n)= \\frac{n \\cdot \\ (2 \\cdot n + 1) \\cdot (n+1)}{6} $。\n\n可以发现，$F(n)$实际上是一个$k+1 $次多项式函数。\n\n因此，我们就可以使用拉格朗日插值法来推导了。\n\n确定一个k+1次多项式需要k+2个点，我们很容易通过打表得到$F(1)  \\sim F(k+2)$的值。\n\n然后代入插值公式：\n\n$$F(n) = \\sum_{i=1}^{k+2}F(i) \\times P(i) $$\n\n$$P(i) = \\prod_{j=1, j \\neq i}^{k+2}\\frac{n-j}{i-j}$$\n\n所以\n\n$$F(n) = \\sum_{i=1}^{k+2}F(i) \\times \\prod_{j=1, j \\neq i}^{k+2}\\frac{n-j}{i-j} \\\\ = \\sum_{i=1}^{k+2}F(i) \\times \\frac{\\prod_{j=1, j \\neq i}^{k+2}n-j}{\\prod_{j=1, j \\neq i}^{k+2}{i-j}}$$\n\n但是这个公式的复杂度时$O(k^2)$的，我们再优化一下。\n\n设$T = \\prod_{j=1}^{k+2}{n-j}$，则\n\n$$\\prod_{j=1, j \\neq i}^{k+2}n-j = \\frac{T}{n-i}$$\n\n对于$\\prod_{j=1, j \\neq i}^{k+2}{i-j}$，我们将它分成$i\\lt j$和$i\\gt j$两部分来考虑，\n\n$$\\prod_{j=1, j \\neq i}^{k+2}{i-j} = (i-1)!\\times(k+2-i)!\\times (-1)^{k+2-i}$$\n\n带入原式，得：\n\n$$F(n) = \\sum_{i=1}^{k+2}(F(i)\\times\\frac{T}{n-i}\\times\\frac{1}{(i-1)!\\times(k+2-i)!\\times (-1)^{k+2-i}})$$\n\n至此，我们可以通过打表的方式，在$O(k)$时间内得到$F(n)$了。\n\n## 注意\n\n当$n \\leq k+2$时，该公式时不适用的，因为$T$会为$0$。\n\n但是我们可以直接通过$F(n) =  \\sum _{i=1}^n{i^k} $计算。\n\n# 代码\n\n~~~c++\n/*---------------------------------\n\n @Author:   Dicer\n @DateTime: 2019-06-18 10:16:23\n\n---------------------------------*/\n\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst double eps = 1e-8;\nconst int INF = 0x3f3f3f3f;\nconst int mod = 1e9+7;\nconst int MAXN = 1e6 + 7;\n\nll F[MAXN], fac[MAXN], T;\nint n, k;\n\nll inv(ll x){\n\treturn qpow(x, mod-2, mod);\n}\nvoid init(){\n\tF[1] = 1;\n\tfor(int i = 2; i <= k+2; ++i){\n\t\tF[i] = F[i-1] + qpow(i, k, mod);\n\t\tF[i] %= mod;\n\t}\n\tfac[0] = 1;\n\tfor(int i = 1; i <= k+2; ++i){\n\t\tfac[i] = fac[i-1] * i;\n\t\tfac[i] %= mod;\n\t}\n\tT = 1;\n\tfor(int i = 1; i <= k+2; ++i){\n\t\tT *= n - i;\n\t\tT %= mod;\n\t}\n}\nvoid solve(){\n\tif(n <= k+2){\n\t\tll res = 0;\n\t\tfor(int i = 1; i <= n; ++i){\n\t\t\tres += qpow(i, k, mod);\n\t\t\tres %= mod;\n\t\t}\n\t\tcout << res << endl;\n\t\treturn;\n\t}\n\tll res = 0;\n\tfor(int i = 1; i <= k+2; ++i){\n\t\tres += F[i] * T % mod * inv(n-i) % mod * inv(fac[i-1]) %mod * inv(fac[k+2-i]) %mod * ((k-i)%2 == 0?1:-1) %mod;\n\t\tres += mod;\n\t\tres %= mod;\n\t}\n\tcout << res << endl;\n}\nint main(int argc, char const *argv[])\n{\n\tcin >> n >> k;\n\tinit();\n\tsolve();\n\treturn 0;\n}\n~~~\n\n### Reference\n\n1. 本文题图由User:Glosser.ca - Self-made, based on Image:Lagrangepolys.png，CC BY-SA 3.0，https://commons.wikimedia.org/w/index.php?curid=5538041\n2. [参考文章](http://blog.lightning34.cn/?p=115)\n3. [LaTex](http://www.mohu.org/info/symbols/symbols.htm)","source":"_posts/Codeforces-622-F.md","raw":"---\ntitle: Codeforces-622-F\nthumbnail: /gallery/thumbnails/Lagrange_polynomial.svg\ndate: 2019-06-18 10:43:58\ntags: \n\t- 拉格朗日插值法\n\t- 数论\ncategories: \n---\n\n# 题目\n\n[F. The Sum of the k-th Powers](https://codeforces.com/contest/622/problem/F)\n\n<!--more-->\n\n# 题解\n\n设$F(n) =  \\sum _{i=1}^n{i^k} $，当k很小的时候，可以找到一些通项公式，比如：当$k= 1 $时，$F(n) = \\frac{(n \\cdot (n+1))}{2} $，当$k=2 $时，$F(n)= \\frac{n \\cdot \\ (2 \\cdot n + 1) \\cdot (n+1)}{6} $。\n\n可以发现，$F(n)$实际上是一个$k+1 $次多项式函数。\n\n因此，我们就可以使用拉格朗日插值法来推导了。\n\n确定一个k+1次多项式需要k+2个点，我们很容易通过打表得到$F(1)  \\sim F(k+2)$的值。\n\n然后代入插值公式：\n\n$$F(n) = \\sum_{i=1}^{k+2}F(i) \\times P(i) $$\n\n$$P(i) = \\prod_{j=1, j \\neq i}^{k+2}\\frac{n-j}{i-j}$$\n\n所以\n\n$$F(n) = \\sum_{i=1}^{k+2}F(i) \\times \\prod_{j=1, j \\neq i}^{k+2}\\frac{n-j}{i-j} \\\\ = \\sum_{i=1}^{k+2}F(i) \\times \\frac{\\prod_{j=1, j \\neq i}^{k+2}n-j}{\\prod_{j=1, j \\neq i}^{k+2}{i-j}}$$\n\n但是这个公式的复杂度时$O(k^2)$的，我们再优化一下。\n\n设$T = \\prod_{j=1}^{k+2}{n-j}$，则\n\n$$\\prod_{j=1, j \\neq i}^{k+2}n-j = \\frac{T}{n-i}$$\n\n对于$\\prod_{j=1, j \\neq i}^{k+2}{i-j}$，我们将它分成$i\\lt j$和$i\\gt j$两部分来考虑，\n\n$$\\prod_{j=1, j \\neq i}^{k+2}{i-j} = (i-1)!\\times(k+2-i)!\\times (-1)^{k+2-i}$$\n\n带入原式，得：\n\n$$F(n) = \\sum_{i=1}^{k+2}(F(i)\\times\\frac{T}{n-i}\\times\\frac{1}{(i-1)!\\times(k+2-i)!\\times (-1)^{k+2-i}})$$\n\n至此，我们可以通过打表的方式，在$O(k)$时间内得到$F(n)$了。\n\n## 注意\n\n当$n \\leq k+2$时，该公式时不适用的，因为$T$会为$0$。\n\n但是我们可以直接通过$F(n) =  \\sum _{i=1}^n{i^k} $计算。\n\n# 代码\n\n~~~c++\n/*---------------------------------\n\n @Author:   Dicer\n @DateTime: 2019-06-18 10:16:23\n\n---------------------------------*/\n\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst double eps = 1e-8;\nconst int INF = 0x3f3f3f3f;\nconst int mod = 1e9+7;\nconst int MAXN = 1e6 + 7;\n\nll F[MAXN], fac[MAXN], T;\nint n, k;\n\nll inv(ll x){\n\treturn qpow(x, mod-2, mod);\n}\nvoid init(){\n\tF[1] = 1;\n\tfor(int i = 2; i <= k+2; ++i){\n\t\tF[i] = F[i-1] + qpow(i, k, mod);\n\t\tF[i] %= mod;\n\t}\n\tfac[0] = 1;\n\tfor(int i = 1; i <= k+2; ++i){\n\t\tfac[i] = fac[i-1] * i;\n\t\tfac[i] %= mod;\n\t}\n\tT = 1;\n\tfor(int i = 1; i <= k+2; ++i){\n\t\tT *= n - i;\n\t\tT %= mod;\n\t}\n}\nvoid solve(){\n\tif(n <= k+2){\n\t\tll res = 0;\n\t\tfor(int i = 1; i <= n; ++i){\n\t\t\tres += qpow(i, k, mod);\n\t\t\tres %= mod;\n\t\t}\n\t\tcout << res << endl;\n\t\treturn;\n\t}\n\tll res = 0;\n\tfor(int i = 1; i <= k+2; ++i){\n\t\tres += F[i] * T % mod * inv(n-i) % mod * inv(fac[i-1]) %mod * inv(fac[k+2-i]) %mod * ((k-i)%2 == 0?1:-1) %mod;\n\t\tres += mod;\n\t\tres %= mod;\n\t}\n\tcout << res << endl;\n}\nint main(int argc, char const *argv[])\n{\n\tcin >> n >> k;\n\tinit();\n\tsolve();\n\treturn 0;\n}\n~~~\n\n### Reference\n\n1. 本文题图由User:Glosser.ca - Self-made, based on Image:Lagrangepolys.png，CC BY-SA 3.0，https://commons.wikimedia.org/w/index.php?curid=5538041\n2. [参考文章](http://blog.lightning34.cn/?p=115)\n3. [LaTex](http://www.mohu.org/info/symbols/symbols.htm)","slug":"Codeforces-622-F","published":1,"updated":"2021-03-28T08:43:33.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyc1000j69kj1w9y9a0n","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://codeforces.com/contest/622/problem/F\">F. The Sum of the k-th Powers</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>设$F(n) =  \\sum _{i=1}^n{i^k} $，当k很小的时候，可以找到一些通项公式，比如：当$k= 1 $时，$F(n) = \\frac{(n \\cdot (n+1))}{2} $，当$k=2 $时，$F(n)= \\frac{n \\cdot \\ (2 \\cdot n + 1) \\cdot (n+1)}{6} $。</p>\n<p>可以发现，$F(n)$实际上是一个$k+1 $次多项式函数。</p>\n<p>因此，我们就可以使用拉格朗日插值法来推导了。</p>\n<p>确定一个k+1次多项式需要k+2个点，我们很容易通过打表得到$F(1)  \\sim F(k+2)$的值。</p>\n<p>然后代入插值公式：</p>\n<p>$$F(n) = \\sum_{i=1}^{k+2}F(i) \\times P(i) $$</p>\n<p>$$P(i) = \\prod_{j=1, j \\neq i}^{k+2}\\frac{n-j}{i-j}$$</p>\n<p>所以</p>\n<p>$$F(n) = \\sum_{i=1}^{k+2}F(i) \\times \\prod_{j=1, j \\neq i}^{k+2}\\frac{n-j}{i-j} \\ = \\sum_{i=1}^{k+2}F(i) \\times \\frac{\\prod_{j=1, j \\neq i}^{k+2}n-j}{\\prod_{j=1, j \\neq i}^{k+2}{i-j}}$$</p>\n<p>但是这个公式的复杂度时$O(k^2)$的，我们再优化一下。</p>\n<p>设$T = \\prod_{j=1}^{k+2}{n-j}$，则</p>\n<p>$$\\prod_{j=1, j \\neq i}^{k+2}n-j = \\frac{T}{n-i}$$</p>\n<p>对于$\\prod_{j=1, j \\neq i}^{k+2}{i-j}$，我们将它分成$i\\lt j$和$i\\gt j$两部分来考虑，</p>\n<p>$$\\prod_{j=1, j \\neq i}^{k+2}{i-j} = (i-1)!\\times(k+2-i)!\\times (-1)^{k+2-i}$$</p>\n<p>带入原式，得：</p>\n<p>$$F(n) = \\sum_{i=1}^{k+2}(F(i)\\times\\frac{T}{n-i}\\times\\frac{1}{(i-1)!\\times(k+2-i)!\\times (-1)^{k+2-i}})$$</p>\n<p>至此，我们可以通过打表的方式，在$O(k)$时间内得到$F(n)$了。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>当$n \\leq k+2$时，该公式时不适用的，因为$T$会为$0$。</p>\n<p>但是我们可以直接通过$F(n) =  \\sum _{i=1}^n{i^k} $计算。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*---------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> @Author:   Dicer</span></span><br><span class=\"line\"><span class=\"comment\"> @DateTime: 2019-06-18 10:16:23</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">---------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e6</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll F[MAXN], fac[MAXN], T;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">inv</span><span class=\"params\">(ll x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">qpow</span>(x, mod<span class=\"number\">-2</span>, mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tF[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= k+<span class=\"number\">2</span>; ++i)&#123;</span><br><span class=\"line\">\t\tF[i] = F[i<span class=\"number\">-1</span>] + <span class=\"built_in\">qpow</span>(i, k, mod);</span><br><span class=\"line\">\t\tF[i] %= mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfac[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k+<span class=\"number\">2</span>; ++i)&#123;</span><br><span class=\"line\">\t\tfac[i] = fac[i<span class=\"number\">-1</span>] * i;</span><br><span class=\"line\">\t\tfac[i] %= mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tT = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k+<span class=\"number\">2</span>; ++i)&#123;</span><br><span class=\"line\">\t\tT *= n - i;</span><br><span class=\"line\">\t\tT %= mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n &lt;= k+<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\tll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">\t\t\tres += <span class=\"built_in\">qpow</span>(i, k, mod);</span><br><span class=\"line\">\t\t\tres %= mod;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k+<span class=\"number\">2</span>; ++i)&#123;</span><br><span class=\"line\">\t\tres += F[i] * T % mod * <span class=\"built_in\">inv</span>(n-i) % mod * <span class=\"built_in\">inv</span>(fac[i<span class=\"number\">-1</span>]) %mod * <span class=\"built_in\">inv</span>(fac[k+<span class=\"number\">2</span>-i]) %mod * ((k-i)%<span class=\"number\">2</span> == <span class=\"number\">0</span>?<span class=\"number\">1</span>:<span class=\"number\">-1</span>) %mod;</span><br><span class=\"line\">\t\tres += mod;</span><br><span class=\"line\">\t\tres %= mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li>本文题图由User:Glosser.ca - Self-made, based on Image:Lagrangepolys.png，CC BY-SA 3.0，<a href=\"https://commons.wikimedia.org/w/index.php?curid=5538041\">https://commons.wikimedia.org/w/index.php?curid=5538041</a></li>\n<li><a href=\"http://blog.lightning34.cn/?p=115\">参考文章</a></li>\n<li><a href=\"http://www.mohu.org/info/symbols/symbols.htm\">LaTex</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://codeforces.com/contest/622/problem/F\">F. The Sum of the k-th Powers</a></p>","more":"<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>设$F(n) =  \\sum _{i=1}^n{i^k} $，当k很小的时候，可以找到一些通项公式，比如：当$k= 1 $时，$F(n) = \\frac{(n \\cdot (n+1))}{2} $，当$k=2 $时，$F(n)= \\frac{n \\cdot \\ (2 \\cdot n + 1) \\cdot (n+1)}{6} $。</p>\n<p>可以发现，$F(n)$实际上是一个$k+1 $次多项式函数。</p>\n<p>因此，我们就可以使用拉格朗日插值法来推导了。</p>\n<p>确定一个k+1次多项式需要k+2个点，我们很容易通过打表得到$F(1)  \\sim F(k+2)$的值。</p>\n<p>然后代入插值公式：</p>\n<p>$$F(n) = \\sum_{i=1}^{k+2}F(i) \\times P(i) $$</p>\n<p>$$P(i) = \\prod_{j=1, j \\neq i}^{k+2}\\frac{n-j}{i-j}$$</p>\n<p>所以</p>\n<p>$$F(n) = \\sum_{i=1}^{k+2}F(i) \\times \\prod_{j=1, j \\neq i}^{k+2}\\frac{n-j}{i-j} \\ = \\sum_{i=1}^{k+2}F(i) \\times \\frac{\\prod_{j=1, j \\neq i}^{k+2}n-j}{\\prod_{j=1, j \\neq i}^{k+2}{i-j}}$$</p>\n<p>但是这个公式的复杂度时$O(k^2)$的，我们再优化一下。</p>\n<p>设$T = \\prod_{j=1}^{k+2}{n-j}$，则</p>\n<p>$$\\prod_{j=1, j \\neq i}^{k+2}n-j = \\frac{T}{n-i}$$</p>\n<p>对于$\\prod_{j=1, j \\neq i}^{k+2}{i-j}$，我们将它分成$i\\lt j$和$i\\gt j$两部分来考虑，</p>\n<p>$$\\prod_{j=1, j \\neq i}^{k+2}{i-j} = (i-1)!\\times(k+2-i)!\\times (-1)^{k+2-i}$$</p>\n<p>带入原式，得：</p>\n<p>$$F(n) = \\sum_{i=1}^{k+2}(F(i)\\times\\frac{T}{n-i}\\times\\frac{1}{(i-1)!\\times(k+2-i)!\\times (-1)^{k+2-i}})$$</p>\n<p>至此，我们可以通过打表的方式，在$O(k)$时间内得到$F(n)$了。</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>当$n \\leq k+2$时，该公式时不适用的，因为$T$会为$0$。</p>\n<p>但是我们可以直接通过$F(n) =  \\sum _{i=1}^n{i^k} $计算。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*---------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> @Author:   Dicer</span></span><br><span class=\"line\"><span class=\"comment\"> @DateTime: 2019-06-18 10:16:23</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">---------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e6</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll F[MAXN], fac[MAXN], T;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">inv</span><span class=\"params\">(ll x)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">qpow</span>(x, mod<span class=\"number\">-2</span>, mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tF[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= k+<span class=\"number\">2</span>; ++i)&#123;</span><br><span class=\"line\">\t\tF[i] = F[i<span class=\"number\">-1</span>] + <span class=\"built_in\">qpow</span>(i, k, mod);</span><br><span class=\"line\">\t\tF[i] %= mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfac[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k+<span class=\"number\">2</span>; ++i)&#123;</span><br><span class=\"line\">\t\tfac[i] = fac[i<span class=\"number\">-1</span>] * i;</span><br><span class=\"line\">\t\tfac[i] %= mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tT = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k+<span class=\"number\">2</span>; ++i)&#123;</span><br><span class=\"line\">\t\tT *= n - i;</span><br><span class=\"line\">\t\tT %= mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n &lt;= k+<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">\t\tll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">\t\t\tres += <span class=\"built_in\">qpow</span>(i, k, mod);</span><br><span class=\"line\">\t\t\tres %= mod;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tll res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k+<span class=\"number\">2</span>; ++i)&#123;</span><br><span class=\"line\">\t\tres += F[i] * T % mod * <span class=\"built_in\">inv</span>(n-i) % mod * <span class=\"built_in\">inv</span>(fac[i<span class=\"number\">-1</span>]) %mod * <span class=\"built_in\">inv</span>(fac[k+<span class=\"number\">2</span>-i]) %mod * ((k-i)%<span class=\"number\">2</span> == <span class=\"number\">0</span>?<span class=\"number\">1</span>:<span class=\"number\">-1</span>) %mod;</span><br><span class=\"line\">\t\tres += mod;</span><br><span class=\"line\">\t\tres %= mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">solve</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li>本文题图由User:Glosser.ca - Self-made, based on Image:Lagrangepolys.png，CC BY-SA 3.0，<a href=\"https://commons.wikimedia.org/w/index.php?curid=5538041\">https://commons.wikimedia.org/w/index.php?curid=5538041</a></li>\n<li><a href=\"http://blog.lightning34.cn/?p=115\">参考文章</a></li>\n<li><a href=\"http://www.mohu.org/info/symbols/symbols.htm\">LaTex</a></li>\n</ol>"},{"title":"2019-ICPC-南京网络赛","thumbnail":"/gallery/thumbnails/sylvain-sarrailh-wandering.jpg","date":"2019-09-05T05:27:06.000Z","_content":"\n# 题目\n\n[计蒜客](https://www.jisuanke.com/contest/3004?view=challenges)\n\n<!--more-->\n\n## A. The beautiful values of the palace\n\n知识点：坐标映射，离散化，树状数组，离线查询\n\n### 坐标映射\n\n找一下规律。（虽然我不太会找这个规律\n\n```cpp\nll get_int(int n, int x, int y){\n    x = x - n/2 - 1;\n    y = y - n/2 - 1;\n    ll t = max(abs(x), abs(y));\n    if(x >= y)  return 1ll * n * n - 4 * t * t - 2 * t - x - y;\n    else return 1ll * n * n - 4 * t * t + 2 * t + x + y;\n}\n```\n\n### 离散化和离线查询\n\n只离散化一维就行了，当然两个维度都离散化也是没有问题的。\n\n假设只离散化`x`轴，那么我们对建点和查询操作进行`x`优先排序，扫描`x`轴，当操作的`x`与当前枚举的`x`相同时进行操作，优先建点，然后查询。这样是为了保证顺序。\n\n查询的时候，相当于查询一个一维前缀和，用树状数组维护就可以了。\n\n~~~c++\n#include<bits/stdc++.h>\n#define rep(i, a, b)    for(int i = (a); i <= (int)(b); ++i)\n#define per(i, a, b)    for(int i = (a); i >= (int)(b); --i)\n#define debug(x)    cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN = 1e5 + 7;\nconst int MOD = 998244353;\n\nstruct node{\n    int x, y, id;\n    ll val;\n    friend bool operator <(const node &a, const node &b){\n        return a.x < b.x;\n    }\n}s[MAXN], need[MAXN * 4];\n\nstruct ask{\n    int a, b, c, d;\n}op[MAXN];\n\nll get_int(int n, int x, int y){\n    x = x - n/2 - 1;\n    y = y - n/2 - 1;\n    ll t = max(abs(x), abs(y));\n    if(x >= y)  return 1ll * n * n - 4 * t * t - 2 * t - x - y;\n    else return 1ll * n * n - 4 * t * t + 2 * t + x + y;\n}\n\nint get_val(ll val){\n    int ans = 0;\n    while(val){\n        ans += val%10;\n        val /= 10;\n    }\n    return ans;\n}\nstruct BIT {\n    int e[MAXN], n;\n    void clear(){rep(i, 0, n)    e[i] = 0;}\n    int lowbit(int x){return x & (-x);}\n    void add(int x, int v){\n        while(x <= n){\n            e[x] += v;\n            x += lowbit(x);\n        }\n    }\n    int get(int x){\n        int ans = 0;\n        while(x){\n            ans += e[x];\n            x -= lowbit(x);\n        }\n        return ans;\n    }\n}bit;\n\nint hx[MAXN * 10], hy[MAXN * 10];\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    while(T--){\n        int n, m, p;\n        scanf(\"%d %d %d\", &n, &m, &p);\n        vector<int> vx, vy;\n        rep(i, 1, m){\n            scanf(\"%d %d\", &s[i].x, &s[i].y);\n            s[i].val = get_val(get_int(n, s[i].x, s[i].y));\n            vx.push_back(s[i].x);\n            vy.push_back(s[i].y);\n        }\n        int x1, y1, x2, y2;\n        rep(i, 0, p-1){\n            scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n            vx.push_back(x1-1);\n            vx.push_back(x2);\n            vy.push_back(y1-1);\n            vy.push_back(y2);\n            need[i * 4 + 1] = node{x1-1, y1-1, i * 4 + 1};\n            need[i * 4 + 2] = node{x1-1, y2, i * 4 + 2};\n            need[i * 4 + 3] = node{x2, y1-1, i * 4 + 3};\n            need[i * 4 + 4] = node{x2, y2, i * 4 + 4};\n            op[i] = ask{i*4 + 1, i*4 + 2, i*4 + 3, i*4 + 4};\n        }\n        sort(vx.begin(), vx.end());\n        vx.erase(unique(vx.begin(), vx.end()), vx.end());\n        sort(vy.begin(), vy.end());\n        vy.erase(unique(vy.begin(), vy.end()), vy.end());\n        rep(i, 0, vx.size()-1){hx[vx[i]] = i + 1;}\n        rep(i, 0, vy.size()-1){hy[vy[i]] = i + 1;}\n        rep(i, 1, m){\n            s[i].x = hx[s[i].x];\n            s[i].y = hy[s[i].y];\n        }\n        rep(i, 0, p-1){\n            need[i * 4 + 1].x = hx[need[i * 4 + 1].x]; need[i * 4 + 1].y = hy[need[i * 4 + 1].y];\n            need[i * 4 + 2].x = hx[need[i * 4 + 2].x]; need[i * 4 + 2].y = hy[need[i * 4 + 2].y];\n            need[i * 4 + 3].x = hx[need[i * 4 + 3].x]; need[i * 4 + 3].y = hy[need[i * 4 + 3].y];\n            need[i * 4 + 4].x = hx[need[i * 4 + 4].x]; need[i * 4 + 4].y = hy[need[i * 4 + 4].y];\n        }\n        sort(s + 1, s + 1 + m);\n        sort(need + 1, need + 1 + 4 * p);\n        bit.n = vy.size();\n        bit.clear();\n        int cur = 1, curs = 1;\n        rep(i, 0, vx.size()){\n            while(curs <= m && s[curs].x == i){\n                bit.add(s[curs].y, s[curs].val);\n                curs++;\n            }\n            while(cur <= 4 * p && need[cur].x == i){\n                need[cur].val = bit.get(need[cur].y);\n                cur++;\n            }\n        }\n        sort(need + 1, need + 1 + 4 * p, [](const node &a, const node &b){return a.id < b.id;});\n        rep(i, 0, p-1){\n            printf(\"%lld\\n\", need[op[i].a].val + need[op[i].d].val - need[op[i].b].val - need[op[i].c].val);\n        }\n    }\n    return 0;\n}\n~~~\n\n\n\n## B. super_log\n\n知识点：递归，欧拉函数，欧拉定理\n\n### 扩展欧拉定理\n\n$$a^b \\equiv \\begin{cases} a^b & b < \\varphi(m) \\\\ a^{b \\bmod \\varphi(m) + \\varphi(m)} & b \\ge \\varphi(m) \\\\ \\end{cases}\\bmod m$$\n\n### 快速幂\n\n也不知道为什么，快速幂写成这样就可以直接递归求解了。\n\n这其中一定隐藏了什么不为人知的数论之谜。\n\n```cpp\nint up(ll a, int mod){\n    return a < mod ? a : a % mod + mod;\n}\nint qpow(int a, int b, int mod){\n    int res = 1;\n    while(b){\n        if(b&1) res = up(1ll * res * a, mod);\n        a = up(1ll * a * a, mod);\n        b >>= 1;\n    }\n    return res;\n}\n```\n\n### 代码\n\n~~~c++\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN = 1e6 + 7;\n\nint pri[MAXN], tot;\nint phi[MAXN];\nbool mark[MAXN];\nvoid init(){\n    tot = 0;\n    phi[1] = 1;\n    for(int i = 2; i <= 1000000; ++i){\n        if(!mark[i]){\n            phi[i] = i - 1; \n            pri[++tot] = i;\n        }\n        for(int j = 1; j <= tot; ++j){\n            int x = pri[j];\n            if(i * x > 1000000)    break;\n            mark[i * x] = 1;\n            if(i%x == 0){\n                phi[i*x] = phi[i] * x;\n                break;\n            } else {\n                phi[i*x] = phi[i] * phi[x];\n            }\n        }\n    }\n}\n\nint up(ll a, int mod){\n\treturn a < mod ? a : a % mod + mod;\n}\nint qpow(int a, int b, int mod){\n\tint res = 1;\n\twhile(b){\n\t\tif(b&1)\tres = up(1ll * res * a, mod);\n\t\ta = up(1ll * a * a, mod);\n\t\tb >>= 1;\n\t}\n\treturn res;\n}\n\nint solve(int a, int b, int m){\n\t//calculate a^a^...^a mod m\n\t//\t\t\t|<- b ->|\n\tif(!b || m == 1)\treturn 1;\n\treturn qpow(a, solve(a, b-1, phi[m]), m);\n}\n\nint main()\n{\n\tinit();\n\tint T, a, b, m;\n\tscanf(\"%d\", &T);\n\twhile(T--){\n\t\tscanf(\"%d %d %d\", &a, &b, &m);\n\t\tprintf(\"%d\\n\", solve(a, b, m) % m);\n\t}\n\treturn 0;\n}\n~~~\n\n","source":"_posts/2019-ICPC-nanjing.md","raw":"---\ntitle: 2019-ICPC-南京网络赛\nthumbnail: /gallery/thumbnails/sylvain-sarrailh-wandering.jpg\ndate: 2019-09-05 13:27:06\ntags: \n    - 树状数组\n    - 欧拉定理\n    - 欧拉函数\n    - 数据结构\n    - 数论\ncategories: \n    - [竞赛, ICPC]\n---\n\n# 题目\n\n[计蒜客](https://www.jisuanke.com/contest/3004?view=challenges)\n\n<!--more-->\n\n## A. The beautiful values of the palace\n\n知识点：坐标映射，离散化，树状数组，离线查询\n\n### 坐标映射\n\n找一下规律。（虽然我不太会找这个规律\n\n```cpp\nll get_int(int n, int x, int y){\n    x = x - n/2 - 1;\n    y = y - n/2 - 1;\n    ll t = max(abs(x), abs(y));\n    if(x >= y)  return 1ll * n * n - 4 * t * t - 2 * t - x - y;\n    else return 1ll * n * n - 4 * t * t + 2 * t + x + y;\n}\n```\n\n### 离散化和离线查询\n\n只离散化一维就行了，当然两个维度都离散化也是没有问题的。\n\n假设只离散化`x`轴，那么我们对建点和查询操作进行`x`优先排序，扫描`x`轴，当操作的`x`与当前枚举的`x`相同时进行操作，优先建点，然后查询。这样是为了保证顺序。\n\n查询的时候，相当于查询一个一维前缀和，用树状数组维护就可以了。\n\n~~~c++\n#include<bits/stdc++.h>\n#define rep(i, a, b)    for(int i = (a); i <= (int)(b); ++i)\n#define per(i, a, b)    for(int i = (a); i >= (int)(b); --i)\n#define debug(x)    cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN = 1e5 + 7;\nconst int MOD = 998244353;\n\nstruct node{\n    int x, y, id;\n    ll val;\n    friend bool operator <(const node &a, const node &b){\n        return a.x < b.x;\n    }\n}s[MAXN], need[MAXN * 4];\n\nstruct ask{\n    int a, b, c, d;\n}op[MAXN];\n\nll get_int(int n, int x, int y){\n    x = x - n/2 - 1;\n    y = y - n/2 - 1;\n    ll t = max(abs(x), abs(y));\n    if(x >= y)  return 1ll * n * n - 4 * t * t - 2 * t - x - y;\n    else return 1ll * n * n - 4 * t * t + 2 * t + x + y;\n}\n\nint get_val(ll val){\n    int ans = 0;\n    while(val){\n        ans += val%10;\n        val /= 10;\n    }\n    return ans;\n}\nstruct BIT {\n    int e[MAXN], n;\n    void clear(){rep(i, 0, n)    e[i] = 0;}\n    int lowbit(int x){return x & (-x);}\n    void add(int x, int v){\n        while(x <= n){\n            e[x] += v;\n            x += lowbit(x);\n        }\n    }\n    int get(int x){\n        int ans = 0;\n        while(x){\n            ans += e[x];\n            x -= lowbit(x);\n        }\n        return ans;\n    }\n}bit;\n\nint hx[MAXN * 10], hy[MAXN * 10];\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    while(T--){\n        int n, m, p;\n        scanf(\"%d %d %d\", &n, &m, &p);\n        vector<int> vx, vy;\n        rep(i, 1, m){\n            scanf(\"%d %d\", &s[i].x, &s[i].y);\n            s[i].val = get_val(get_int(n, s[i].x, s[i].y));\n            vx.push_back(s[i].x);\n            vy.push_back(s[i].y);\n        }\n        int x1, y1, x2, y2;\n        rep(i, 0, p-1){\n            scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n            vx.push_back(x1-1);\n            vx.push_back(x2);\n            vy.push_back(y1-1);\n            vy.push_back(y2);\n            need[i * 4 + 1] = node{x1-1, y1-1, i * 4 + 1};\n            need[i * 4 + 2] = node{x1-1, y2, i * 4 + 2};\n            need[i * 4 + 3] = node{x2, y1-1, i * 4 + 3};\n            need[i * 4 + 4] = node{x2, y2, i * 4 + 4};\n            op[i] = ask{i*4 + 1, i*4 + 2, i*4 + 3, i*4 + 4};\n        }\n        sort(vx.begin(), vx.end());\n        vx.erase(unique(vx.begin(), vx.end()), vx.end());\n        sort(vy.begin(), vy.end());\n        vy.erase(unique(vy.begin(), vy.end()), vy.end());\n        rep(i, 0, vx.size()-1){hx[vx[i]] = i + 1;}\n        rep(i, 0, vy.size()-1){hy[vy[i]] = i + 1;}\n        rep(i, 1, m){\n            s[i].x = hx[s[i].x];\n            s[i].y = hy[s[i].y];\n        }\n        rep(i, 0, p-1){\n            need[i * 4 + 1].x = hx[need[i * 4 + 1].x]; need[i * 4 + 1].y = hy[need[i * 4 + 1].y];\n            need[i * 4 + 2].x = hx[need[i * 4 + 2].x]; need[i * 4 + 2].y = hy[need[i * 4 + 2].y];\n            need[i * 4 + 3].x = hx[need[i * 4 + 3].x]; need[i * 4 + 3].y = hy[need[i * 4 + 3].y];\n            need[i * 4 + 4].x = hx[need[i * 4 + 4].x]; need[i * 4 + 4].y = hy[need[i * 4 + 4].y];\n        }\n        sort(s + 1, s + 1 + m);\n        sort(need + 1, need + 1 + 4 * p);\n        bit.n = vy.size();\n        bit.clear();\n        int cur = 1, curs = 1;\n        rep(i, 0, vx.size()){\n            while(curs <= m && s[curs].x == i){\n                bit.add(s[curs].y, s[curs].val);\n                curs++;\n            }\n            while(cur <= 4 * p && need[cur].x == i){\n                need[cur].val = bit.get(need[cur].y);\n                cur++;\n            }\n        }\n        sort(need + 1, need + 1 + 4 * p, [](const node &a, const node &b){return a.id < b.id;});\n        rep(i, 0, p-1){\n            printf(\"%lld\\n\", need[op[i].a].val + need[op[i].d].val - need[op[i].b].val - need[op[i].c].val);\n        }\n    }\n    return 0;\n}\n~~~\n\n\n\n## B. super_log\n\n知识点：递归，欧拉函数，欧拉定理\n\n### 扩展欧拉定理\n\n$$a^b \\equiv \\begin{cases} a^b & b < \\varphi(m) \\\\ a^{b \\bmod \\varphi(m) + \\varphi(m)} & b \\ge \\varphi(m) \\\\ \\end{cases}\\bmod m$$\n\n### 快速幂\n\n也不知道为什么，快速幂写成这样就可以直接递归求解了。\n\n这其中一定隐藏了什么不为人知的数论之谜。\n\n```cpp\nint up(ll a, int mod){\n    return a < mod ? a : a % mod + mod;\n}\nint qpow(int a, int b, int mod){\n    int res = 1;\n    while(b){\n        if(b&1) res = up(1ll * res * a, mod);\n        a = up(1ll * a * a, mod);\n        b >>= 1;\n    }\n    return res;\n}\n```\n\n### 代码\n\n~~~c++\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN = 1e6 + 7;\n\nint pri[MAXN], tot;\nint phi[MAXN];\nbool mark[MAXN];\nvoid init(){\n    tot = 0;\n    phi[1] = 1;\n    for(int i = 2; i <= 1000000; ++i){\n        if(!mark[i]){\n            phi[i] = i - 1; \n            pri[++tot] = i;\n        }\n        for(int j = 1; j <= tot; ++j){\n            int x = pri[j];\n            if(i * x > 1000000)    break;\n            mark[i * x] = 1;\n            if(i%x == 0){\n                phi[i*x] = phi[i] * x;\n                break;\n            } else {\n                phi[i*x] = phi[i] * phi[x];\n            }\n        }\n    }\n}\n\nint up(ll a, int mod){\n\treturn a < mod ? a : a % mod + mod;\n}\nint qpow(int a, int b, int mod){\n\tint res = 1;\n\twhile(b){\n\t\tif(b&1)\tres = up(1ll * res * a, mod);\n\t\ta = up(1ll * a * a, mod);\n\t\tb >>= 1;\n\t}\n\treturn res;\n}\n\nint solve(int a, int b, int m){\n\t//calculate a^a^...^a mod m\n\t//\t\t\t|<- b ->|\n\tif(!b || m == 1)\treturn 1;\n\treturn qpow(a, solve(a, b-1, phi[m]), m);\n}\n\nint main()\n{\n\tinit();\n\tint T, a, b, m;\n\tscanf(\"%d\", &T);\n\twhile(T--){\n\t\tscanf(\"%d %d %d\", &a, &b, &m);\n\t\tprintf(\"%d\\n\", solve(a, b, m) % m);\n\t}\n\treturn 0;\n}\n~~~\n\n","slug":"2019-ICPC-nanjing","published":1,"updated":"2021-03-28T08:40:48.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyc2000m69kjfqio7c24","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.jisuanke.com/contest/3004?view=challenges\">计蒜客</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"A-The-beautiful-values-of-the-palace\"><a href=\"#A-The-beautiful-values-of-the-palace\" class=\"headerlink\" title=\"A. The beautiful values of the palace\"></a>A. The beautiful values of the palace</h2><p>知识点：坐标映射，离散化，树状数组，离线查询</p>\n<h3 id=\"坐标映射\"><a href=\"#坐标映射\" class=\"headerlink\" title=\"坐标映射\"></a>坐标映射</h3><p>找一下规律。（虽然我不太会找这个规律</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">get_int</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    x = x - n/<span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    y = y - n/<span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll t = <span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(x), <span class=\"built_in\">abs</span>(y));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt;= y)  <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * n * n - <span class=\"number\">4</span> * t * t - <span class=\"number\">2</span> * t - x - y;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * n * n - <span class=\"number\">4</span> * t * t + <span class=\"number\">2</span> * t + x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"离散化和离线查询\"><a href=\"#离散化和离线查询\" class=\"headerlink\" title=\"离散化和离线查询\"></a>离散化和离线查询</h3><p>只离散化一维就行了，当然两个维度都离散化也是没有问题的。</p>\n<p>假设只离散化<code>x</code>轴，那么我们对建点和查询操作进行<code>x</code>优先排序，扫描<code>x</code>轴，当操作的<code>x</code>与当前枚举的<code>x</code>相同时进行操作，优先建点，然后查询。这样是为了保证顺序。</p>\n<p>查询的时候，相当于查询一个一维前缀和，用树状数组维护就可以了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b)    for(int i = (a); i &lt;= (int)(b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b)    for(int i = (a); i &gt;= (int)(b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x)    cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, id;</span><br><span class=\"line\">    ll val;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;s[MAXN], need[MAXN * <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ask</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c, d;</span><br><span class=\"line\">&#125;op[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">get_int</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    x = x - n/<span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    y = y - n/<span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll t = <span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(x), <span class=\"built_in\">abs</span>(y));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt;= y)  <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * n * n - <span class=\"number\">4</span> * t * t - <span class=\"number\">2</span> * t - x - y;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * n * n - <span class=\"number\">4</span> * t * t + <span class=\"number\">2</span> * t + x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_val</span><span class=\"params\">(ll val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(val)&#123;</span><br><span class=\"line\">        ans += val%<span class=\"number\">10</span>;</span><br><span class=\"line\">        val /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BIT</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> e[MAXN], n;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;<span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n)    e[i] = <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> x &amp; (-x);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x &lt;= n)&#123;</span><br><span class=\"line\">            e[x] += v;</span><br><span class=\"line\">            x += <span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x)&#123;</span><br><span class=\"line\">            ans += e[x];</span><br><span class=\"line\">            x -= <span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;bit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> hx[MAXN * <span class=\"number\">10</span>], hy[MAXN * <span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n, m, p;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;p);</span><br><span class=\"line\">        vector&lt;<span class=\"keyword\">int</span>&gt; vx, vy;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;s[i].x, &amp;s[i].y);</span><br><span class=\"line\">            s[i].val = <span class=\"built_in\">get_val</span>(<span class=\"built_in\">get_int</span>(n, s[i].x, s[i].y));</span><br><span class=\"line\">            vx.<span class=\"built_in\">push_back</span>(s[i].x);</span><br><span class=\"line\">            vy.<span class=\"built_in\">push_back</span>(s[i].y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x1, y1, x2, y2;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, p<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d %d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class=\"line\">            vx.<span class=\"built_in\">push_back</span>(x1<span class=\"number\">-1</span>);</span><br><span class=\"line\">            vx.<span class=\"built_in\">push_back</span>(x2);</span><br><span class=\"line\">            vy.<span class=\"built_in\">push_back</span>(y1<span class=\"number\">-1</span>);</span><br><span class=\"line\">            vy.<span class=\"built_in\">push_back</span>(y2);</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">1</span>] = node&#123;x1<span class=\"number\">-1</span>, y1<span class=\"number\">-1</span>, i * <span class=\"number\">4</span> + <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">2</span>] = node&#123;x1<span class=\"number\">-1</span>, y2, i * <span class=\"number\">4</span> + <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">3</span>] = node&#123;x2, y1<span class=\"number\">-1</span>, i * <span class=\"number\">4</span> + <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">4</span>] = node&#123;x2, y2, i * <span class=\"number\">4</span> + <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">            op[i] = ask&#123;i*<span class=\"number\">4</span> + <span class=\"number\">1</span>, i*<span class=\"number\">4</span> + <span class=\"number\">2</span>, i*<span class=\"number\">4</span> + <span class=\"number\">3</span>, i*<span class=\"number\">4</span> + <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(vx.<span class=\"built_in\">begin</span>(), vx.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        vx.<span class=\"built_in\">erase</span>(<span class=\"built_in\">unique</span>(vx.<span class=\"built_in\">begin</span>(), vx.<span class=\"built_in\">end</span>()), vx.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(vy.<span class=\"built_in\">begin</span>(), vy.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        vy.<span class=\"built_in\">erase</span>(<span class=\"built_in\">unique</span>(vy.<span class=\"built_in\">begin</span>(), vy.<span class=\"built_in\">end</span>()), vy.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, vx.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>)&#123;hx[vx[i]] = i + <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, vy.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>)&#123;hy[vy[i]] = i + <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m)&#123;</span><br><span class=\"line\">            s[i].x = hx[s[i].x];</span><br><span class=\"line\">            s[i].y = hy[s[i].y];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, p<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">1</span>].x = hx[need[i * <span class=\"number\">4</span> + <span class=\"number\">1</span>].x]; need[i * <span class=\"number\">4</span> + <span class=\"number\">1</span>].y = hy[need[i * <span class=\"number\">4</span> + <span class=\"number\">1</span>].y];</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">2</span>].x = hx[need[i * <span class=\"number\">4</span> + <span class=\"number\">2</span>].x]; need[i * <span class=\"number\">4</span> + <span class=\"number\">2</span>].y = hy[need[i * <span class=\"number\">4</span> + <span class=\"number\">2</span>].y];</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">3</span>].x = hx[need[i * <span class=\"number\">4</span> + <span class=\"number\">3</span>].x]; need[i * <span class=\"number\">4</span> + <span class=\"number\">3</span>].y = hy[need[i * <span class=\"number\">4</span> + <span class=\"number\">3</span>].y];</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">4</span>].x = hx[need[i * <span class=\"number\">4</span> + <span class=\"number\">4</span>].x]; need[i * <span class=\"number\">4</span> + <span class=\"number\">4</span>].y = hy[need[i * <span class=\"number\">4</span> + <span class=\"number\">4</span>].y];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>, s + <span class=\"number\">1</span> + m);</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(need + <span class=\"number\">1</span>, need + <span class=\"number\">1</span> + <span class=\"number\">4</span> * p);</span><br><span class=\"line\">        bit.n = vy.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        bit.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = <span class=\"number\">1</span>, curs = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, vx.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(curs &lt;= m &amp;&amp; s[curs].x == i)&#123;</span><br><span class=\"line\">                bit.<span class=\"built_in\">add</span>(s[curs].y, s[curs].val);</span><br><span class=\"line\">                curs++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(cur &lt;= <span class=\"number\">4</span> * p &amp;&amp; need[cur].x == i)&#123;</span><br><span class=\"line\">                need[cur].val = bit.<span class=\"built_in\">get</span>(need[cur].y);</span><br><span class=\"line\">                cur++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(need + <span class=\"number\">1</span>, need + <span class=\"number\">1</span> + <span class=\"number\">4</span> * p, [](<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;<span class=\"keyword\">return</span> a.id &lt; b.id;&#125;);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, p<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, need[op[i].a].val + need[op[i].d].val - need[op[i].b].val - need[op[i].c].val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"B-super-log\"><a href=\"#B-super-log\" class=\"headerlink\" title=\"B. super_log\"></a>B. super_log</h2><p>知识点：递归，欧拉函数，欧拉定理</p>\n<h3 id=\"扩展欧拉定理\"><a href=\"#扩展欧拉定理\" class=\"headerlink\" title=\"扩展欧拉定理\"></a>扩展欧拉定理</h3><p>$$a^b \\equiv \\begin{cases} a^b &amp; b &lt; \\varphi(m) \\ a^{b \\bmod \\varphi(m) + \\varphi(m)} &amp; b \\ge \\varphi(m) \\ \\end{cases}\\bmod m$$</p>\n<h3 id=\"快速幂\"><a href=\"#快速幂\" class=\"headerlink\" title=\"快速幂\"></a>快速幂</h3><p>也不知道为什么，快速幂写成这样就可以直接递归求解了。</p>\n<p>这其中一定隐藏了什么不为人知的数论之谜。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">up</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &lt; mod ? a : a % mod + mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) res = <span class=\"built_in\">up</span>(<span class=\"number\">1ll</span> * res * a, mod);</span><br><span class=\"line\">        a = <span class=\"built_in\">up</span>(<span class=\"number\">1ll</span> * a * a, mod);</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e6</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> pri[MAXN], tot;</span><br><span class=\"line\"><span class=\"keyword\">int</span> phi[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> mark[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    phi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">1000000</span>; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!mark[i])&#123;</span><br><span class=\"line\">            phi[i] = i - <span class=\"number\">1</span>; </span><br><span class=\"line\">            pri[++tot] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= tot; ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = pri[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i * x &gt; <span class=\"number\">1000000</span>)    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            mark[i * x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%x == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                phi[i*x] = phi[i] * x;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                phi[i*x] = phi[i] * phi[x];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">up</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt; mod ? a : a % mod + mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)\tres = <span class=\"built_in\">up</span>(<span class=\"number\">1ll</span> * res * a, mod);</span><br><span class=\"line\">\t\ta = <span class=\"built_in\">up</span>(<span class=\"number\">1ll</span> * a * a, mod);</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//calculate a^a^...^a mod m</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t\t\t|&lt;- b -&gt;|</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!b || m == <span class=\"number\">1</span>)\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">qpow</span>(a, <span class=\"built_in\">solve</span>(a, b<span class=\"number\">-1</span>, phi[m]), m);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> T, a, b, m;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;m);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">solve</span>(a, b, m) % m);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.jisuanke.com/contest/3004?view=challenges\">计蒜客</a></p>","more":"<h2 id=\"A-The-beautiful-values-of-the-palace\"><a href=\"#A-The-beautiful-values-of-the-palace\" class=\"headerlink\" title=\"A. The beautiful values of the palace\"></a>A. The beautiful values of the palace</h2><p>知识点：坐标映射，离散化，树状数组，离线查询</p>\n<h3 id=\"坐标映射\"><a href=\"#坐标映射\" class=\"headerlink\" title=\"坐标映射\"></a>坐标映射</h3><p>找一下规律。（虽然我不太会找这个规律</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ll <span class=\"title\">get_int</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    x = x - n/<span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    y = y - n/<span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll t = <span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(x), <span class=\"built_in\">abs</span>(y));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt;= y)  <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * n * n - <span class=\"number\">4</span> * t * t - <span class=\"number\">2</span> * t - x - y;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * n * n - <span class=\"number\">4</span> * t * t + <span class=\"number\">2</span> * t + x + y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"离散化和离线查询\"><a href=\"#离散化和离线查询\" class=\"headerlink\" title=\"离散化和离线查询\"></a>离散化和离线查询</h3><p>只离散化一维就行了，当然两个维度都离散化也是没有问题的。</p>\n<p>假设只离散化<code>x</code>轴，那么我们对建点和查询操作进行<code>x</code>优先排序，扫描<code>x</code>轴，当操作的<code>x</code>与当前枚举的<code>x</code>相同时进行操作，优先建点，然后查询。这样是为了保证顺序。</p>\n<p>查询的时候，相当于查询一个一维前缀和，用树状数组维护就可以了。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b)    for(int i = (a); i &lt;= (int)(b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b)    for(int i = (a); i &gt;= (int)(b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x)    cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, id;</span><br><span class=\"line\">    ll val;</span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt;(<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.x &lt; b.x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;s[MAXN], need[MAXN * <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ask</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c, d;</span><br><span class=\"line\">&#125;op[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">get_int</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    x = x - n/<span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    y = y - n/<span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll t = <span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(x), <span class=\"built_in\">abs</span>(y));</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt;= y)  <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * n * n - <span class=\"number\">4</span> * t * t - <span class=\"number\">2</span> * t - x - y;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">1ll</span> * n * n - <span class=\"number\">4</span> * t * t + <span class=\"number\">2</span> * t + x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_val</span><span class=\"params\">(ll val)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(val)&#123;</span><br><span class=\"line\">        ans += val%<span class=\"number\">10</span>;</span><br><span class=\"line\">        val /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BIT</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> e[MAXN], n;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;<span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, n)    e[i] = <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> x &amp; (-x);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x &lt;= n)&#123;</span><br><span class=\"line\">            e[x] += v;</span><br><span class=\"line\">            x += <span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x)&#123;</span><br><span class=\"line\">            ans += e[x];</span><br><span class=\"line\">            x -= <span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;bit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> hx[MAXN * <span class=\"number\">10</span>], hy[MAXN * <span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n, m, p;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;n, &amp;m, &amp;p);</span><br><span class=\"line\">        vector&lt;<span class=\"keyword\">int</span>&gt; vx, vy;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;s[i].x, &amp;s[i].y);</span><br><span class=\"line\">            s[i].val = <span class=\"built_in\">get_val</span>(<span class=\"built_in\">get_int</span>(n, s[i].x, s[i].y));</span><br><span class=\"line\">            vx.<span class=\"built_in\">push_back</span>(s[i].x);</span><br><span class=\"line\">            vy.<span class=\"built_in\">push_back</span>(s[i].y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x1, y1, x2, y2;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, p<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d %d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class=\"line\">            vx.<span class=\"built_in\">push_back</span>(x1<span class=\"number\">-1</span>);</span><br><span class=\"line\">            vx.<span class=\"built_in\">push_back</span>(x2);</span><br><span class=\"line\">            vy.<span class=\"built_in\">push_back</span>(y1<span class=\"number\">-1</span>);</span><br><span class=\"line\">            vy.<span class=\"built_in\">push_back</span>(y2);</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">1</span>] = node&#123;x1<span class=\"number\">-1</span>, y1<span class=\"number\">-1</span>, i * <span class=\"number\">4</span> + <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">2</span>] = node&#123;x1<span class=\"number\">-1</span>, y2, i * <span class=\"number\">4</span> + <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">3</span>] = node&#123;x2, y1<span class=\"number\">-1</span>, i * <span class=\"number\">4</span> + <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">4</span>] = node&#123;x2, y2, i * <span class=\"number\">4</span> + <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">            op[i] = ask&#123;i*<span class=\"number\">4</span> + <span class=\"number\">1</span>, i*<span class=\"number\">4</span> + <span class=\"number\">2</span>, i*<span class=\"number\">4</span> + <span class=\"number\">3</span>, i*<span class=\"number\">4</span> + <span class=\"number\">4</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(vx.<span class=\"built_in\">begin</span>(), vx.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        vx.<span class=\"built_in\">erase</span>(<span class=\"built_in\">unique</span>(vx.<span class=\"built_in\">begin</span>(), vx.<span class=\"built_in\">end</span>()), vx.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(vy.<span class=\"built_in\">begin</span>(), vy.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        vy.<span class=\"built_in\">erase</span>(<span class=\"built_in\">unique</span>(vy.<span class=\"built_in\">begin</span>(), vy.<span class=\"built_in\">end</span>()), vy.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, vx.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>)&#123;hx[vx[i]] = i + <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, vy.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>)&#123;hy[vy[i]] = i + <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m)&#123;</span><br><span class=\"line\">            s[i].x = hx[s[i].x];</span><br><span class=\"line\">            s[i].y = hy[s[i].y];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, p<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">1</span>].x = hx[need[i * <span class=\"number\">4</span> + <span class=\"number\">1</span>].x]; need[i * <span class=\"number\">4</span> + <span class=\"number\">1</span>].y = hy[need[i * <span class=\"number\">4</span> + <span class=\"number\">1</span>].y];</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">2</span>].x = hx[need[i * <span class=\"number\">4</span> + <span class=\"number\">2</span>].x]; need[i * <span class=\"number\">4</span> + <span class=\"number\">2</span>].y = hy[need[i * <span class=\"number\">4</span> + <span class=\"number\">2</span>].y];</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">3</span>].x = hx[need[i * <span class=\"number\">4</span> + <span class=\"number\">3</span>].x]; need[i * <span class=\"number\">4</span> + <span class=\"number\">3</span>].y = hy[need[i * <span class=\"number\">4</span> + <span class=\"number\">3</span>].y];</span><br><span class=\"line\">            need[i * <span class=\"number\">4</span> + <span class=\"number\">4</span>].x = hx[need[i * <span class=\"number\">4</span> + <span class=\"number\">4</span>].x]; need[i * <span class=\"number\">4</span> + <span class=\"number\">4</span>].y = hy[need[i * <span class=\"number\">4</span> + <span class=\"number\">4</span>].y];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>, s + <span class=\"number\">1</span> + m);</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(need + <span class=\"number\">1</span>, need + <span class=\"number\">1</span> + <span class=\"number\">4</span> * p);</span><br><span class=\"line\">        bit.n = vy.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        bit.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cur = <span class=\"number\">1</span>, curs = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, vx.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(curs &lt;= m &amp;&amp; s[curs].x == i)&#123;</span><br><span class=\"line\">                bit.<span class=\"built_in\">add</span>(s[curs].y, s[curs].val);</span><br><span class=\"line\">                curs++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(cur &lt;= <span class=\"number\">4</span> * p &amp;&amp; need[cur].x == i)&#123;</span><br><span class=\"line\">                need[cur].val = bit.<span class=\"built_in\">get</span>(need[cur].y);</span><br><span class=\"line\">                cur++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(need + <span class=\"number\">1</span>, need + <span class=\"number\">1</span> + <span class=\"number\">4</span> * p, [](<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;<span class=\"keyword\">return</span> a.id &lt; b.id;&#125;);</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, p<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, need[op[i].a].val + need[op[i].d].val - need[op[i].b].val - need[op[i].c].val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"B-super-log\"><a href=\"#B-super-log\" class=\"headerlink\" title=\"B. super_log\"></a>B. super_log</h2><p>知识点：递归，欧拉函数，欧拉定理</p>\n<h3 id=\"扩展欧拉定理\"><a href=\"#扩展欧拉定理\" class=\"headerlink\" title=\"扩展欧拉定理\"></a>扩展欧拉定理</h3><p>$$a^b \\equiv \\begin{cases} a^b &amp; b &lt; \\varphi(m) \\ a^{b \\bmod \\varphi(m) + \\varphi(m)} &amp; b \\ge \\varphi(m) \\ \\end{cases}\\bmod m$$</p>\n<h3 id=\"快速幂\"><a href=\"#快速幂\" class=\"headerlink\" title=\"快速幂\"></a>快速幂</h3><p>也不知道为什么，快速幂写成这样就可以直接递归求解了。</p>\n<p>这其中一定隐藏了什么不为人知的数论之谜。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">up</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a &lt; mod ? a : a % mod + mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>) res = <span class=\"built_in\">up</span>(<span class=\"number\">1ll</span> * res * a, mod);</span><br><span class=\"line\">        a = <span class=\"built_in\">up</span>(<span class=\"number\">1ll</span> * a * a, mod);</span><br><span class=\"line\">        b &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e6</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> pri[MAXN], tot;</span><br><span class=\"line\"><span class=\"keyword\">int</span> phi[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> mark[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    phi[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">1000000</span>; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!mark[i])&#123;</span><br><span class=\"line\">            phi[i] = i - <span class=\"number\">1</span>; </span><br><span class=\"line\">            pri[++tot] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= tot; ++j)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = pri[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i * x &gt; <span class=\"number\">1000000</span>)    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            mark[i * x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i%x == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                phi[i*x] = phi[i] * x;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                phi[i*x] = phi[i] * phi[x];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">up</span><span class=\"params\">(ll a, <span class=\"keyword\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt; mod ? a : a % mod + mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> mod)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)\tres = <span class=\"built_in\">up</span>(<span class=\"number\">1ll</span> * res * a, mod);</span><br><span class=\"line\">\t\ta = <span class=\"built_in\">up</span>(<span class=\"number\">1ll</span> * a * a, mod);</span><br><span class=\"line\">\t\tb &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//calculate a^a^...^a mod m</span></span><br><span class=\"line\">\t<span class=\"comment\">//\t\t\t|&lt;- b -&gt;|</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!b || m == <span class=\"number\">1</span>)\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">qpow</span>(a, <span class=\"built_in\">solve</span>(a, b<span class=\"number\">-1</span>, phi[m]), m);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> T, a, b, m;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;m);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">solve</span>(a, b, m) % m);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Python连接MySQL","thumbnail":"/gallery/thumbnails/Mariadb.png","date":"2021-03-10T09:12:13.000Z","_content":"\n# 前言\n\n毕设需要保存大量数据，于是想在服务器上运行一个数据库。\n\nCent OS 默认的 MySQL是Mariadb版本的，据说这个版本是在MySQL被Oracle并购之后，一些MySQL的老员工考虑到MySQL可能被商用而发行的一个免费开源版本。\n\n```bash\n$ screenfetch\n\t\t\t\t\t\t\t\t\t ..                    root@Dicer\n                 .PLTJ.                  OS: CentOS \n                <><><><>                 Kernel: x86_64 Linux 3.10.0-957.21.3.el7.x86_64\n       KKSSV' 4KKK LJ KKKL.'VSSKK        Uptime: 596d 20h 16m\n       KKV' 4KKKKK LJ KKKKAL 'VKK        Packages: 569\n       V' ' 'VKKKK LJ KKKKV' ' 'V        Shell: zsh 5.0.2\n       .4MA.' 'VKK LJ KKV' '.4Mb.        Disk: 12G / 41G (30%)\n     . KKKKKA.' 'V LJ V' '.4KKKKK .      CPU: Intel Xeon E5-2682 v4 @ 2.494GHz\n   .4D KKKKKKKA.'' LJ ''.4KKKKKKK FA.    GPU: Cirrus Logic GD 5446\n  <QDD ++++++++++++  ++++++++++++ GFD>   RAM: 488MiB / 1838MiB\n   'VD KKKKKKKK'.. LJ ..'KKKKKKKK FV    \n     ' VKKKKK'. .4 LJ K. .'KKKKKV '     \n        'VK'. .4KK LJ KKA. .'KV'        \n       A. . .4KKKK LJ KKKKA. . .4       \n       KKA. 'KKKKK LJ KKKKK' .4KK       \n       KKSSA. VKKK LJ KKKV .4SSKK       \n                <><><><>                \n                 'MKKM'                 \n                   ''\n```\n\n<!--more-->\n\n# Mariadb\n\n### 查看是否安装过Mariadb\n\n```bash\n$ rpm -qs | grep mariadb\n```\n\n### 安装并启动Mariadb\n\n```bash\n$ yum install mariadb mariadb-server\n\n$ systemctl enable mariadb\n$ systemctl start mariadb\n```\n\n### 安全设置\n\n```bash\n$ mysql_secure_installation\n```\n\n### 远程访问\n\n```bash\n$ mysql -u root -h localhost -p \"mypassword\"\nMariadb root@localhost:mysql> UPDATE user SET host='%' WHERE user='root';\nMariadb root@localhost:mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;\nMariadb root@localhost:mysql> FLUSH PRIVILEGES;\n```\n\n### 关闭防火墙\n\n如果以上步骤都完成了以后，远程连接超时的话一般都是防火墙的问题，可以将防火墙关闭：\n\n```bash\n$ systemctl stop firewalld.service\n```\n\n### 卸载Mariadb\n\n```bash\n$ yum remove mariadb mariadb-server mariadb-libs\n$ rm -rf /var/lib/mysql\n$ rm /etc/my.cnf\n$ yum install mariadb mariadb-server\n```\n\n# Python 连接 Mariadb\n\n```bash\nimport mysql.connector as conn\n\ndb = conn.connect(\n    host = 'myIP',\n    port = 'myPort',\n    user = 'root',\n    password = 'myPassword',\n    database = 'myDB'\n)\n\ncursor = db.cursor()\n```\n\n## REFERENCE\n\nhttps://www.linode.com/docs/guides/how-to-install-mariadb-on-centos-7/","source":"_posts/Python连接MySQL.md","raw":"---\ntitle: Python连接MySQL\nthumbnail: /gallery/thumbnails/Mariadb.png\ndate: 2021-03-10 17:12:13\ntags: \n  - MySQL\n  - Python\ncategories: \n---\n\n# 前言\n\n毕设需要保存大量数据，于是想在服务器上运行一个数据库。\n\nCent OS 默认的 MySQL是Mariadb版本的，据说这个版本是在MySQL被Oracle并购之后，一些MySQL的老员工考虑到MySQL可能被商用而发行的一个免费开源版本。\n\n```bash\n$ screenfetch\n\t\t\t\t\t\t\t\t\t ..                    root@Dicer\n                 .PLTJ.                  OS: CentOS \n                <><><><>                 Kernel: x86_64 Linux 3.10.0-957.21.3.el7.x86_64\n       KKSSV' 4KKK LJ KKKL.'VSSKK        Uptime: 596d 20h 16m\n       KKV' 4KKKKK LJ KKKKAL 'VKK        Packages: 569\n       V' ' 'VKKKK LJ KKKKV' ' 'V        Shell: zsh 5.0.2\n       .4MA.' 'VKK LJ KKV' '.4Mb.        Disk: 12G / 41G (30%)\n     . KKKKKA.' 'V LJ V' '.4KKKKK .      CPU: Intel Xeon E5-2682 v4 @ 2.494GHz\n   .4D KKKKKKKA.'' LJ ''.4KKKKKKK FA.    GPU: Cirrus Logic GD 5446\n  <QDD ++++++++++++  ++++++++++++ GFD>   RAM: 488MiB / 1838MiB\n   'VD KKKKKKKK'.. LJ ..'KKKKKKKK FV    \n     ' VKKKKK'. .4 LJ K. .'KKKKKV '     \n        'VK'. .4KK LJ KKA. .'KV'        \n       A. . .4KKKK LJ KKKKA. . .4       \n       KKA. 'KKKKK LJ KKKKK' .4KK       \n       KKSSA. VKKK LJ KKKV .4SSKK       \n                <><><><>                \n                 'MKKM'                 \n                   ''\n```\n\n<!--more-->\n\n# Mariadb\n\n### 查看是否安装过Mariadb\n\n```bash\n$ rpm -qs | grep mariadb\n```\n\n### 安装并启动Mariadb\n\n```bash\n$ yum install mariadb mariadb-server\n\n$ systemctl enable mariadb\n$ systemctl start mariadb\n```\n\n### 安全设置\n\n```bash\n$ mysql_secure_installation\n```\n\n### 远程访问\n\n```bash\n$ mysql -u root -h localhost -p \"mypassword\"\nMariadb root@localhost:mysql> UPDATE user SET host='%' WHERE user='root';\nMariadb root@localhost:mysql> GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;\nMariadb root@localhost:mysql> FLUSH PRIVILEGES;\n```\n\n### 关闭防火墙\n\n如果以上步骤都完成了以后，远程连接超时的话一般都是防火墙的问题，可以将防火墙关闭：\n\n```bash\n$ systemctl stop firewalld.service\n```\n\n### 卸载Mariadb\n\n```bash\n$ yum remove mariadb mariadb-server mariadb-libs\n$ rm -rf /var/lib/mysql\n$ rm /etc/my.cnf\n$ yum install mariadb mariadb-server\n```\n\n# Python 连接 Mariadb\n\n```bash\nimport mysql.connector as conn\n\ndb = conn.connect(\n    host = 'myIP',\n    port = 'myPort',\n    user = 'root',\n    password = 'myPassword',\n    database = 'myDB'\n)\n\ncursor = db.cursor()\n```\n\n## REFERENCE\n\nhttps://www.linode.com/docs/guides/how-to-install-mariadb-on-centos-7/","slug":"Python连接MySQL","published":1,"updated":"2021-03-28T08:47:23.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyc3000o69kj8zg0gskh","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>毕设需要保存大量数据，于是想在服务器上运行一个数据库。</p>\n<p>Cent OS 默认的 MySQL是Mariadb版本的，据说这个版本是在MySQL被Oracle并购之后，一些MySQL的老员工考虑到MySQL可能被商用而发行的一个免费开源版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ screenfetch</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t ..                    root@Dicer</span><br><span class=\"line\">                 .PLTJ.                  OS: CentOS </span><br><span class=\"line\">                &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;                 Kernel: x86_64 Linux 3.10.0-957.21.3.el7.x86_64</span><br><span class=\"line\">       KKSSV<span class=\"string\">&#x27; 4KKK LJ KKKL.&#x27;</span>VSSKK        Uptime: 596d 20h 16m</span><br><span class=\"line\">       KKV<span class=\"string\">&#x27; 4KKKKK LJ KKKKAL &#x27;</span>VKK        Packages: 569</span><br><span class=\"line\">       V<span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;VKKKK LJ KKKKV&#x27;</span> <span class=\"string\">&#x27; &#x27;</span>V        Shell: zsh 5.0.2</span><br><span class=\"line\">       .4MA.<span class=\"string\">&#x27; &#x27;</span>VKK LJ KKV<span class=\"string\">&#x27; &#x27;</span>.4Mb.        Disk: 12G / 41G (30%)</span><br><span class=\"line\">     . KKKKKA.<span class=\"string\">&#x27; &#x27;</span>V LJ V<span class=\"string\">&#x27; &#x27;</span>.4KKKKK .      CPU: Intel Xeon E5-2682 v4 @ 2.494GHz</span><br><span class=\"line\">   .4D KKKKKKKA.<span class=\"string\">&#x27;&#x27;</span> LJ <span class=\"string\">&#x27;&#x27;</span>.4KKKKKKK FA.    GPU: Cirrus Logic GD 5446</span><br><span class=\"line\">  &lt;QDD ++++++++++++  ++++++++++++ GFD&gt;   RAM: 488MiB / 1838MiB</span><br><span class=\"line\">   <span class=\"string\">&#x27;VD KKKKKKKK&#x27;</span>.. LJ ..<span class=\"string\">&#x27;KKKKKKKK FV    </span></span><br><span class=\"line\"><span class=\"string\">     &#x27;</span> VKKKKK<span class=\"string\">&#x27;. .4 LJ K. .&#x27;</span>KKKKKV <span class=\"string\">&#x27;     </span></span><br><span class=\"line\"><span class=\"string\">        &#x27;</span>VK<span class=\"string\">&#x27;. .4KK LJ KKA. .&#x27;</span>KV<span class=\"string\">&#x27;        </span></span><br><span class=\"line\"><span class=\"string\">       A. . .4KKKK LJ KKKKA. . .4       </span></span><br><span class=\"line\"><span class=\"string\">       KKA. &#x27;</span>KKKKK LJ KKKKK<span class=\"string\">&#x27; .4KK       </span></span><br><span class=\"line\"><span class=\"string\">       KKSSA. VKKK LJ KKKV .4SSKK       </span></span><br><span class=\"line\"><span class=\"string\">                &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;                </span></span><br><span class=\"line\"><span class=\"string\">                 &#x27;</span>MKKM<span class=\"string\">&#x27;                 </span></span><br><span class=\"line\"><span class=\"string\">                   &#x27;</span><span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h1 id=\"Mariadb\"><a href=\"#Mariadb\" class=\"headerlink\" title=\"Mariadb\"></a>Mariadb</h1><h3 id=\"查看是否安装过Mariadb\"><a href=\"#查看是否安装过Mariadb\" class=\"headerlink\" title=\"查看是否安装过Mariadb\"></a>查看是否安装过Mariadb</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -qs | grep mariadb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装并启动Mariadb\"><a href=\"#安装并启动Mariadb\" class=\"headerlink\" title=\"安装并启动Mariadb\"></a>安装并启动Mariadb</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install mariadb mariadb-server</span><br><span class=\"line\"></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> mariadb</span><br><span class=\"line\">$ systemctl start mariadb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安全设置\"><a href=\"#安全设置\" class=\"headerlink\" title=\"安全设置\"></a>安全设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"远程访问\"><a href=\"#远程访问\" class=\"headerlink\" title=\"远程访问\"></a>远程访问</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -h localhost -p <span class=\"string\">&quot;mypassword&quot;</span></span><br><span class=\"line\">Mariadb root@localhost:mysql&gt; UPDATE user SET host=<span class=\"string\">&#x27;%&#x27;</span> WHERE user=<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\">Mariadb root@localhost:mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;mypassword&#x27;</span> WITH GRANT OPTION;</span><br><span class=\"line\">Mariadb root@localhost:mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h3><p>如果以上步骤都完成了以后，远程连接超时的话一般都是防火墙的问题，可以将防火墙关闭：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"卸载Mariadb\"><a href=\"#卸载Mariadb\" class=\"headerlink\" title=\"卸载Mariadb\"></a>卸载Mariadb</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum remove mariadb mariadb-server mariadb-libs</span><br><span class=\"line\">$ rm -rf /var/lib/mysql</span><br><span class=\"line\">$ rm /etc/my.cnf</span><br><span class=\"line\">$ yum install mariadb mariadb-server</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Python-连接-Mariadb\"><a href=\"#Python-连接-Mariadb\" class=\"headerlink\" title=\"Python 连接 Mariadb\"></a>Python 连接 Mariadb</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mysql.connector as conn</span><br><span class=\"line\"></span><br><span class=\"line\">db = conn.connect(</span><br><span class=\"line\">    host = <span class=\"string\">&#x27;myIP&#x27;</span>,</span><br><span class=\"line\">    port = <span class=\"string\">&#x27;myPort&#x27;</span>,</span><br><span class=\"line\">    user = <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">    password = <span class=\"string\">&#x27;myPassword&#x27;</span>,</span><br><span class=\"line\">    database = <span class=\"string\">&#x27;myDB&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">cursor = db.cursor()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"REFERENCE\"><a href=\"#REFERENCE\" class=\"headerlink\" title=\"REFERENCE\"></a>REFERENCE</h2><p><a href=\"https://www.linode.com/docs/guides/how-to-install-mariadb-on-centos-7/\">https://www.linode.com/docs/guides/how-to-install-mariadb-on-centos-7/</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>毕设需要保存大量数据，于是想在服务器上运行一个数据库。</p>\n<p>Cent OS 默认的 MySQL是Mariadb版本的，据说这个版本是在MySQL被Oracle并购之后，一些MySQL的老员工考虑到MySQL可能被商用而发行的一个免费开源版本。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ screenfetch</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t ..                    root@Dicer</span><br><span class=\"line\">                 .PLTJ.                  OS: CentOS </span><br><span class=\"line\">                &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;                 Kernel: x86_64 Linux 3.10.0-957.21.3.el7.x86_64</span><br><span class=\"line\">       KKSSV<span class=\"string\">&#x27; 4KKK LJ KKKL.&#x27;</span>VSSKK        Uptime: 596d 20h 16m</span><br><span class=\"line\">       KKV<span class=\"string\">&#x27; 4KKKKK LJ KKKKAL &#x27;</span>VKK        Packages: 569</span><br><span class=\"line\">       V<span class=\"string\">&#x27; &#x27;</span> <span class=\"string\">&#x27;VKKKK LJ KKKKV&#x27;</span> <span class=\"string\">&#x27; &#x27;</span>V        Shell: zsh 5.0.2</span><br><span class=\"line\">       .4MA.<span class=\"string\">&#x27; &#x27;</span>VKK LJ KKV<span class=\"string\">&#x27; &#x27;</span>.4Mb.        Disk: 12G / 41G (30%)</span><br><span class=\"line\">     . KKKKKA.<span class=\"string\">&#x27; &#x27;</span>V LJ V<span class=\"string\">&#x27; &#x27;</span>.4KKKKK .      CPU: Intel Xeon E5-2682 v4 @ 2.494GHz</span><br><span class=\"line\">   .4D KKKKKKKA.<span class=\"string\">&#x27;&#x27;</span> LJ <span class=\"string\">&#x27;&#x27;</span>.4KKKKKKK FA.    GPU: Cirrus Logic GD 5446</span><br><span class=\"line\">  &lt;QDD ++++++++++++  ++++++++++++ GFD&gt;   RAM: 488MiB / 1838MiB</span><br><span class=\"line\">   <span class=\"string\">&#x27;VD KKKKKKKK&#x27;</span>.. LJ ..<span class=\"string\">&#x27;KKKKKKKK FV    </span></span><br><span class=\"line\"><span class=\"string\">     &#x27;</span> VKKKKK<span class=\"string\">&#x27;. .4 LJ K. .&#x27;</span>KKKKKV <span class=\"string\">&#x27;     </span></span><br><span class=\"line\"><span class=\"string\">        &#x27;</span>VK<span class=\"string\">&#x27;. .4KK LJ KKA. .&#x27;</span>KV<span class=\"string\">&#x27;        </span></span><br><span class=\"line\"><span class=\"string\">       A. . .4KKKK LJ KKKKA. . .4       </span></span><br><span class=\"line\"><span class=\"string\">       KKA. &#x27;</span>KKKKK LJ KKKKK<span class=\"string\">&#x27; .4KK       </span></span><br><span class=\"line\"><span class=\"string\">       KKSSA. VKKK LJ KKKV .4SSKK       </span></span><br><span class=\"line\"><span class=\"string\">                &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;                </span></span><br><span class=\"line\"><span class=\"string\">                 &#x27;</span>MKKM<span class=\"string\">&#x27;                 </span></span><br><span class=\"line\"><span class=\"string\">                   &#x27;</span><span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>","more":"<h1 id=\"Mariadb\"><a href=\"#Mariadb\" class=\"headerlink\" title=\"Mariadb\"></a>Mariadb</h1><h3 id=\"查看是否安装过Mariadb\"><a href=\"#查看是否安装过Mariadb\" class=\"headerlink\" title=\"查看是否安装过Mariadb\"></a>查看是否安装过Mariadb</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rpm -qs | grep mariadb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装并启动Mariadb\"><a href=\"#安装并启动Mariadb\" class=\"headerlink\" title=\"安装并启动Mariadb\"></a>安装并启动Mariadb</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install mariadb mariadb-server</span><br><span class=\"line\"></span><br><span class=\"line\">$ systemctl <span class=\"built_in\">enable</span> mariadb</span><br><span class=\"line\">$ systemctl start mariadb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安全设置\"><a href=\"#安全设置\" class=\"headerlink\" title=\"安全设置\"></a>安全设置</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"远程访问\"><a href=\"#远程访问\" class=\"headerlink\" title=\"远程访问\"></a>远程访问</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mysql -u root -h localhost -p <span class=\"string\">&quot;mypassword&quot;</span></span><br><span class=\"line\">Mariadb root@localhost:mysql&gt; UPDATE user SET host=<span class=\"string\">&#x27;%&#x27;</span> WHERE user=<span class=\"string\">&#x27;root&#x27;</span>;</span><br><span class=\"line\">Mariadb root@localhost:mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> IDENTIFIED BY <span class=\"string\">&#x27;mypassword&#x27;</span> WITH GRANT OPTION;</span><br><span class=\"line\">Mariadb root@localhost:mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h3><p>如果以上步骤都完成了以后，远程连接超时的话一般都是防火墙的问题，可以将防火墙关闭：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"卸载Mariadb\"><a href=\"#卸载Mariadb\" class=\"headerlink\" title=\"卸载Mariadb\"></a>卸载Mariadb</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum remove mariadb mariadb-server mariadb-libs</span><br><span class=\"line\">$ rm -rf /var/lib/mysql</span><br><span class=\"line\">$ rm /etc/my.cnf</span><br><span class=\"line\">$ yum install mariadb mariadb-server</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Python-连接-Mariadb\"><a href=\"#Python-连接-Mariadb\" class=\"headerlink\" title=\"Python 连接 Mariadb\"></a>Python 连接 Mariadb</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import mysql.connector as conn</span><br><span class=\"line\"></span><br><span class=\"line\">db = conn.connect(</span><br><span class=\"line\">    host = <span class=\"string\">&#x27;myIP&#x27;</span>,</span><br><span class=\"line\">    port = <span class=\"string\">&#x27;myPort&#x27;</span>,</span><br><span class=\"line\">    user = <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">    password = <span class=\"string\">&#x27;myPassword&#x27;</span>,</span><br><span class=\"line\">    database = <span class=\"string\">&#x27;myDB&#x27;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">cursor = db.cursor()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"REFERENCE\"><a href=\"#REFERENCE\" class=\"headerlink\" title=\"REFERENCE\"></a>REFERENCE</h2><p><a href=\"https://www.linode.com/docs/guides/how-to-install-mariadb-on-centos-7/\">https://www.linode.com/docs/guides/how-to-install-mariadb-on-centos-7/</a></p>"},{"title":"Nginx 添加SSL证书","thumbnail":"/gallery/thumbnails/SSL.png","date":"2021-03-14T13:51:47.000Z","toc":true,"_content":"\n在使用Chrome浏览器时，访问没有SSL的网页时会提醒网页不安全，添加过SSL证书之后，会有一个小锁，很好看。\n\nHTTP vs HTTPS: https://www.runoob.com/w3cnote/http-vs-https.html\n\n<!--more-->\n\n# 申请SSL证书\n\n阿里云和腾讯云都有免费的SSL证书可以申请，我用的是阿里云的云盾SSL证书，我用的服务器也是阿里云的，所以申请下来挺快的，大概几分钟。\n\n然后将证书下载下来，证书包含两个部分：.pem文件和.key文件，都需要上传到服务器。\n\n```bash\n$ scp dicer.fun.pem /home/git/SSL/\n# 输入服务器密码\n$ scp dicer.fun.key/home/git/SSL/\n# 输入服务器密码\n```\n\n# 修改nginx.conf\n\n在ningx.conf中添加以下内容：\n\n```bash\nserver {\n     listen       443 ssl;\n     listen       [::]:443 ssl;\n     server_name  dicer.fun;\n     root         /usr/share/nginx/html/blog;\n\n     # ssl                 on;\n     ssl_certificate     \"/home/git/SSL/dicer.fun.pem\";\n     ssl_certificate_key \"/home/git/SSL/dicer.fun.key\";\n\n     ssl_session_cache shared:SSL:1m;\n     ssl_session_timeout  10m;\n     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n     ssl_ciphers HIGH:!aNULL:!MD5;\n     ssl_prefer_server_ciphers on;\n\n     # Load configuration files for the default server block.\n     include /etc/nginx/default.d/*.conf;\n\n     location / {\n     }\n     error_page 404 /404.html;\n         location = /40x.html {\n     }\n\n     error_page 500 502 503 504 /50x.html;\n         location = /50x.html {\n     }\n\n }\n```\n\n其中 server_name, root, ssl_certificate, ssl_certificate_key 需要进行对应的修改。\n\n# 验证nginx.conf 并重启服务\n\n```bash\nnginx -t\nnginx -s reload\n```\n\n# 重定向HTTP到HTTPS\n\n在80端口的解析中，添加重定向。\n\n状态码301表示永久重定向。\n\n```bash\nserver {\n         listen       80 default_server;\n         listen       [::]:80 default_server;\n         server_name  dicer.fun;\n         root         /usr/share/nginx/html/blog;\n \n         return 301 https://$server_name$request_uri; # 重定向\n\n         # Load configuration files for the default server block.\n         include /etc/nginx/default.d/*.conf;\n \n         location / {\n         }\n \n         error_page 404 /404.html;\n             location = /40x.html {\n         }\n \n         error_page 500 502 503 504 /50x.html;\n             location = /50x.html {\n         }\n     }\n```\n\n修改文件后，需要重启nginx服务。\n\n# REFERENCES\n\nhttps://segmentfault.com/a/1190000009363890\n\nhttps://www.cnblogs.com/kevingrace/p/6187072.html","source":"_posts/Nginx-添加SSL证书.md","raw":"---\ntitle: Nginx 添加SSL证书\nthumbnail: /gallery/thumbnails/SSL.png\ndate: 2021-03-14 21:51:47\ntoc: true\ntags: \n    - SSL\n    - Nginx\n    - HTTPS\ncategories: \n    - 网络\n---\n\n在使用Chrome浏览器时，访问没有SSL的网页时会提醒网页不安全，添加过SSL证书之后，会有一个小锁，很好看。\n\nHTTP vs HTTPS: https://www.runoob.com/w3cnote/http-vs-https.html\n\n<!--more-->\n\n# 申请SSL证书\n\n阿里云和腾讯云都有免费的SSL证书可以申请，我用的是阿里云的云盾SSL证书，我用的服务器也是阿里云的，所以申请下来挺快的，大概几分钟。\n\n然后将证书下载下来，证书包含两个部分：.pem文件和.key文件，都需要上传到服务器。\n\n```bash\n$ scp dicer.fun.pem /home/git/SSL/\n# 输入服务器密码\n$ scp dicer.fun.key/home/git/SSL/\n# 输入服务器密码\n```\n\n# 修改nginx.conf\n\n在ningx.conf中添加以下内容：\n\n```bash\nserver {\n     listen       443 ssl;\n     listen       [::]:443 ssl;\n     server_name  dicer.fun;\n     root         /usr/share/nginx/html/blog;\n\n     # ssl                 on;\n     ssl_certificate     \"/home/git/SSL/dicer.fun.pem\";\n     ssl_certificate_key \"/home/git/SSL/dicer.fun.key\";\n\n     ssl_session_cache shared:SSL:1m;\n     ssl_session_timeout  10m;\n     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n     ssl_ciphers HIGH:!aNULL:!MD5;\n     ssl_prefer_server_ciphers on;\n\n     # Load configuration files for the default server block.\n     include /etc/nginx/default.d/*.conf;\n\n     location / {\n     }\n     error_page 404 /404.html;\n         location = /40x.html {\n     }\n\n     error_page 500 502 503 504 /50x.html;\n         location = /50x.html {\n     }\n\n }\n```\n\n其中 server_name, root, ssl_certificate, ssl_certificate_key 需要进行对应的修改。\n\n# 验证nginx.conf 并重启服务\n\n```bash\nnginx -t\nnginx -s reload\n```\n\n# 重定向HTTP到HTTPS\n\n在80端口的解析中，添加重定向。\n\n状态码301表示永久重定向。\n\n```bash\nserver {\n         listen       80 default_server;\n         listen       [::]:80 default_server;\n         server_name  dicer.fun;\n         root         /usr/share/nginx/html/blog;\n \n         return 301 https://$server_name$request_uri; # 重定向\n\n         # Load configuration files for the default server block.\n         include /etc/nginx/default.d/*.conf;\n \n         location / {\n         }\n \n         error_page 404 /404.html;\n             location = /40x.html {\n         }\n \n         error_page 500 502 503 504 /50x.html;\n             location = /50x.html {\n         }\n     }\n```\n\n修改文件后，需要重启nginx服务。\n\n# REFERENCES\n\nhttps://segmentfault.com/a/1190000009363890\n\nhttps://www.cnblogs.com/kevingrace/p/6187072.html","slug":"Nginx-添加SSL证书","published":1,"updated":"2021-05-05T07:45:34.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyc4000s69kj3pk8ebyu","content":"<p>在使用Chrome浏览器时，访问没有SSL的网页时会提醒网页不安全，添加过SSL证书之后，会有一个小锁，很好看。</p>\n<p>HTTP vs HTTPS: <a href=\"https://www.runoob.com/w3cnote/http-vs-https.html\">https://www.runoob.com/w3cnote/http-vs-https.html</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"申请SSL证书\"><a href=\"#申请SSL证书\" class=\"headerlink\" title=\"申请SSL证书\"></a>申请SSL证书</h1><p>阿里云和腾讯云都有免费的SSL证书可以申请，我用的是阿里云的云盾SSL证书，我用的服务器也是阿里云的，所以申请下来挺快的，大概几分钟。</p>\n<p>然后将证书下载下来，证书包含两个部分：.pem文件和.key文件，都需要上传到服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ scp dicer.fun.pem /home/git/SSL/</span><br><span class=\"line\"><span class=\"comment\"># 输入服务器密码</span></span><br><span class=\"line\">$ scp dicer.fun.key/home/git/SSL/</span><br><span class=\"line\"><span class=\"comment\"># 输入服务器密码</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改nginx-conf\"><a href=\"#修改nginx-conf\" class=\"headerlink\" title=\"修改nginx.conf\"></a>修改nginx.conf</h1><p>在ningx.conf中添加以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">     listen       443 ssl;</span><br><span class=\"line\">     listen       [::]:443 ssl;</span><br><span class=\"line\">     server_name  dicer.fun;</span><br><span class=\"line\">     root         /usr/share/nginx/html/blog;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\"># ssl                 on;</span></span><br><span class=\"line\">     ssl_certificate     <span class=\"string\">&quot;/home/git/SSL/dicer.fun.pem&quot;</span>;</span><br><span class=\"line\">     ssl_certificate_key <span class=\"string\">&quot;/home/git/SSL/dicer.fun.key&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">     ssl_session_timeout  10m;</span><br><span class=\"line\">     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">     ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">     ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">     include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">     location / &#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     error_page 404 /404.html;</span><br><span class=\"line\">         location = /40x.html &#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">         location = /50x.html &#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 server_name, root, ssl_certificate, ssl_certificate_key 需要进行对应的修改。</p>\n<h1 id=\"验证nginx-conf-并重启服务\"><a href=\"#验证nginx-conf-并重启服务\" class=\"headerlink\" title=\"验证nginx.conf 并重启服务\"></a>验证nginx.conf 并重启服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"重定向HTTP到HTTPS\"><a href=\"#重定向HTTP到HTTPS\" class=\"headerlink\" title=\"重定向HTTP到HTTPS\"></a>重定向HTTP到HTTPS</h1><p>在80端口的解析中，添加重定向。</p>\n<p>状态码301表示永久重定向。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">         listen       80 default_server;</span><br><span class=\"line\">         listen       [::]:80 default_server;</span><br><span class=\"line\">         server_name  dicer.fun;</span><br><span class=\"line\">         root         /usr/share/nginx/html/blog;</span><br><span class=\"line\"> </span><br><span class=\"line\">         <span class=\"built_in\">return</span> 301 https://$server_name<span class=\"variable\">$request_uri</span>; <span class=\"comment\"># 重定向</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">         include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"> </span><br><span class=\"line\">         location / &#123;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">         error_page 404 /404.html;</span><br><span class=\"line\">             location = /40x.html &#123;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">         error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">             location = /50x.html &#123;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改文件后，需要重启nginx服务。</p>\n<h1 id=\"REFERENCES\"><a href=\"#REFERENCES\" class=\"headerlink\" title=\"REFERENCES\"></a>REFERENCES</h1><p><a href=\"https://segmentfault.com/a/1190000009363890\">https://segmentfault.com/a/1190000009363890</a></p>\n<p><a href=\"https://www.cnblogs.com/kevingrace/p/6187072.html\">https://www.cnblogs.com/kevingrace/p/6187072.html</a></p>\n","site":{"data":{}},"excerpt":"<p>在使用Chrome浏览器时，访问没有SSL的网页时会提醒网页不安全，添加过SSL证书之后，会有一个小锁，很好看。</p>\n<p>HTTP vs HTTPS: <a href=\"https://www.runoob.com/w3cnote/http-vs-https.html\">https://www.runoob.com/w3cnote/http-vs-https.html</a></p>","more":"<h1 id=\"申请SSL证书\"><a href=\"#申请SSL证书\" class=\"headerlink\" title=\"申请SSL证书\"></a>申请SSL证书</h1><p>阿里云和腾讯云都有免费的SSL证书可以申请，我用的是阿里云的云盾SSL证书，我用的服务器也是阿里云的，所以申请下来挺快的，大概几分钟。</p>\n<p>然后将证书下载下来，证书包含两个部分：.pem文件和.key文件，都需要上传到服务器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ scp dicer.fun.pem /home/git/SSL/</span><br><span class=\"line\"><span class=\"comment\"># 输入服务器密码</span></span><br><span class=\"line\">$ scp dicer.fun.key/home/git/SSL/</span><br><span class=\"line\"><span class=\"comment\"># 输入服务器密码</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"修改nginx-conf\"><a href=\"#修改nginx-conf\" class=\"headerlink\" title=\"修改nginx.conf\"></a>修改nginx.conf</h1><p>在ningx.conf中添加以下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">     listen       443 ssl;</span><br><span class=\"line\">     listen       [::]:443 ssl;</span><br><span class=\"line\">     server_name  dicer.fun;</span><br><span class=\"line\">     root         /usr/share/nginx/html/blog;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\"># ssl                 on;</span></span><br><span class=\"line\">     ssl_certificate     <span class=\"string\">&quot;/home/git/SSL/dicer.fun.pem&quot;</span>;</span><br><span class=\"line\">     ssl_certificate_key <span class=\"string\">&quot;/home/git/SSL/dicer.fun.key&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     ssl_session_cache shared:SSL:1m;</span><br><span class=\"line\">     ssl_session_timeout  10m;</span><br><span class=\"line\">     ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">     ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\">     ssl_prefer_server_ciphers on;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">     include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"></span><br><span class=\"line\">     location / &#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     error_page 404 /404.html;</span><br><span class=\"line\">         location = /40x.html &#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">         location = /50x.html &#123;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>其中 server_name, root, ssl_certificate, ssl_certificate_key 需要进行对应的修改。</p>\n<h1 id=\"验证nginx-conf-并重启服务\"><a href=\"#验证nginx-conf-并重启服务\" class=\"headerlink\" title=\"验证nginx.conf 并重启服务\"></a>验证nginx.conf 并重启服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"重定向HTTP到HTTPS\"><a href=\"#重定向HTTP到HTTPS\" class=\"headerlink\" title=\"重定向HTTP到HTTPS\"></a>重定向HTTP到HTTPS</h1><p>在80端口的解析中，添加重定向。</p>\n<p>状态码301表示永久重定向。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">         listen       80 default_server;</span><br><span class=\"line\">         listen       [::]:80 default_server;</span><br><span class=\"line\">         server_name  dicer.fun;</span><br><span class=\"line\">         root         /usr/share/nginx/html/blog;</span><br><span class=\"line\"> </span><br><span class=\"line\">         <span class=\"built_in\">return</span> 301 https://$server_name<span class=\"variable\">$request_uri</span>; <span class=\"comment\"># 重定向</span></span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">         include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\"> </span><br><span class=\"line\">         location / &#123;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">         error_page 404 /404.html;</span><br><span class=\"line\">             location = /40x.html &#123;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">         error_page 500 502 503 504 /50x.html;</span><br><span class=\"line\">             location = /50x.html &#123;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改文件后，需要重启nginx服务。</p>\n<h1 id=\"REFERENCES\"><a href=\"#REFERENCES\" class=\"headerlink\" title=\"REFERENCES\"></a>REFERENCES</h1><p><a href=\"https://segmentfault.com/a/1190000009363890\">https://segmentfault.com/a/1190000009363890</a></p>\n<p><a href=\"https://www.cnblogs.com/kevingrace/p/6187072.html\">https://www.cnblogs.com/kevingrace/p/6187072.html</a></p>"},{"title":"拉格朗日乘数法","thumbnail":"/gallery/others/LagrangeMultipliers2D.svg","date":"2019-07-19T07:53:05.000Z","_content":"\n简单来说，拉格朗日乘子法可以解决$f(\\hat x)$在一些限制条件$g_k(\\hat x) = c_k$下的极值。\n\n<!--more-->\n\n## Mushroom Scientists\n\n[Link](https://codeforces.com/contest/186/problem/D)\n\n### Prove\n\n本题题意就是给了一个函数$f(x,y,z) = x^a + y^b + z^c$，求这个函数在约束条件$g(x,y,z) = x + y + z - S$下的最大值。\n\n首先，设拉格朗日函数：\n\n$$L(x,y,z,\\lambda) = f - \\lambda \\cdot g$$\n\n然后对各个变量求偏导数：\n\n$$\\frac{\\partial L}{\\partial x} = y^b\\cdot z^c \\cdot ax^{a-1} - \\lambda$$\n\n$$\\frac{\\partial L}{\\partial y} = x^a\\cdot z^c \\cdot by^{b-1} - \\lambda$$\n\n$$\\frac{\\partial L}{\\partial z} = x^a\\cdot y^b \\cdot cz^{c-1} - \\lambda$$\n\n$$\\frac{\\partial L}{\\partial \\lambda} = x + y + z - S$$\n\n可以解出：\n\n$$\\frac{x}{a} = \\frac{y}{b} = \\frac{z}{c}$$\n\n所以：\n\n$$x = \\frac{S\\cdot a}{a+b+c}, y = \\frac{S\\cdot b}{a+b+c}, z = \\frac{S\\cdot c}{a+b+c}$$\n\n### 代码\n\n~~~c++\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<iomanip>\nusing namespace std;\n \nconst int MAXN = 1e5 + 7;\nconst int mod = 1e9 + 7;\ntypedef long long ll;\n \nint main(){\n    cout << fixed;\n    int s;\n    int a, b, c;\n    cin >> s >> a >> b >> c;\n    if(a + b + c == 0){\n        cout << 0 << ' ' << 0 << ' ' << 0 << endl;\n    } else {\n        cout << setprecision(12) << (1.0*s*a/(a+b+c)) << ' ' << (1.0*s*b/(a+b+c)) << ' ' << (1.0*s*c/(a+b+c)) << endl;\n    }\n    return 0;\n}\n~~~\n\n## Samantha and Portfolio Management\n[Link](https://www.hackerrank.com/contests/morgan-stanley-2016/challenges/samantha-and-portfolio-management)\n\n### Prove\n\n约束条件下的极值问题，可以用拉格朗日乘子法解决。\n\n约束条件：\n$$g(\\boldsymbol w) = \\sum_{i=1}^{n}{w_i} - 1$$\n\n极值方程：\n\n$$f(\\boldsymbol w) = \\sum_{i=1}^{n}{(w_i^2 \\cdot \\sigma_i^2)} = \\sum_{i=1}^{n}(w_i^2 \\cdot \\frac{1}{i})$$\n\n\n拉格朗日方程：\n\n$$L(\\boldsymbol w, \\lambda) = f(\\boldsymbol w) - \\lambda \\cdot g(\\boldsymbol w)$$\n\n分别对 $\\boldsymbol w , \\lambda$ 求导：\n\n$$\\frac{\\partial(L)}{\\partial(w_i)} = 2 \\frac{w_i}{i} - \\lambda$$\n\n$$\\frac{\\partial(L)}{\\partial(\\lambda)} = g(\\boldsymbol{w}) = 1 - \\sum_{i=1}^{n}{w_i}$$\n\n则有：\n\n$$w_i = \\frac{\\lambda \\cdot i}{2}$$\n\n移项：\n\n$$\\sum_{i=1}^{n}{w_i} = \\frac{\\lambda \\cdot \\sum_{i=1}^{n}(i)}{2} = \\frac\n{\\lambda \\cdot n(n+1)}{4} = 1$$\n\n则：\n$$\\lambda = \\frac{4}{n(n+1)}$$\n\n$$w_i = \\frac{\\lambda \\cdot i}{2} = \\frac{2\\cdot i}{n(n+1)}$$\n\n所以：\n\n$$V = \\sum_{i=1}^{n}{w_i^2\\times \\sigma_i^2 } = \\sum_{i=1}^{n}{\\frac{4\\cdot i}(n^2(n+1)^2)} = \\frac{1}{n(n+1)}$$\n\n$$E = \\sum_{i=1}^{n}{w_i \\times \\bar r_i} = \\sum_{i=1}^{n}\\frac{(2\\cdot i \\cdot \\bar r_i)}{n(n+1)}$$\n\n然后就可以愉快的$O(n)$解决了。\n\n### 代码\n~~~c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 1e5 + 7;\nint r[MAXN];\n\nvoid print(long long a, long long b) {\n    long long g = __gcd(a, b);\n    a /= g; b /= g;\n    printf(\"%d %d\\n\", a, b);\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    long long sum = 0;\n    for(int i = 1; i <= n; ++i) {\n        scanf(\"%d\", r+i);\n        sum += 1LL * i * r[i];\n    }\n    print(2 * sum, 1LL * n * (n+1));\n    print(2LL, n * (n+1));\n    return 0;\n}\n~~~\n\n# 参考\n\n1.[Wikipedia-Lagrange-Multiplier](https://en.wikipedia.org/wiki/Lagrange_multiplier)\n2.http://jermmy.xyz/2017/07/27/2017-7-27-understand-lagrange-multiplier/","source":"_posts/Lagrange-Multiplier.md","raw":"---\ntitle: 拉格朗日乘数法\nthumbnail: /gallery/others/LagrangeMultipliers2D.svg\ndate: 2019-07-19 15:53:05\ntags: \n    - 拉格朗日乘数法\n    - 数论\ncategories: \n---\n\n简单来说，拉格朗日乘子法可以解决$f(\\hat x)$在一些限制条件$g_k(\\hat x) = c_k$下的极值。\n\n<!--more-->\n\n## Mushroom Scientists\n\n[Link](https://codeforces.com/contest/186/problem/D)\n\n### Prove\n\n本题题意就是给了一个函数$f(x,y,z) = x^a + y^b + z^c$，求这个函数在约束条件$g(x,y,z) = x + y + z - S$下的最大值。\n\n首先，设拉格朗日函数：\n\n$$L(x,y,z,\\lambda) = f - \\lambda \\cdot g$$\n\n然后对各个变量求偏导数：\n\n$$\\frac{\\partial L}{\\partial x} = y^b\\cdot z^c \\cdot ax^{a-1} - \\lambda$$\n\n$$\\frac{\\partial L}{\\partial y} = x^a\\cdot z^c \\cdot by^{b-1} - \\lambda$$\n\n$$\\frac{\\partial L}{\\partial z} = x^a\\cdot y^b \\cdot cz^{c-1} - \\lambda$$\n\n$$\\frac{\\partial L}{\\partial \\lambda} = x + y + z - S$$\n\n可以解出：\n\n$$\\frac{x}{a} = \\frac{y}{b} = \\frac{z}{c}$$\n\n所以：\n\n$$x = \\frac{S\\cdot a}{a+b+c}, y = \\frac{S\\cdot b}{a+b+c}, z = \\frac{S\\cdot c}{a+b+c}$$\n\n### 代码\n\n~~~c++\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<iomanip>\nusing namespace std;\n \nconst int MAXN = 1e5 + 7;\nconst int mod = 1e9 + 7;\ntypedef long long ll;\n \nint main(){\n    cout << fixed;\n    int s;\n    int a, b, c;\n    cin >> s >> a >> b >> c;\n    if(a + b + c == 0){\n        cout << 0 << ' ' << 0 << ' ' << 0 << endl;\n    } else {\n        cout << setprecision(12) << (1.0*s*a/(a+b+c)) << ' ' << (1.0*s*b/(a+b+c)) << ' ' << (1.0*s*c/(a+b+c)) << endl;\n    }\n    return 0;\n}\n~~~\n\n## Samantha and Portfolio Management\n[Link](https://www.hackerrank.com/contests/morgan-stanley-2016/challenges/samantha-and-portfolio-management)\n\n### Prove\n\n约束条件下的极值问题，可以用拉格朗日乘子法解决。\n\n约束条件：\n$$g(\\boldsymbol w) = \\sum_{i=1}^{n}{w_i} - 1$$\n\n极值方程：\n\n$$f(\\boldsymbol w) = \\sum_{i=1}^{n}{(w_i^2 \\cdot \\sigma_i^2)} = \\sum_{i=1}^{n}(w_i^2 \\cdot \\frac{1}{i})$$\n\n\n拉格朗日方程：\n\n$$L(\\boldsymbol w, \\lambda) = f(\\boldsymbol w) - \\lambda \\cdot g(\\boldsymbol w)$$\n\n分别对 $\\boldsymbol w , \\lambda$ 求导：\n\n$$\\frac{\\partial(L)}{\\partial(w_i)} = 2 \\frac{w_i}{i} - \\lambda$$\n\n$$\\frac{\\partial(L)}{\\partial(\\lambda)} = g(\\boldsymbol{w}) = 1 - \\sum_{i=1}^{n}{w_i}$$\n\n则有：\n\n$$w_i = \\frac{\\lambda \\cdot i}{2}$$\n\n移项：\n\n$$\\sum_{i=1}^{n}{w_i} = \\frac{\\lambda \\cdot \\sum_{i=1}^{n}(i)}{2} = \\frac\n{\\lambda \\cdot n(n+1)}{4} = 1$$\n\n则：\n$$\\lambda = \\frac{4}{n(n+1)}$$\n\n$$w_i = \\frac{\\lambda \\cdot i}{2} = \\frac{2\\cdot i}{n(n+1)}$$\n\n所以：\n\n$$V = \\sum_{i=1}^{n}{w_i^2\\times \\sigma_i^2 } = \\sum_{i=1}^{n}{\\frac{4\\cdot i}(n^2(n+1)^2)} = \\frac{1}{n(n+1)}$$\n\n$$E = \\sum_{i=1}^{n}{w_i \\times \\bar r_i} = \\sum_{i=1}^{n}\\frac{(2\\cdot i \\cdot \\bar r_i)}{n(n+1)}$$\n\n然后就可以愉快的$O(n)$解决了。\n\n### 代码\n~~~c++\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 1e5 + 7;\nint r[MAXN];\n\nvoid print(long long a, long long b) {\n    long long g = __gcd(a, b);\n    a /= g; b /= g;\n    printf(\"%d %d\\n\", a, b);\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    long long sum = 0;\n    for(int i = 1; i <= n; ++i) {\n        scanf(\"%d\", r+i);\n        sum += 1LL * i * r[i];\n    }\n    print(2 * sum, 1LL * n * (n+1));\n    print(2LL, n * (n+1));\n    return 0;\n}\n~~~\n\n# 参考\n\n1.[Wikipedia-Lagrange-Multiplier](https://en.wikipedia.org/wiki/Lagrange_multiplier)\n2.http://jermmy.xyz/2017/07/27/2017-7-27-understand-lagrange-multiplier/","slug":"Lagrange-Multiplier","published":1,"updated":"2021-03-28T08:52:37.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyc5000t69kj6ibzcv23","content":"<p>简单来说，拉格朗日乘子法可以解决$f(\\hat x)$在一些限制条件$g_k(\\hat x) = c_k$下的极值。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Mushroom-Scientists\"><a href=\"#Mushroom-Scientists\" class=\"headerlink\" title=\"Mushroom Scientists\"></a>Mushroom Scientists</h2><p><a href=\"https://codeforces.com/contest/186/problem/D\">Link</a></p>\n<h3 id=\"Prove\"><a href=\"#Prove\" class=\"headerlink\" title=\"Prove\"></a>Prove</h3><p>本题题意就是给了一个函数$f(x,y,z) = x^a + y^b + z^c$，求这个函数在约束条件$g(x,y,z) = x + y + z - S$下的最大值。</p>\n<p>首先，设拉格朗日函数：</p>\n<p>$$L(x,y,z,\\lambda) = f - \\lambda \\cdot g$$</p>\n<p>然后对各个变量求偏导数：</p>\n<p>$$\\frac{\\partial L}{\\partial x} = y^b\\cdot z^c \\cdot ax^{a-1} - \\lambda$$</p>\n<p>$$\\frac{\\partial L}{\\partial y} = x^a\\cdot z^c \\cdot by^{b-1} - \\lambda$$</p>\n<p>$$\\frac{\\partial L}{\\partial z} = x^a\\cdot y^b \\cdot cz^{c-1} - \\lambda$$</p>\n<p>$$\\frac{\\partial L}{\\partial \\lambda} = x + y + z - S$$</p>\n<p>可以解出：</p>\n<p>$$\\frac{x}{a} = \\frac{y}{b} = \\frac{z}{c}$$</p>\n<p>所以：</p>\n<p>$$x = \\frac{S\\cdot a}{a+b+c}, y = \\frac{S\\cdot b}{a+b+c}, z = \\frac{S\\cdot c}{a+b+c}$$</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; fixed;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">    cin &gt;&gt; s &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a + b + c == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">12</span>) &lt;&lt; (<span class=\"number\">1.0</span>*s*a/(a+b+c)) &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; (<span class=\"number\">1.0</span>*s*b/(a+b+c)) &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; (<span class=\"number\">1.0</span>*s*c/(a+b+c)) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Samantha-and-Portfolio-Management\"><a href=\"#Samantha-and-Portfolio-Management\" class=\"headerlink\" title=\"Samantha and Portfolio Management\"></a>Samantha and Portfolio Management</h2><p><a href=\"https://www.hackerrank.com/contests/morgan-stanley-2016/challenges/samantha-and-portfolio-management\">Link</a></p>\n<h3 id=\"Prove-1\"><a href=\"#Prove-1\" class=\"headerlink\" title=\"Prove\"></a>Prove</h3><p>约束条件下的极值问题，可以用拉格朗日乘子法解决。</p>\n<p>约束条件：<br>$$g(\\boldsymbol w) = \\sum_{i=1}^{n}{w_i} - 1$$</p>\n<p>极值方程：</p>\n<p>$$f(\\boldsymbol w) = \\sum_{i=1}^{n}{(w_i^2 \\cdot \\sigma_i^2)} = \\sum_{i=1}^{n}(w_i^2 \\cdot \\frac{1}{i})$$</p>\n<p>拉格朗日方程：</p>\n<p>$$L(\\boldsymbol w, \\lambda) = f(\\boldsymbol w) - \\lambda \\cdot g(\\boldsymbol w)$$</p>\n<p>分别对 $\\boldsymbol w , \\lambda$ 求导：</p>\n<p>$$\\frac{\\partial(L)}{\\partial(w_i)} = 2 \\frac{w_i}{i} - \\lambda$$</p>\n<p>$$\\frac{\\partial(L)}{\\partial(\\lambda)} = g(\\boldsymbol{w}) = 1 - \\sum_{i=1}^{n}{w_i}$$</p>\n<p>则有：</p>\n<p>$$w_i = \\frac{\\lambda \\cdot i}{2}$$</p>\n<p>移项：</p>\n<p>$$\\sum_{i=1}^{n}{w_i} = \\frac{\\lambda \\cdot \\sum_{i=1}^{n}(i)}{2} = \\frac<br>{\\lambda \\cdot n(n+1)}{4} = 1$$</p>\n<p>则：<br>$$\\lambda = \\frac{4}{n(n+1)}$$</p>\n<p>$$w_i = \\frac{\\lambda \\cdot i}{2} = \\frac{2\\cdot i}{n(n+1)}$$</p>\n<p>所以：</p>\n<p>$$V = \\sum_{i=1}^{n}{w_i^2\\times \\sigma_i^2 } = \\sum_{i=1}^{n}{\\frac{4\\cdot i}(n^2(n+1)^2)} = \\frac{1}{n(n+1)}$$</p>\n<p>$$E = \\sum_{i=1}^{n}{w_i \\times \\bar r_i} = \\sum_{i=1}^{n}\\frac{(2\\cdot i \\cdot \\bar r_i)}{n(n+1)}$$</p>\n<p>然后就可以愉快的$O(n)$解决了。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> r[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> g = __gcd(a, b);</span><br><span class=\"line\">    a /= g; b /= g;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, a, b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, r+i);</span><br><span class=\"line\">        sum += <span class=\"number\">1LL</span> * i * r[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span> * sum, <span class=\"number\">1LL</span> * n * (n+<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2LL</span>, n * (n+<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>1.<a href=\"https://en.wikipedia.org/wiki/Lagrange_multiplier\">Wikipedia-Lagrange-Multiplier</a><br>2.<a href=\"http://jermmy.xyz/2017/07/27/2017-7-27-understand-lagrange-multiplier/\">http://jermmy.xyz/2017/07/27/2017-7-27-understand-lagrange-multiplier/</a></p>\n","site":{"data":{}},"excerpt":"<p>简单来说，拉格朗日乘子法可以解决$f(\\hat x)$在一些限制条件$g_k(\\hat x) = c_k$下的极值。</p>","more":"<h2 id=\"Mushroom-Scientists\"><a href=\"#Mushroom-Scientists\" class=\"headerlink\" title=\"Mushroom Scientists\"></a>Mushroom Scientists</h2><p><a href=\"https://codeforces.com/contest/186/problem/D\">Link</a></p>\n<h3 id=\"Prove\"><a href=\"#Prove\" class=\"headerlink\" title=\"Prove\"></a>Prove</h3><p>本题题意就是给了一个函数$f(x,y,z) = x^a + y^b + z^c$，求这个函数在约束条件$g(x,y,z) = x + y + z - S$下的最大值。</p>\n<p>首先，设拉格朗日函数：</p>\n<p>$$L(x,y,z,\\lambda) = f - \\lambda \\cdot g$$</p>\n<p>然后对各个变量求偏导数：</p>\n<p>$$\\frac{\\partial L}{\\partial x} = y^b\\cdot z^c \\cdot ax^{a-1} - \\lambda$$</p>\n<p>$$\\frac{\\partial L}{\\partial y} = x^a\\cdot z^c \\cdot by^{b-1} - \\lambda$$</p>\n<p>$$\\frac{\\partial L}{\\partial z} = x^a\\cdot y^b \\cdot cz^{c-1} - \\lambda$$</p>\n<p>$$\\frac{\\partial L}{\\partial \\lambda} = x + y + z - S$$</p>\n<p>可以解出：</p>\n<p>$$\\frac{x}{a} = \\frac{y}{b} = \\frac{z}{c}$$</p>\n<p>所以：</p>\n<p>$$x = \\frac{S\\cdot a}{a+b+c}, y = \\frac{S\\cdot b}{a+b+c}, z = \\frac{S\\cdot c}{a+b+c}$$</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iomanip&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; fixed;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">    cin &gt;&gt; s &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a + b + c == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">setprecision</span>(<span class=\"number\">12</span>) &lt;&lt; (<span class=\"number\">1.0</span>*s*a/(a+b+c)) &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; (<span class=\"number\">1.0</span>*s*b/(a+b+c)) &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; (<span class=\"number\">1.0</span>*s*c/(a+b+c)) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Samantha-and-Portfolio-Management\"><a href=\"#Samantha-and-Portfolio-Management\" class=\"headerlink\" title=\"Samantha and Portfolio Management\"></a>Samantha and Portfolio Management</h2><p><a href=\"https://www.hackerrank.com/contests/morgan-stanley-2016/challenges/samantha-and-portfolio-management\">Link</a></p>\n<h3 id=\"Prove-1\"><a href=\"#Prove-1\" class=\"headerlink\" title=\"Prove\"></a>Prove</h3><p>约束条件下的极值问题，可以用拉格朗日乘子法解决。</p>\n<p>约束条件：<br>$$g(\\boldsymbol w) = \\sum_{i=1}^{n}{w_i} - 1$$</p>\n<p>极值方程：</p>\n<p>$$f(\\boldsymbol w) = \\sum_{i=1}^{n}{(w_i^2 \\cdot \\sigma_i^2)} = \\sum_{i=1}^{n}(w_i^2 \\cdot \\frac{1}{i})$$</p>\n<p>拉格朗日方程：</p>\n<p>$$L(\\boldsymbol w, \\lambda) = f(\\boldsymbol w) - \\lambda \\cdot g(\\boldsymbol w)$$</p>\n<p>分别对 $\\boldsymbol w , \\lambda$ 求导：</p>\n<p>$$\\frac{\\partial(L)}{\\partial(w_i)} = 2 \\frac{w_i}{i} - \\lambda$$</p>\n<p>$$\\frac{\\partial(L)}{\\partial(\\lambda)} = g(\\boldsymbol{w}) = 1 - \\sum_{i=1}^{n}{w_i}$$</p>\n<p>则有：</p>\n<p>$$w_i = \\frac{\\lambda \\cdot i}{2}$$</p>\n<p>移项：</p>\n<p>$$\\sum_{i=1}^{n}{w_i} = \\frac{\\lambda \\cdot \\sum_{i=1}^{n}(i)}{2} = \\frac<br>{\\lambda \\cdot n(n+1)}{4} = 1$$</p>\n<p>则：<br>$$\\lambda = \\frac{4}{n(n+1)}$$</p>\n<p>$$w_i = \\frac{\\lambda \\cdot i}{2} = \\frac{2\\cdot i}{n(n+1)}$$</p>\n<p>所以：</p>\n<p>$$V = \\sum_{i=1}^{n}{w_i^2\\times \\sigma_i^2 } = \\sum_{i=1}^{n}{\\frac{4\\cdot i}(n^2(n+1)^2)} = \\frac{1}{n(n+1)}$$</p>\n<p>$$E = \\sum_{i=1}^{n}{w_i \\times \\bar r_i} = \\sum_{i=1}^{n}\\frac{(2\\cdot i \\cdot \\bar r_i)}{n(n+1)}$$</p>\n<p>然后就可以愉快的$O(n)$解决了。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> r[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> g = __gcd(a, b);</span><br><span class=\"line\">    a /= g; b /= g;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, a, b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, r+i);</span><br><span class=\"line\">        sum += <span class=\"number\">1LL</span> * i * r[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2</span> * sum, <span class=\"number\">1LL</span> * n * (n+<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"number\">2LL</span>, n * (n+<span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>1.<a href=\"https://en.wikipedia.org/wiki/Lagrange_multiplier\">Wikipedia-Lagrange-Multiplier</a><br>2.<a href=\"http://jermmy.xyz/2017/07/27/2017-7-27-understand-lagrange-multiplier/\">http://jermmy.xyz/2017/07/27/2017-7-27-understand-lagrange-multiplier/</a></p>"},{"title":"ECNU 往年机试","thumbnail":"/gallery/thumbnails/kite.png","date":"2021-03-08T09:27:28.000Z","_content":"\n# 两场EOJ上公开的机试\n\nEOJ上好多机试题都关闭了，只剩下这两场了。\n\n我和那一场区域赛难度的机试似乎无缘相见了。\n\n题目简单，不想写题解。\n\n<!--more-->\n\n# 2018 研究生面试机考 (软件工程)\n\nLink: https://acm.ecnu.edu.cn/contest/61/\n\n## A\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint n, m;\n\tcin >> n >> m;\n\tint sum = 0;\n\tfor(int i = 1; i <= n; i++) {\n\t\tint tmp = 0, x;\n\t\tfor(int j = 1; j <= m; j++) {\n\t\t\tcin >> x;\n\t\t\ttmp = max(tmp, x);\n\t\t}\n\t\tsum += tmp;\n\t}\n\tcout << sum << endl;\n\treturn 0;\n}\n```\n\n## B\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint arr[21][21];\n\nint main() {\n\tint n;\n\tcin >> n;\n\tfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = 1; j <= i; j++) {\n\t\t\tif(j == 1 || j == i)\tarr[i][j] = 1;\n\t\t\telse arr[i][j] = arr[i-1][j-1] + arr[i-1][j];\n\t\t}\n\t\tfor(int j = 1; j <= i; j++) {\n\t\t\tprintf(\"%d%c\", arr[i][j], (i == j)?'\\\\n':' ');\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## C\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nstring s[21];\n\nint main() {\n\tint n;\n\tcin >> n;\n\tfor(int i = 1; i <= n; i++)\tcin >> s[i];\n\tsort(s+1, s+1+n, [](string s1, string s2) -> bool {\n\t\tint n = min(s1.size(), s2.size());\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(s1[i] > s2[i])\treturn 1;\n\t\t\telse if(s1[i] < s2[i])\treturn 0;\n\t\t\telse\tcontinue;\n\t\t}\n\t\treturn 1;\n\t});\n\tfor(int i = 1; i <= n; i++)\tcout << s[i];\n\treturn 0;\n}\n```\n\n## D\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint n, k;\n\tcin >> n >> k;\n\tmap<int, bool> disable;\n\tfor(int i = 1; i <= k; i++) {\n\t\tint x; cin >> x;\n\t\tdisable[x] = 1;\n\t}\n\n\tvector<int> dp(n+1, 0);\n\tdp[0] = 1;\n\tfor(int i = 1; i <= n; i++) {\n\t\tint sum = 0;\n\t\tif(i - 1 >= 0 && disable[i-1] == 0)\tsum += dp[i-1];\n\t\tif(i - 2 >= 0 && disable[i-2] == 0)\tsum += dp[i-2];\n\t\tif(i - 3 >= 0 && disable[i-3] == 0)\tsum += dp[i-3];\n\t\tif(disable[i] == 0)\tdp[i] = sum;\n\t\telse\tdp[i] = 0;\n\t}\n\tcout << dp[n] << endl;\n\treturn 0;\n}\n```\n\n## E\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tmap<int, bool> one;\n\tone[1] = 1;\n\tint x = 1, p = 1;\n\twhile(x <= 1e9) {\n\t\tone[x+p] = 1;\n\t\tx += p;\n\t\tp++;\n\t}\n\tint n;\n\tcin >> n;\n\twhile(n--) {\n\t\tcin >> x;\n\t\tcout << one[x] << endl;\n\t}\n\treturn 0;\n}\n\n/*\n1 2 4 7 11\n*/\n```\n\n## F\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint n, m, k;\n\tcin >> n >> m >> k;\n\tint i = 0, j = 0;\n\twhile(k--) {\n\t\tcout << i + 1 << ' ' << j + 1 << endl;\n\t\ti++; i %= n;\n\t\tj++; j %= m;\n\t}\n\treturn 0;\n}\n```\n\n# 2018 研究生机试 (计算机系第二批)\n\nLink: https://acm.ecnu.edu.cn/contest/66/\n\n## A\n\n```python\na = [int(x) for x in input().split()]\nprint(max(a[1:]))\n```\n\n## B\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint n;\n\tcin >> n;\n\tfor(int i = 7; i >= 0; i--)\tcout << ((n>>i)&1);\n\treturn 0;\n}\n```\n\n## C\n\n```python\ns = input()\ncount = 0\nfor i in range(len(s)):\n\tcount += ('0' <=s[i] <= '9')\nprint(count)\n```\n\n## D\n\n```python\narr = [int(x) for x in input().split()][1:]\narr = sorted(arr)\n# print(arr)\nans = 0x7f7f7f7f\nfor i in range(1, len(arr)):\n\tans = min(ans, arr[i] - arr[i-1])\nprint(ans)\n```\n\n## E\n\n```python\narr = [int(x) for x in input().split()][1:]\narr.sort()\narr = arr[::-1]\narr.sort(key = lambda x: abs(x))\narr = arr[::-1]\nprint(','.join([str(x) for x in arr]))\n```\n\n## F\n\n```python\nimport struct\nf = float(input())\nm = struct.pack('d', f).hex()\nm = str(m).upper()\nm = [m[i*2:i*2+2] for i in range(0, 8)][::-1]\nm = '-'.join(m)\nprint(m)\n```","source":"_posts/ECNU-往年机试.md","raw":"---\ntitle: ECNU 往年机试\nthumbnail: /gallery/thumbnails/kite.png\ndate: 2021-03-08 17:27:28\ntags: \n\t- 考研\ncategories: \n\t- ECNU\n---\n\n# 两场EOJ上公开的机试\n\nEOJ上好多机试题都关闭了，只剩下这两场了。\n\n我和那一场区域赛难度的机试似乎无缘相见了。\n\n题目简单，不想写题解。\n\n<!--more-->\n\n# 2018 研究生面试机考 (软件工程)\n\nLink: https://acm.ecnu.edu.cn/contest/61/\n\n## A\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint n, m;\n\tcin >> n >> m;\n\tint sum = 0;\n\tfor(int i = 1; i <= n; i++) {\n\t\tint tmp = 0, x;\n\t\tfor(int j = 1; j <= m; j++) {\n\t\t\tcin >> x;\n\t\t\ttmp = max(tmp, x);\n\t\t}\n\t\tsum += tmp;\n\t}\n\tcout << sum << endl;\n\treturn 0;\n}\n```\n\n## B\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint arr[21][21];\n\nint main() {\n\tint n;\n\tcin >> n;\n\tfor(int i = 1; i <= n; i++) {\n\t\tfor(int j = 1; j <= i; j++) {\n\t\t\tif(j == 1 || j == i)\tarr[i][j] = 1;\n\t\t\telse arr[i][j] = arr[i-1][j-1] + arr[i-1][j];\n\t\t}\n\t\tfor(int j = 1; j <= i; j++) {\n\t\t\tprintf(\"%d%c\", arr[i][j], (i == j)?'\\\\n':' ');\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n## C\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nstring s[21];\n\nint main() {\n\tint n;\n\tcin >> n;\n\tfor(int i = 1; i <= n; i++)\tcin >> s[i];\n\tsort(s+1, s+1+n, [](string s1, string s2) -> bool {\n\t\tint n = min(s1.size(), s2.size());\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tif(s1[i] > s2[i])\treturn 1;\n\t\t\telse if(s1[i] < s2[i])\treturn 0;\n\t\t\telse\tcontinue;\n\t\t}\n\t\treturn 1;\n\t});\n\tfor(int i = 1; i <= n; i++)\tcout << s[i];\n\treturn 0;\n}\n```\n\n## D\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint n, k;\n\tcin >> n >> k;\n\tmap<int, bool> disable;\n\tfor(int i = 1; i <= k; i++) {\n\t\tint x; cin >> x;\n\t\tdisable[x] = 1;\n\t}\n\n\tvector<int> dp(n+1, 0);\n\tdp[0] = 1;\n\tfor(int i = 1; i <= n; i++) {\n\t\tint sum = 0;\n\t\tif(i - 1 >= 0 && disable[i-1] == 0)\tsum += dp[i-1];\n\t\tif(i - 2 >= 0 && disable[i-2] == 0)\tsum += dp[i-2];\n\t\tif(i - 3 >= 0 && disable[i-3] == 0)\tsum += dp[i-3];\n\t\tif(disable[i] == 0)\tdp[i] = sum;\n\t\telse\tdp[i] = 0;\n\t}\n\tcout << dp[n] << endl;\n\treturn 0;\n}\n```\n\n## E\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tmap<int, bool> one;\n\tone[1] = 1;\n\tint x = 1, p = 1;\n\twhile(x <= 1e9) {\n\t\tone[x+p] = 1;\n\t\tx += p;\n\t\tp++;\n\t}\n\tint n;\n\tcin >> n;\n\twhile(n--) {\n\t\tcin >> x;\n\t\tcout << one[x] << endl;\n\t}\n\treturn 0;\n}\n\n/*\n1 2 4 7 11\n*/\n```\n\n## F\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint n, m, k;\n\tcin >> n >> m >> k;\n\tint i = 0, j = 0;\n\twhile(k--) {\n\t\tcout << i + 1 << ' ' << j + 1 << endl;\n\t\ti++; i %= n;\n\t\tj++; j %= m;\n\t}\n\treturn 0;\n}\n```\n\n# 2018 研究生机试 (计算机系第二批)\n\nLink: https://acm.ecnu.edu.cn/contest/66/\n\n## A\n\n```python\na = [int(x) for x in input().split()]\nprint(max(a[1:]))\n```\n\n## B\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint main() {\n\tint n;\n\tcin >> n;\n\tfor(int i = 7; i >= 0; i--)\tcout << ((n>>i)&1);\n\treturn 0;\n}\n```\n\n## C\n\n```python\ns = input()\ncount = 0\nfor i in range(len(s)):\n\tcount += ('0' <=s[i] <= '9')\nprint(count)\n```\n\n## D\n\n```python\narr = [int(x) for x in input().split()][1:]\narr = sorted(arr)\n# print(arr)\nans = 0x7f7f7f7f\nfor i in range(1, len(arr)):\n\tans = min(ans, arr[i] - arr[i-1])\nprint(ans)\n```\n\n## E\n\n```python\narr = [int(x) for x in input().split()][1:]\narr.sort()\narr = arr[::-1]\narr.sort(key = lambda x: abs(x))\narr = arr[::-1]\nprint(','.join([str(x) for x in arr]))\n```\n\n## F\n\n```python\nimport struct\nf = float(input())\nm = struct.pack('d', f).hex()\nm = str(m).upper()\nm = [m[i*2:i*2+2] for i in range(0, 8)][::-1]\nm = '-'.join(m)\nprint(m)\n```","slug":"ECNU-往年机试","published":1,"updated":"2021-03-28T08:44:30.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyc6000v69kjh3yf8ff7","content":"<h1 id=\"两场EOJ上公开的机试\"><a href=\"#两场EOJ上公开的机试\" class=\"headerlink\" title=\"两场EOJ上公开的机试\"></a>两场EOJ上公开的机试</h1><p>EOJ上好多机试题都关闭了，只剩下这两场了。</p>\n<p>我和那一场区域赛难度的机试似乎无缘相见了。</p>\n<p>题目简单，不想写题解。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"2018-研究生面试机考-软件工程\"><a href=\"#2018-研究生面试机考-软件工程\" class=\"headerlink\" title=\"2018 研究生面试机考 (软件工程)\"></a>2018 研究生面试机考 (软件工程)</h1><p>Link: <a href=\"https://acm.ecnu.edu.cn/contest/61/\">https://acm.ecnu.edu.cn/contest/61/</a></p>\n<h2 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>, x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\t\ttmp = <span class=\"built_in\">max</span>(tmp, x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsum += tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">21</span>][<span class=\"number\">21</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(j == <span class=\"number\">1</span> || j == i)\tarr[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> arr[i][j] = arr[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] + arr[i<span class=\"number\">-1</span>][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">\t\t\tprintf(&quot;%d%c&quot;, arr[i][j], (i == j)?&#x27;\\\\n&#x27;:&#x27; &#x27;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">string s[<span class=\"number\">21</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)\tcin &gt;&gt; s[i];</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(s+<span class=\"number\">1</span>, s+<span class=\"number\">1</span>+n, [](string s1, string s2) -&gt; <span class=\"keyword\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = <span class=\"built_in\">min</span>(s1.<span class=\"built_in\">size</span>(), s2.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s1[i] &gt; s2[i])\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s1[i] &lt; s2[i])\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)\tcout &lt;&lt; s[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"D\"></a>D</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">\tmap&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">bool</span>&gt; disable;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x; cin &gt;&gt; x;</span><br><span class=\"line\">\t\tdisable[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n+<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">\tdp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; disable[i<span class=\"number\">-1</span>] == <span class=\"number\">0</span>)\tsum += dp[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i - <span class=\"number\">2</span> &gt;= <span class=\"number\">0</span> &amp;&amp; disable[i<span class=\"number\">-2</span>] == <span class=\"number\">0</span>)\tsum += dp[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i - <span class=\"number\">3</span> &gt;= <span class=\"number\">0</span> &amp;&amp; disable[i<span class=\"number\">-3</span>] == <span class=\"number\">0</span>)\tsum += dp[i<span class=\"number\">-3</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(disable[i] == <span class=\"number\">0</span>)\tdp[i] = sum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>\tdp[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; dp[n] &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"E\"><a href=\"#E\" class=\"headerlink\" title=\"E\"></a>E</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tmap&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">bool</span>&gt; one;</span><br><span class=\"line\">\tone[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">1</span>, p = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(x &lt;= <span class=\"number\">1e9</span>) &#123;</span><br><span class=\"line\">\t\tone[x+p] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tx += p;</span><br><span class=\"line\">\t\tp++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\tcout &lt;&lt; one[x] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1 2 4 7 11</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F\"></a>F</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m, k;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(k--) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; j + <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\ti++; i %= n;</span><br><span class=\"line\">\t\tj++; j %= m;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2018-研究生机试-计算机系第二批\"><a href=\"#2018-研究生机试-计算机系第二批\" class=\"headerlink\" title=\"2018 研究生机试 (计算机系第二批)\"></a>2018 研究生机试 (计算机系第二批)</h1><p>Link: <a href=\"https://acm.ecnu.edu.cn/contest/66/\">https://acm.ecnu.edu.cn/contest/66/</a></p>\n<h2 id=\"A-1\"><a href=\"#A-1\" class=\"headerlink\" title=\"A\"></a>A</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"built_in\">int</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">input</span>().split()]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(a[<span class=\"number\">1</span>:]))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"B-1\"><a href=\"#B-1\" class=\"headerlink\" title=\"B\"></a>B</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">7</span>; i &gt;= <span class=\"number\">0</span>; i--)\tcout &lt;&lt; ((n&gt;&gt;i)&amp;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-1\"><a href=\"#C-1\" class=\"headerlink\" title=\"C\"></a>C</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s)):</span><br><span class=\"line\">\tcount += (<span class=\"string\">&#x27;0&#x27;</span> &lt;=s[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"D-1\"><a href=\"#D-1\" class=\"headerlink\" title=\"D\"></a>D</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [<span class=\"built_in\">int</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">input</span>().split()][<span class=\"number\">1</span>:]</span><br><span class=\"line\">arr = <span class=\"built_in\">sorted</span>(arr)</span><br><span class=\"line\"><span class=\"comment\"># print(arr)</span></span><br><span class=\"line\">ans = <span class=\"number\">0x7f7f7f7f</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(arr)):</span><br><span class=\"line\">\tans = <span class=\"built_in\">min</span>(ans, arr[i] - arr[i-<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ans)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"E-1\"><a href=\"#E-1\" class=\"headerlink\" title=\"E\"></a>E</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [<span class=\"built_in\">int</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">input</span>().split()][<span class=\"number\">1</span>:]</span><br><span class=\"line\">arr.sort()</span><br><span class=\"line\">arr = arr[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">arr.sort(key = <span class=\"keyword\">lambda</span> x: <span class=\"built_in\">abs</span>(x))</span><br><span class=\"line\">arr = arr[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;,&#x27;</span>.join([<span class=\"built_in\">str</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> arr]))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"F-1\"><a href=\"#F-1\" class=\"headerlink\" title=\"F\"></a>F</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\">f = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">m = struct.pack(<span class=\"string\">&#x27;d&#x27;</span>, f).<span class=\"built_in\">hex</span>()</span><br><span class=\"line\">m = <span class=\"built_in\">str</span>(m).upper()</span><br><span class=\"line\">m = [m[i*<span class=\"number\">2</span>:i*<span class=\"number\">2</span>+<span class=\"number\">2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">8</span>)][::-<span class=\"number\">1</span>]</span><br><span class=\"line\">m = <span class=\"string\">&#x27;-&#x27;</span>.join(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"两场EOJ上公开的机试\"><a href=\"#两场EOJ上公开的机试\" class=\"headerlink\" title=\"两场EOJ上公开的机试\"></a>两场EOJ上公开的机试</h1><p>EOJ上好多机试题都关闭了，只剩下这两场了。</p>\n<p>我和那一场区域赛难度的机试似乎无缘相见了。</p>\n<p>题目简单，不想写题解。</p>","more":"<h1 id=\"2018-研究生面试机考-软件工程\"><a href=\"#2018-研究生面试机考-软件工程\" class=\"headerlink\" title=\"2018 研究生面试机考 (软件工程)\"></a>2018 研究生面试机考 (软件工程)</h1><p>Link: <a href=\"https://acm.ecnu.edu.cn/contest/61/\">https://acm.ecnu.edu.cn/contest/61/</a></p>\n<h2 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tmp = <span class=\"number\">0</span>, x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">\t\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\t\ttmp = <span class=\"built_in\">max</span>(tmp, x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsum += tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; sum &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">21</span>][<span class=\"number\">21</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(j == <span class=\"number\">1</span> || j == i)\tarr[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> arr[i][j] = arr[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>] + arr[i<span class=\"number\">-1</span>][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">\t\t\tprintf(&quot;%d%c&quot;, arr[i][j], (i == j)?&#x27;\\\\n&#x27;:&#x27; &#x27;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">string s[<span class=\"number\">21</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)\tcin &gt;&gt; s[i];</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(s+<span class=\"number\">1</span>, s+<span class=\"number\">1</span>+n, [](string s1, string s2) -&gt; <span class=\"keyword\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> n = <span class=\"built_in\">min</span>(s1.<span class=\"built_in\">size</span>(), s2.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s1[i] &gt; s2[i])\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s1[i] &lt; s2[i])\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)\tcout &lt;&lt; s[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"D\"><a href=\"#D\" class=\"headerlink\" title=\"D\"></a>D</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, k;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">\tmap&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">bool</span>&gt; disable;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x; cin &gt;&gt; x;</span><br><span class=\"line\">\t\tdisable[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">vector&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n+<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">\tdp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; disable[i<span class=\"number\">-1</span>] == <span class=\"number\">0</span>)\tsum += dp[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i - <span class=\"number\">2</span> &gt;= <span class=\"number\">0</span> &amp;&amp; disable[i<span class=\"number\">-2</span>] == <span class=\"number\">0</span>)\tsum += dp[i<span class=\"number\">-2</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i - <span class=\"number\">3</span> &gt;= <span class=\"number\">0</span> &amp;&amp; disable[i<span class=\"number\">-3</span>] == <span class=\"number\">0</span>)\tsum += dp[i<span class=\"number\">-3</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(disable[i] == <span class=\"number\">0</span>)\tdp[i] = sum;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>\tdp[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcout &lt;&lt; dp[n] &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"E\"><a href=\"#E\" class=\"headerlink\" title=\"E\"></a>E</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tmap&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">bool</span>&gt; one;</span><br><span class=\"line\">\tone[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">1</span>, p = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(x &lt;= <span class=\"number\">1e9</span>) &#123;</span><br><span class=\"line\">\t\tone[x+p] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tx += p;</span><br><span class=\"line\">\t\tp++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; x;</span><br><span class=\"line\">\t\tcout &lt;&lt; one[x] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1 2 4 7 11</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F\"></a>F</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n, m, k;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(k--) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; i + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; j + <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\ti++; i %= n;</span><br><span class=\"line\">\t\tj++; j %= m;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2018-研究生机试-计算机系第二批\"><a href=\"#2018-研究生机试-计算机系第二批\" class=\"headerlink\" title=\"2018 研究生机试 (计算机系第二批)\"></a>2018 研究生机试 (计算机系第二批)</h1><p>Link: <a href=\"https://acm.ecnu.edu.cn/contest/66/\">https://acm.ecnu.edu.cn/contest/66/</a></p>\n<h2 id=\"A-1\"><a href=\"#A-1\" class=\"headerlink\" title=\"A\"></a>A</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"built_in\">int</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">input</span>().split()]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">max</span>(a[<span class=\"number\">1</span>:]))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"B-1\"><a href=\"#B-1\" class=\"headerlink\" title=\"B\"></a>B</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">7</span>; i &gt;= <span class=\"number\">0</span>; i--)\tcout &lt;&lt; ((n&gt;&gt;i)&amp;<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"C-1\"><a href=\"#C-1\" class=\"headerlink\" title=\"C\"></a>C</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s)):</span><br><span class=\"line\">\tcount += (<span class=\"string\">&#x27;0&#x27;</span> &lt;=s[i] &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(count)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"D-1\"><a href=\"#D-1\" class=\"headerlink\" title=\"D\"></a>D</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [<span class=\"built_in\">int</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">input</span>().split()][<span class=\"number\">1</span>:]</span><br><span class=\"line\">arr = <span class=\"built_in\">sorted</span>(arr)</span><br><span class=\"line\"><span class=\"comment\"># print(arr)</span></span><br><span class=\"line\">ans = <span class=\"number\">0x7f7f7f7f</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(arr)):</span><br><span class=\"line\">\tans = <span class=\"built_in\">min</span>(ans, arr[i] - arr[i-<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ans)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"E-1\"><a href=\"#E-1\" class=\"headerlink\" title=\"E\"></a>E</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [<span class=\"built_in\">int</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">input</span>().split()][<span class=\"number\">1</span>:]</span><br><span class=\"line\">arr.sort()</span><br><span class=\"line\">arr = arr[::-<span class=\"number\">1</span>]</span><br><span class=\"line\">arr.sort(key = <span class=\"keyword\">lambda</span> x: <span class=\"built_in\">abs</span>(x))</span><br><span class=\"line\">arr = arr[::-<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;,&#x27;</span>.join([<span class=\"built_in\">str</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> arr]))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"F-1\"><a href=\"#F-1\" class=\"headerlink\" title=\"F\"></a>F</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\">f = <span class=\"built_in\">float</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">m = struct.pack(<span class=\"string\">&#x27;d&#x27;</span>, f).<span class=\"built_in\">hex</span>()</span><br><span class=\"line\">m = <span class=\"built_in\">str</span>(m).upper()</span><br><span class=\"line\">m = [m[i*<span class=\"number\">2</span>:i*<span class=\"number\">2</span>+<span class=\"number\">2</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">8</span>)][::-<span class=\"number\">1</span>]</span><br><span class=\"line\">m = <span class=\"string\">&#x27;-&#x27;</span>.join(m)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m)</span><br></pre></td></tr></table></figure>"},{"title":"TJOI2013-松鼠聚会","thumbnail":"/gallery/thumbnails/johannes-roots-in-the-treetops-by-jkroots-d9t9p4y.jpg","date":"2019-09-05T13:47:23.000Z","_content":"\n# 题目\n\n[P3964 [TJOI2013]松鼠聚会](https://www.luogu.org/problem/P3964)\n\n关于曼哈顿坐标系和切比雪夫坐标系之间的相互转换。\n\n<!--more-->\n\n## 前置技能\n\n- 曼哈顿坐标系是通过切比雪夫坐标系旋转$45 ^\\circ $后，再缩小到原来的一半得到的。\n- 将一个点 $(x, y)$ 的坐标变为 $(x+y, x-y)$ 后，原坐标系中的曼哈顿距离等于新坐标系中的切比雪夫距离\n- 将一个点 $(x, y)$ 的坐标变为 $(\\frac{x+y}{2}, \\frac{x-y}{2})$ 后，原坐标系中的切比雪夫距离等于新坐标系中的曼哈顿距离\n\n## 分析\n\n首先，原题中定义的距离是切比雪夫距离，看着非常奇怪。\n\n我们先考虑如果是曼哈顿距离怎么做。\n\n考虑一些点： $$(x_1, y_1), (x_2, y_2), ... , (x_n, y_n)$$\n\n只需求出： $$\\min_{j=1}^{n}\\sum_{i=1}^{n}|x_i-x_j|+|y_i-y_j|$$。\n\n而： $$\\sum_{i=1}^{n}|x_i-x_j|+|y_i-y_j| = \\sum_{i=1}^{n}|x_i-x_j| + \\sum_{i=1}^{n}|y_i-y_j|$$\n\n发现这两个维度互不影响，可以分别求出 $x, y$ 轴的。\n\n先对 $x$ 从小到大排序，设 $pre_i$ 前 $i-1$ 个点到点 $i$ 的 $x$ 轴距离前缀和，即： $$pre_i = \\sum_{j=1}^{i-1}|x_i - x_j|$$\n\n同理做后缀和： $$suf_i = \\sum_{j=i+1}^{n}|x_i - x_j|$$\n\n则： $$\\sum_{i=1}^{n}|x_i-x_j| = pre_i + suf_i$$\n\n$y$ 轴同理。\n\n所以只需要先将原切比雪夫坐标系转化为曼哈顿左边系就行了。\n\n注意转化的时候先不要除 $2$，最后在除 $2$，可以防止产生小数。\n\n## 代码\n\n~~~cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN = 2e5 + 7;\n\nll suf[MAXN], pre[MAXN];\n\nstruct node{\n    int x, y, id;\n    ll ansx, ansy;\n}s[MAXN];\n\nint main() {\n    int n, a, b;\n    scanf(\"%d\", &n);\n    rep(i, 1, n){\n        scanf(\"%d %d\", &a, &b);\n        s[i].x = a + b;\n        s[i].y = a - b;\n        s[i].id = i;\n    }\n    \n    sort(s + 1, s + 1 + n, [](const node &a, const node &b){return a.x < b.x;});\n\n    suf[1] = 0; pre[n] = 0;\n    rep(i, 2, n)    suf[i] = suf[i-1] + 1ll * (i-1) * (s[i].x - s[i-1].x);\n    per(i, n-1, 1)    pre[i] = pre[i+1] + 1ll * (n-i) * (s[i+1].x - s[i].x);\n    rep(i, 1, n)    s[i].ansx = suf[i] + pre[i];\n    \n    sort(s + 1, s + 1 + n, [](const node &a, const node &b){return a.y < b.y;});\n    \n    suf[1] = 0; pre[n] = 0;\n    rep(i, 2, n)    suf[i] = suf[i-1] + 1ll * (i-1) * (s[i].y - s[i-1].y);\n    per(i, n-1, 1)    pre[i] = pre[i+1] + 1ll * (n-i) * (s[i+1].y - s[i].y);\n    rep(i, 1, n)    s[i].ansy = suf[i] + pre[i];\n\n    ll ans = 1ll<<60;\n    rep(i, 1, n)    ans = min(ans, s[i].ansx + s[i].ansy);\n    printf(\"%lld\\n\", ans/2);\n    return 0;\n}\n~~~\n\n","source":"_posts/TJOI2013-songshujuhui.md","raw":"---\ntitle: TJOI2013-松鼠聚会\nthumbnail: /gallery/thumbnails/johannes-roots-in-the-treetops-by-jkroots-d9t9p4y.jpg\ndate: 2019-09-05 21:47:23\ntags: \n    - 几何\ncategories: \n---\n\n# 题目\n\n[P3964 [TJOI2013]松鼠聚会](https://www.luogu.org/problem/P3964)\n\n关于曼哈顿坐标系和切比雪夫坐标系之间的相互转换。\n\n<!--more-->\n\n## 前置技能\n\n- 曼哈顿坐标系是通过切比雪夫坐标系旋转$45 ^\\circ $后，再缩小到原来的一半得到的。\n- 将一个点 $(x, y)$ 的坐标变为 $(x+y, x-y)$ 后，原坐标系中的曼哈顿距离等于新坐标系中的切比雪夫距离\n- 将一个点 $(x, y)$ 的坐标变为 $(\\frac{x+y}{2}, \\frac{x-y}{2})$ 后，原坐标系中的切比雪夫距离等于新坐标系中的曼哈顿距离\n\n## 分析\n\n首先，原题中定义的距离是切比雪夫距离，看着非常奇怪。\n\n我们先考虑如果是曼哈顿距离怎么做。\n\n考虑一些点： $$(x_1, y_1), (x_2, y_2), ... , (x_n, y_n)$$\n\n只需求出： $$\\min_{j=1}^{n}\\sum_{i=1}^{n}|x_i-x_j|+|y_i-y_j|$$。\n\n而： $$\\sum_{i=1}^{n}|x_i-x_j|+|y_i-y_j| = \\sum_{i=1}^{n}|x_i-x_j| + \\sum_{i=1}^{n}|y_i-y_j|$$\n\n发现这两个维度互不影响，可以分别求出 $x, y$ 轴的。\n\n先对 $x$ 从小到大排序，设 $pre_i$ 前 $i-1$ 个点到点 $i$ 的 $x$ 轴距离前缀和，即： $$pre_i = \\sum_{j=1}^{i-1}|x_i - x_j|$$\n\n同理做后缀和： $$suf_i = \\sum_{j=i+1}^{n}|x_i - x_j|$$\n\n则： $$\\sum_{i=1}^{n}|x_i-x_j| = pre_i + suf_i$$\n\n$y$ 轴同理。\n\n所以只需要先将原切比雪夫坐标系转化为曼哈顿左边系就行了。\n\n注意转化的时候先不要除 $2$，最后在除 $2$，可以防止产生小数。\n\n## 代码\n\n~~~cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN = 2e5 + 7;\n\nll suf[MAXN], pre[MAXN];\n\nstruct node{\n    int x, y, id;\n    ll ansx, ansy;\n}s[MAXN];\n\nint main() {\n    int n, a, b;\n    scanf(\"%d\", &n);\n    rep(i, 1, n){\n        scanf(\"%d %d\", &a, &b);\n        s[i].x = a + b;\n        s[i].y = a - b;\n        s[i].id = i;\n    }\n    \n    sort(s + 1, s + 1 + n, [](const node &a, const node &b){return a.x < b.x;});\n\n    suf[1] = 0; pre[n] = 0;\n    rep(i, 2, n)    suf[i] = suf[i-1] + 1ll * (i-1) * (s[i].x - s[i-1].x);\n    per(i, n-1, 1)    pre[i] = pre[i+1] + 1ll * (n-i) * (s[i+1].x - s[i].x);\n    rep(i, 1, n)    s[i].ansx = suf[i] + pre[i];\n    \n    sort(s + 1, s + 1 + n, [](const node &a, const node &b){return a.y < b.y;});\n    \n    suf[1] = 0; pre[n] = 0;\n    rep(i, 2, n)    suf[i] = suf[i-1] + 1ll * (i-1) * (s[i].y - s[i-1].y);\n    per(i, n-1, 1)    pre[i] = pre[i+1] + 1ll * (n-i) * (s[i+1].y - s[i].y);\n    rep(i, 1, n)    s[i].ansy = suf[i] + pre[i];\n\n    ll ans = 1ll<<60;\n    rep(i, 1, n)    ans = min(ans, s[i].ansx + s[i].ansy);\n    printf(\"%lld\\n\", ans/2);\n    return 0;\n}\n~~~\n\n","slug":"TJOI2013-songshujuhui","published":1,"updated":"2021-03-28T08:48:54.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyc7000y69kj683j5h95","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problem/P3964\">P3964 [TJOI2013]松鼠聚会</a></p>\n<p>关于曼哈顿坐标系和切比雪夫坐标系之间的相互转换。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"前置技能\"><a href=\"#前置技能\" class=\"headerlink\" title=\"前置技能\"></a>前置技能</h2><ul>\n<li>曼哈顿坐标系是通过切比雪夫坐标系旋转$45 ^\\circ $后，再缩小到原来的一半得到的。</li>\n<li>将一个点 $(x, y)$ 的坐标变为 $(x+y, x-y)$ 后，原坐标系中的曼哈顿距离等于新坐标系中的切比雪夫距离</li>\n<li>将一个点 $(x, y)$ 的坐标变为 $(\\frac{x+y}{2}, \\frac{x-y}{2})$ 后，原坐标系中的切比雪夫距离等于新坐标系中的曼哈顿距离</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先，原题中定义的距离是切比雪夫距离，看着非常奇怪。</p>\n<p>我们先考虑如果是曼哈顿距离怎么做。</p>\n<p>考虑一些点： $$(x_1, y_1), (x_2, y_2), … , (x_n, y_n)$$</p>\n<p>只需求出： $$\\min_{j=1}^{n}\\sum_{i=1}^{n}|x_i-x_j|+|y_i-y_j|$$。</p>\n<p>而： $$\\sum_{i=1}^{n}|x_i-x_j|+|y_i-y_j| = \\sum_{i=1}^{n}|x_i-x_j| + \\sum_{i=1}^{n}|y_i-y_j|$$</p>\n<p>发现这两个维度互不影响，可以分别求出 $x, y$ 轴的。</p>\n<p>先对 $x$ 从小到大排序，设 $pre_i$ 前 $i-1$ 个点到点 $i$ 的 $x$ 轴距离前缀和，即： $$pre_i = \\sum_{j=1}^{i-1}|x_i - x_j|$$</p>\n<p>同理做后缀和： $$suf_i = \\sum_{j=i+1}^{n}|x_i - x_j|$$</p>\n<p>则： $$\\sum_{i=1}^{n}|x_i-x_j| = pre_i + suf_i$$</p>\n<p>$y$ 轴同理。</p>\n<p>所以只需要先将原切比雪夫坐标系转化为曼哈顿左边系就行了。</p>\n<p>注意转化的时候先不要除 $2$，最后在除 $2$，可以防止产生小数。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll suf[MAXN], pre[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, id;</span><br><span class=\"line\">    ll ansx, ansy;</span><br><span class=\"line\">&#125;s[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, a, b;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        s[i].x = a + b;</span><br><span class=\"line\">        s[i].y = a - b;</span><br><span class=\"line\">        s[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>, s + <span class=\"number\">1</span> + n, [](<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;<span class=\"keyword\">return</span> a.x &lt; b.x;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    suf[<span class=\"number\">1</span>] = <span class=\"number\">0</span>; pre[n] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n)    suf[i] = suf[i<span class=\"number\">-1</span>] + <span class=\"number\">1ll</span> * (i<span class=\"number\">-1</span>) * (s[i].x - s[i<span class=\"number\">-1</span>].x);</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n<span class=\"number\">-1</span>, <span class=\"number\">1</span>)    pre[i] = pre[i+<span class=\"number\">1</span>] + <span class=\"number\">1ll</span> * (n-i) * (s[i+<span class=\"number\">1</span>].x - s[i].x);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)    s[i].ansx = suf[i] + pre[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>, s + <span class=\"number\">1</span> + n, [](<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;<span class=\"keyword\">return</span> a.y &lt; b.y;&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    suf[<span class=\"number\">1</span>] = <span class=\"number\">0</span>; pre[n] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n)    suf[i] = suf[i<span class=\"number\">-1</span>] + <span class=\"number\">1ll</span> * (i<span class=\"number\">-1</span>) * (s[i].y - s[i<span class=\"number\">-1</span>].y);</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n<span class=\"number\">-1</span>, <span class=\"number\">1</span>)    pre[i] = pre[i+<span class=\"number\">1</span>] + <span class=\"number\">1ll</span> * (n-i) * (s[i+<span class=\"number\">1</span>].y - s[i].y);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)    s[i].ansy = suf[i] + pre[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    ll ans = <span class=\"number\">1ll</span>&lt;&lt;<span class=\"number\">60</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)    ans = <span class=\"built_in\">min</span>(ans, s[i].ansx + s[i].ansy);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problem/P3964\">P3964 [TJOI2013]松鼠聚会</a></p>\n<p>关于曼哈顿坐标系和切比雪夫坐标系之间的相互转换。</p>","more":"<h2 id=\"前置技能\"><a href=\"#前置技能\" class=\"headerlink\" title=\"前置技能\"></a>前置技能</h2><ul>\n<li>曼哈顿坐标系是通过切比雪夫坐标系旋转$45 ^\\circ $后，再缩小到原来的一半得到的。</li>\n<li>将一个点 $(x, y)$ 的坐标变为 $(x+y, x-y)$ 后，原坐标系中的曼哈顿距离等于新坐标系中的切比雪夫距离</li>\n<li>将一个点 $(x, y)$ 的坐标变为 $(\\frac{x+y}{2}, \\frac{x-y}{2})$ 后，原坐标系中的切比雪夫距离等于新坐标系中的曼哈顿距离</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>首先，原题中定义的距离是切比雪夫距离，看着非常奇怪。</p>\n<p>我们先考虑如果是曼哈顿距离怎么做。</p>\n<p>考虑一些点： $$(x_1, y_1), (x_2, y_2), … , (x_n, y_n)$$</p>\n<p>只需求出： $$\\min_{j=1}^{n}\\sum_{i=1}^{n}|x_i-x_j|+|y_i-y_j|$$。</p>\n<p>而： $$\\sum_{i=1}^{n}|x_i-x_j|+|y_i-y_j| = \\sum_{i=1}^{n}|x_i-x_j| + \\sum_{i=1}^{n}|y_i-y_j|$$</p>\n<p>发现这两个维度互不影响，可以分别求出 $x, y$ 轴的。</p>\n<p>先对 $x$ 从小到大排序，设 $pre_i$ 前 $i-1$ 个点到点 $i$ 的 $x$ 轴距离前缀和，即： $$pre_i = \\sum_{j=1}^{i-1}|x_i - x_j|$$</p>\n<p>同理做后缀和： $$suf_i = \\sum_{j=i+1}^{n}|x_i - x_j|$$</p>\n<p>则： $$\\sum_{i=1}^{n}|x_i-x_j| = pre_i + suf_i$$</p>\n<p>$y$ 轴同理。</p>\n<p>所以只需要先将原切比雪夫坐标系转化为曼哈顿左边系就行了。</p>\n<p>注意转化的时候先不要除 $2$，最后在除 $2$，可以防止产生小数。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll suf[MAXN], pre[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x, y, id;</span><br><span class=\"line\">    ll ansx, ansy;</span><br><span class=\"line\">&#125;s[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, a, b;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">        s[i].x = a + b;</span><br><span class=\"line\">        s[i].y = a - b;</span><br><span class=\"line\">        s[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>, s + <span class=\"number\">1</span> + n, [](<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;<span class=\"keyword\">return</span> a.x &lt; b.x;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    suf[<span class=\"number\">1</span>] = <span class=\"number\">0</span>; pre[n] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n)    suf[i] = suf[i<span class=\"number\">-1</span>] + <span class=\"number\">1ll</span> * (i<span class=\"number\">-1</span>) * (s[i].x - s[i<span class=\"number\">-1</span>].x);</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n<span class=\"number\">-1</span>, <span class=\"number\">1</span>)    pre[i] = pre[i+<span class=\"number\">1</span>] + <span class=\"number\">1ll</span> * (n-i) * (s[i+<span class=\"number\">1</span>].x - s[i].x);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)    s[i].ansx = suf[i] + pre[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>, s + <span class=\"number\">1</span> + n, [](<span class=\"keyword\">const</span> node &amp;a, <span class=\"keyword\">const</span> node &amp;b)&#123;<span class=\"keyword\">return</span> a.y &lt; b.y;&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    suf[<span class=\"number\">1</span>] = <span class=\"number\">0</span>; pre[n] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">2</span>, n)    suf[i] = suf[i<span class=\"number\">-1</span>] + <span class=\"number\">1ll</span> * (i<span class=\"number\">-1</span>) * (s[i].y - s[i<span class=\"number\">-1</span>].y);</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, n<span class=\"number\">-1</span>, <span class=\"number\">1</span>)    pre[i] = pre[i+<span class=\"number\">1</span>] + <span class=\"number\">1ll</span> * (n-i) * (s[i+<span class=\"number\">1</span>].y - s[i].y);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)    s[i].ansy = suf[i] + pre[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    ll ans = <span class=\"number\">1ll</span>&lt;&lt;<span class=\"number\">60</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)    ans = <span class=\"built_in\">min</span>(ans, s[i].ansx + s[i].ansy);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans/<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SCOI2005-骑士精神","thumbnail":"/gallery/thumbnails/0_Malephar, Anton Fadeev_01.jpg","date":"2019-06-11T15:20:26.000Z","_content":"\n# 题目\n\n[luoguP2324](https://www.luogu.org/problemnew/show/P2324)\n\n<!--more-->\n\n# 题解\n\n首先很容易想到的是，应该用空格去跳，而不是用马，因为马的数量太多了。\n\n第二，因为搜索状态太多，考虑用使用IDDFS + A*，有一个比较简单的估价函数就是当前状态和终态的不同元素的个数。\n\n考虑到折返是没有任何价值的，因此在搜索过程中保留上一次搜索的方向，在本次搜索中如果是折返操作则跳过。\n\n未跳过折返时时间：1509ms，跳过后：66ms。\n\n可以看出来优化还是很巨大的。\n\n# 代码\n\n~~~c++\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\nconst int n = 5;\nstring final = \"111110111100*110000100000\";\nint dx[] = {1, 1, 2, 2, -2, -2, -1, -1};\nint dy[] = {2, -2, 1, -1, 1, -1, 2, -2};\nint dif(string s){\n    int res = 0;\n    for(int i = 0; i < n*n; ++i){\n        if(s[i] != final[i])\tres++;\n    }\n    return res;\n}\nstring s;\nint lim;\nbool suc = 0;\nvoid dfs(int cur, int last){\n    if(cur == lim){\t\t//是否搜索成功\n        if(dif(s) == 0){\n            suc = 1;\n        }\n        return;\n    }\n    if(suc)\treturn;\t\t//最优解剪枝\n    if(cur + max(0, dif(s) - 1) > lim)\treturn;\t\t//当前值 + 最优值 > 迭代深度\t\n    int f = s.find('*');\n    int x = f/n, y = f%n;\n    int xx, yy;\n    for(int i = 0; i < 8; ++i){\n        if(i + last == 7)\tcontinue;\t\t//防止回头，优化了很多\n        xx = x + dx[i];\n        yy = y + dy[i];\n        if(xx >= 0 && xx < n && yy >= 0 && yy < n){\n            swap(s[xx*n + yy], s[x*n + y]);\n            dfs(cur+1, i);\n            swap(s[xx*n + yy], s[x*n + y]);\t\t//回溯\n        }\n    }\n}\nint main(){\n    int T;\n    cin >> T;\n    while(T--){\n        s = \"\";\n        string tmp;\n        for(int i = 1; i <= n; ++i){\n            cin >> tmp;\n            s += tmp;\n        }\n        if(dif(s) == 0)\tcout << 0 << endl;\n        else{\n            suc = 0;\n            for(int i = 1; i <= 15; ++i){\n                lim = i;\n                dfs(0, 9);\n                if(suc){\n                    cout << i << endl;\n                    break;\n                }\n            }\n            if(!suc)\tcout << -1 << endl;\n        }\n    }\n    return 0;\n}\n~~~\n\n","source":"_posts/SCOI2005.md","raw":"---\ntitle: SCOI2005-骑士精神\nthumbnail: /gallery/thumbnails/0_Malephar, Anton Fadeev_01.jpg\ndate: 2019-06-11 23:20:26\ntags: \n    - IDA*\n    - 启发式搜索\n    - 搜索\ncategories: \n---\n\n# 题目\n\n[luoguP2324](https://www.luogu.org/problemnew/show/P2324)\n\n<!--more-->\n\n# 题解\n\n首先很容易想到的是，应该用空格去跳，而不是用马，因为马的数量太多了。\n\n第二，因为搜索状态太多，考虑用使用IDDFS + A*，有一个比较简单的估价函数就是当前状态和终态的不同元素的个数。\n\n考虑到折返是没有任何价值的，因此在搜索过程中保留上一次搜索的方向，在本次搜索中如果是折返操作则跳过。\n\n未跳过折返时时间：1509ms，跳过后：66ms。\n\n可以看出来优化还是很巨大的。\n\n# 代码\n\n~~~c++\n// luogu-judger-enable-o2\n#include<bits/stdc++.h>\nusing namespace std;\nconst int n = 5;\nstring final = \"111110111100*110000100000\";\nint dx[] = {1, 1, 2, 2, -2, -2, -1, -1};\nint dy[] = {2, -2, 1, -1, 1, -1, 2, -2};\nint dif(string s){\n    int res = 0;\n    for(int i = 0; i < n*n; ++i){\n        if(s[i] != final[i])\tres++;\n    }\n    return res;\n}\nstring s;\nint lim;\nbool suc = 0;\nvoid dfs(int cur, int last){\n    if(cur == lim){\t\t//是否搜索成功\n        if(dif(s) == 0){\n            suc = 1;\n        }\n        return;\n    }\n    if(suc)\treturn;\t\t//最优解剪枝\n    if(cur + max(0, dif(s) - 1) > lim)\treturn;\t\t//当前值 + 最优值 > 迭代深度\t\n    int f = s.find('*');\n    int x = f/n, y = f%n;\n    int xx, yy;\n    for(int i = 0; i < 8; ++i){\n        if(i + last == 7)\tcontinue;\t\t//防止回头，优化了很多\n        xx = x + dx[i];\n        yy = y + dy[i];\n        if(xx >= 0 && xx < n && yy >= 0 && yy < n){\n            swap(s[xx*n + yy], s[x*n + y]);\n            dfs(cur+1, i);\n            swap(s[xx*n + yy], s[x*n + y]);\t\t//回溯\n        }\n    }\n}\nint main(){\n    int T;\n    cin >> T;\n    while(T--){\n        s = \"\";\n        string tmp;\n        for(int i = 1; i <= n; ++i){\n            cin >> tmp;\n            s += tmp;\n        }\n        if(dif(s) == 0)\tcout << 0 << endl;\n        else{\n            suc = 0;\n            for(int i = 1; i <= 15; ++i){\n                lim = i;\n                dfs(0, 9);\n                if(suc){\n                    cout << i << endl;\n                    break;\n                }\n            }\n            if(!suc)\tcout << -1 << endl;\n        }\n    }\n    return 0;\n}\n~~~\n\n","slug":"SCOI2005","published":1,"updated":"2021-03-28T08:48:43.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyc8001169kj3d5wf69z","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problemnew/show/P2324\">luoguP2324</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>首先很容易想到的是，应该用空格去跳，而不是用马，因为马的数量太多了。</p>\n<p>第二，因为搜索状态太多，考虑用使用IDDFS + A*，有一个比较简单的估价函数就是当前状态和终态的不同元素的个数。</p>\n<p>考虑到折返是没有任何价值的，因此在搜索过程中保留上一次搜索的方向，在本次搜索中如果是折返操作则跳过。</p>\n<p>未跳过折返时时间：1509ms，跳过后：66ms。</p>\n<p>可以看出来优化还是很巨大的。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">string <span class=\"keyword\">final</span> = <span class=\"string\">&quot;111110111100*110000100000&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">-2</span>, <span class=\"number\">-2</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">2</span>, <span class=\"number\">-2</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">2</span>, <span class=\"number\">-2</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dif</span><span class=\"params\">(string s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n*n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] != <span class=\"keyword\">final</span>[i])\tres++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"><span class=\"keyword\">int</span> lim;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> suc = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> cur, <span class=\"keyword\">int</span> last)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur == lim)&#123;\t\t<span class=\"comment\">//是否搜索成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">dif</span>(s) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            suc = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(suc)\t<span class=\"keyword\">return</span>;\t\t<span class=\"comment\">//最优解剪枝</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur + <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, <span class=\"built_in\">dif</span>(s) - <span class=\"number\">1</span>) &gt; lim)\t<span class=\"keyword\">return</span>;\t\t<span class=\"comment\">//当前值 + 最优值 &gt; 迭代深度\t</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = s.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = f/n, y = f%n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> xx, yy;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i + last == <span class=\"number\">7</span>)\t<span class=\"keyword\">continue</span>;\t\t<span class=\"comment\">//防止回头，优化了很多</span></span><br><span class=\"line\">        xx = x + dx[i];</span><br><span class=\"line\">        yy = y + dy[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xx &gt;= <span class=\"number\">0</span> &amp;&amp; xx &lt; n &amp;&amp; yy &gt;= <span class=\"number\">0</span> &amp;&amp; yy &lt; n)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(s[xx*n + yy], s[x*n + y]);</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(cur+<span class=\"number\">1</span>, i);</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(s[xx*n + yy], s[x*n + y]);\t\t<span class=\"comment\">//回溯</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        s = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        string tmp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">            cin &gt;&gt; tmp;</span><br><span class=\"line\">            s += tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">dif</span>(s) == <span class=\"number\">0</span>)\tcout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            suc = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">15</span>; ++i)&#123;</span><br><span class=\"line\">                lim = i;</span><br><span class=\"line\">                <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(suc)&#123;</span><br><span class=\"line\">                    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!suc)\tcout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problemnew/show/P2324\">luoguP2324</a></p>","more":"<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>首先很容易想到的是，应该用空格去跳，而不是用马，因为马的数量太多了。</p>\n<p>第二，因为搜索状态太多，考虑用使用IDDFS + A*，有一个比较简单的估价函数就是当前状态和终态的不同元素的个数。</p>\n<p>考虑到折返是没有任何价值的，因此在搜索过程中保留上一次搜索的方向，在本次搜索中如果是折返操作则跳过。</p>\n<p>未跳过折返时时间：1509ms，跳过后：66ms。</p>\n<p>可以看出来优化还是很巨大的。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">string <span class=\"keyword\">final</span> = <span class=\"string\">&quot;111110111100*110000100000&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">-2</span>, <span class=\"number\">-2</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dy[] = &#123;<span class=\"number\">2</span>, <span class=\"number\">-2</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">2</span>, <span class=\"number\">-2</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dif</span><span class=\"params\">(string s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n*n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] != <span class=\"keyword\">final</span>[i])\tres++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">string s;</span><br><span class=\"line\"><span class=\"keyword\">int</span> lim;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> suc = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> cur, <span class=\"keyword\">int</span> last)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur == lim)&#123;\t\t<span class=\"comment\">//是否搜索成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">dif</span>(s) == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            suc = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(suc)\t<span class=\"keyword\">return</span>;\t\t<span class=\"comment\">//最优解剪枝</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cur + <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, <span class=\"built_in\">dif</span>(s) - <span class=\"number\">1</span>) &gt; lim)\t<span class=\"keyword\">return</span>;\t\t<span class=\"comment\">//当前值 + 最优值 &gt; 迭代深度\t</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> f = s.<span class=\"built_in\">find</span>(<span class=\"string\">&#x27;*&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = f/n, y = f%n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> xx, yy;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i + last == <span class=\"number\">7</span>)\t<span class=\"keyword\">continue</span>;\t\t<span class=\"comment\">//防止回头，优化了很多</span></span><br><span class=\"line\">        xx = x + dx[i];</span><br><span class=\"line\">        yy = y + dy[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(xx &gt;= <span class=\"number\">0</span> &amp;&amp; xx &lt; n &amp;&amp; yy &gt;= <span class=\"number\">0</span> &amp;&amp; yy &lt; n)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(s[xx*n + yy], s[x*n + y]);</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(cur+<span class=\"number\">1</span>, i);</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(s[xx*n + yy], s[x*n + y]);\t\t<span class=\"comment\">//回溯</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        s = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        string tmp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">            cin &gt;&gt; tmp;</span><br><span class=\"line\">            s += tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">dif</span>(s) == <span class=\"number\">0</span>)\tcout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            suc = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">15</span>; ++i)&#123;</span><br><span class=\"line\">                lim = i;</span><br><span class=\"line\">                <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(suc)&#123;</span><br><span class=\"line\">                    cout &lt;&lt; i &lt;&lt; endl;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!suc)\tcout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"ZJOI2008-骑士","thumbnail":"/gallery/thumbnails/0_Malephar, Anton Fadeev_01.jpg","date":"2019-06-11T08:57:15.000Z","_content":"\n\n\n# 题目\n\n[luoguP2607](https://www.luogu.org/problemnew/show/P2607)\n\n[bzoj1040](https://www.lydsy.com/JudgeOnline/problem.php?id=1040)\n\n<!--more-->\n\n# 题解\n\n基环树就是一颗多了一条边的树，多了这条边，就会产生一个环。\n\n考虑找到这个环上的任意一条边，断掉这条边，然后图形就又变回了树。（可以证明，断环上的哪条边对结果并没有影响）\n\n然后分别都被断掉的这条边的两个端点u、v，做树形动规。\n\n$dp[i][0/1]$表示取不取第$i$个点的最大值。\n\n这和[luoguP1352](https://www.luogu.org/problemnew/show/P1352)，没有上司的舞会一样。\n\n则这颗基环树的最大值为$max(dp[u][0], dp[v][0])$，当然因为树形动规的特点，一次动规是不能同时求出这两个值的，因此要分别对u、v进行动规。\n\n==两个注意事项==\n\n1. 非常重要的一点是，两个骑士可能互相憎恨，因此会存在重边，需要特判。\n2. 记得开long long。\n\n处理重边的方法：\n\n按照我的建图方式，如果存在重边<u，v>，那么u的可到点集合中会出现两次v。\n\n根据这个特点就可以进行特判了。\n\n另外，这份代码在最后一个测试点TLE了。\n\n# 代码\n\n~~~c++\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int > pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst int mod = 1e9 + 7;\nconst int MAXN = 1e6 + 7;\n\nint curx, cury;\nbool vis[MAXN];\nvector<int> G[MAXN];\nll dp[MAXN][2];\nint val[MAXN];\nvoid dfs(int x, int fa){\n    if(vis[x]){\n        curx = x;\n        cury = fa;\n        return;\n    }\n    vis[x] = 1;\n    for(int i = 0; i < G[x].size(); ++i){\n        int u = G[x][i];\n        if(u == fa) continue;\n        dfs(u, x);\n    }\n}\nvoid go(int x, int fa){\n    dp[x][0] = 0; dp[x][1] = val[x];\n    for(int i = 0; i < G[x].size(); ++i){\n        int u = G[x][i];\n        if(u == fa) continue;\n        if(x == curx && u == cury)  continue;\n        if(u == curx && x == cury)  continue;\n        go(u, x);\n        dp[x][0] += max(dp[u][0], dp[u][1]);\n        dp[x][1] += dp[u][0];\n    }\n}\nint main(){\n    #ifndef ONLINE_JUDGE         \n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif \n    \n    int n, x;\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++i){\n        scanf(\"%d %d\", &val[i], &x);\n        G[x].push_back(i);\n        G[i].push_back(x);\n    }\n    ll res = 0, tmp;\n    for(int i = 1; i <= n; ++i){\n        if(vis[i])  continue;\n        dfs(i, 0);\n        // cout << curx << ' ' << cury << endl;\n        // cout << count(G[curx].begin(), G[curx].end(), cury) << endl;\n        if(count(G[curx].begin(), G[curx].end(), cury) == 2){\n            go(curx, 0);\n            go(cury, 0);\n            res += max(dp[curx][0] + dp[cury][1], dp[curx][1] + dp[cury][0]);\n            continue;\n        }\n        go(curx, 0);\n        tmp = dp[curx][0];\n        go(cury, 0);\n        tmp = max(tmp, dp[cury][0]);\n        res += tmp;\n    }\n    printf(\"%lld\\n\", res);\n    return 0;\n}\n~~~\n\n","source":"_posts/ZJOI2008.md","raw":"---\ntitle: ZJOI2008-骑士\nthumbnail: /gallery/thumbnails/0_Malephar, Anton Fadeev_01.jpg\ndate: 2019-06-11 16:57:15\ntags: \n    - 动态规划\n    - 基环树\n    - 图论\ncategories: \n---\n\n\n\n# 题目\n\n[luoguP2607](https://www.luogu.org/problemnew/show/P2607)\n\n[bzoj1040](https://www.lydsy.com/JudgeOnline/problem.php?id=1040)\n\n<!--more-->\n\n# 题解\n\n基环树就是一颗多了一条边的树，多了这条边，就会产生一个环。\n\n考虑找到这个环上的任意一条边，断掉这条边，然后图形就又变回了树。（可以证明，断环上的哪条边对结果并没有影响）\n\n然后分别都被断掉的这条边的两个端点u、v，做树形动规。\n\n$dp[i][0/1]$表示取不取第$i$个点的最大值。\n\n这和[luoguP1352](https://www.luogu.org/problemnew/show/P1352)，没有上司的舞会一样。\n\n则这颗基环树的最大值为$max(dp[u][0], dp[v][0])$，当然因为树形动规的特点，一次动规是不能同时求出这两个值的，因此要分别对u、v进行动规。\n\n==两个注意事项==\n\n1. 非常重要的一点是，两个骑士可能互相憎恨，因此会存在重边，需要特判。\n2. 记得开long long。\n\n处理重边的方法：\n\n按照我的建图方式，如果存在重边<u，v>，那么u的可到点集合中会出现两次v。\n\n根据这个特点就可以进行特判了。\n\n另外，这份代码在最后一个测试点TLE了。\n\n# 代码\n\n~~~c++\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int > pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst int mod = 1e9 + 7;\nconst int MAXN = 1e6 + 7;\n\nint curx, cury;\nbool vis[MAXN];\nvector<int> G[MAXN];\nll dp[MAXN][2];\nint val[MAXN];\nvoid dfs(int x, int fa){\n    if(vis[x]){\n        curx = x;\n        cury = fa;\n        return;\n    }\n    vis[x] = 1;\n    for(int i = 0; i < G[x].size(); ++i){\n        int u = G[x][i];\n        if(u == fa) continue;\n        dfs(u, x);\n    }\n}\nvoid go(int x, int fa){\n    dp[x][0] = 0; dp[x][1] = val[x];\n    for(int i = 0; i < G[x].size(); ++i){\n        int u = G[x][i];\n        if(u == fa) continue;\n        if(x == curx && u == cury)  continue;\n        if(u == curx && x == cury)  continue;\n        go(u, x);\n        dp[x][0] += max(dp[u][0], dp[u][1]);\n        dp[x][1] += dp[u][0];\n    }\n}\nint main(){\n    #ifndef ONLINE_JUDGE         \n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif \n    \n    int n, x;\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; ++i){\n        scanf(\"%d %d\", &val[i], &x);\n        G[x].push_back(i);\n        G[i].push_back(x);\n    }\n    ll res = 0, tmp;\n    for(int i = 1; i <= n; ++i){\n        if(vis[i])  continue;\n        dfs(i, 0);\n        // cout << curx << ' ' << cury << endl;\n        // cout << count(G[curx].begin(), G[curx].end(), cury) << endl;\n        if(count(G[curx].begin(), G[curx].end(), cury) == 2){\n            go(curx, 0);\n            go(cury, 0);\n            res += max(dp[curx][0] + dp[cury][1], dp[curx][1] + dp[cury][0]);\n            continue;\n        }\n        go(curx, 0);\n        tmp = dp[curx][0];\n        go(cury, 0);\n        tmp = max(tmp, dp[cury][0]);\n        res += tmp;\n    }\n    printf(\"%lld\\n\", res);\n    return 0;\n}\n~~~\n\n","slug":"ZJOI2008","published":1,"updated":"2021-03-28T08:50:41.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyca001469kj0y1n98co","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problemnew/show/P2607\">luoguP2607</a></p>\n<p><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=1040\">bzoj1040</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>基环树就是一颗多了一条边的树，多了这条边，就会产生一个环。</p>\n<p>考虑找到这个环上的任意一条边，断掉这条边，然后图形就又变回了树。（可以证明，断环上的哪条边对结果并没有影响）</p>\n<p>然后分别都被断掉的这条边的两个端点u、v，做树形动规。</p>\n<p>$dp[i][0/1]$表示取不取第$i$个点的最大值。</p>\n<p>这和<a href=\"https://www.luogu.org/problemnew/show/P1352\">luoguP1352</a>，没有上司的舞会一样。</p>\n<p>则这颗基环树的最大值为$max(dp[u][0], dp[v][0])$，当然因为树形动规的特点，一次动规是不能同时求出这两个值的，因此要分别对u、v进行动规。</p>\n<p>==两个注意事项==</p>\n<ol>\n<li>非常重要的一点是，两个骑士可能互相憎恨，因此会存在重边，需要特判。</li>\n<li>记得开long long。</li>\n</ol>\n<p>处理重边的方法：</p>\n<p>按照我的建图方式，如果存在重边&lt;u，v&gt;，那么u的可到点集合中会出现两次v。</p>\n<p>根据这个特点就可以进行特判了。</p>\n<p>另外，这份代码在最后一个测试点TLE了。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span> &gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e6</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> curx, cury;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[MAXN];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[MAXN];</span><br><span class=\"line\">ll dp[MAXN][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> val[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vis[x])&#123;</span><br><span class=\"line\">        curx = x;</span><br><span class=\"line\">        cury = fa;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[x].<span class=\"built_in\">size</span>(); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = G[x][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(u, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    dp[x][<span class=\"number\">0</span>] = <span class=\"number\">0</span>; dp[x][<span class=\"number\">1</span>] = val[x];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[x].<span class=\"built_in\">size</span>(); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = G[x][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == curx &amp;&amp; u == cury)  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == curx &amp;&amp; x == cury)  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">go</span>(u, x);</span><br><span class=\"line\">        dp[x][<span class=\"number\">0</span>] += <span class=\"built_in\">max</span>(dp[u][<span class=\"number\">0</span>], dp[u][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        dp[x][<span class=\"number\">1</span>] += dp[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE         </span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;val[i], &amp;x);</span><br><span class=\"line\">        G[x].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        G[i].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i])  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(i, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; curx &lt;&lt; &#x27; &#x27; &lt;&lt; cury &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; count(G[curx].begin(), G[curx].end(), cury) &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">count</span>(G[curx].<span class=\"built_in\">begin</span>(), G[curx].<span class=\"built_in\">end</span>(), cury) == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">go</span>(curx, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">go</span>(cury, <span class=\"number\">0</span>);</span><br><span class=\"line\">            res += <span class=\"built_in\">max</span>(dp[curx][<span class=\"number\">0</span>] + dp[cury][<span class=\"number\">1</span>], dp[curx][<span class=\"number\">1</span>] + dp[cury][<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">go</span>(curx, <span class=\"number\">0</span>);</span><br><span class=\"line\">        tmp = dp[curx][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">go</span>(cury, <span class=\"number\">0</span>);</span><br><span class=\"line\">        tmp = <span class=\"built_in\">max</span>(tmp, dp[cury][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        res += tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problemnew/show/P2607\">luoguP2607</a></p>\n<p><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=1040\">bzoj1040</a></p>","more":"<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>基环树就是一颗多了一条边的树，多了这条边，就会产生一个环。</p>\n<p>考虑找到这个环上的任意一条边，断掉这条边，然后图形就又变回了树。（可以证明，断环上的哪条边对结果并没有影响）</p>\n<p>然后分别都被断掉的这条边的两个端点u、v，做树形动规。</p>\n<p>$dp[i][0/1]$表示取不取第$i$个点的最大值。</p>\n<p>这和<a href=\"https://www.luogu.org/problemnew/show/P1352\">luoguP1352</a>，没有上司的舞会一样。</p>\n<p>则这颗基环树的最大值为$max(dp[u][0], dp[v][0])$，当然因为树形动规的特点，一次动规是不能同时求出这两个值的，因此要分别对u、v进行动规。</p>\n<p>==两个注意事项==</p>\n<ol>\n<li>非常重要的一点是，两个骑士可能互相憎恨，因此会存在重边，需要特判。</li>\n<li>记得开long long。</li>\n</ol>\n<p>处理重边的方法：</p>\n<p>按照我的建图方式，如果存在重边&lt;u，v&gt;，那么u的可到点集合中会出现两次v。</p>\n<p>根据这个特点就可以进行特判了。</p>\n<p>另外，这份代码在最后一个测试点TLE了。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span> &gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e6</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> curx, cury;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[MAXN];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[MAXN];</span><br><span class=\"line\">ll dp[MAXN][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> val[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vis[x])&#123;</span><br><span class=\"line\">        curx = x;</span><br><span class=\"line\">        cury = fa;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[x].<span class=\"built_in\">size</span>(); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = G[x][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(u, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">go</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span></span>&#123;</span><br><span class=\"line\">    dp[x][<span class=\"number\">0</span>] = <span class=\"number\">0</span>; dp[x][<span class=\"number\">1</span>] = val[x];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[x].<span class=\"built_in\">size</span>(); ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = G[x][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == curx &amp;&amp; u == cury)  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == curx &amp;&amp; x == cury)  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">go</span>(u, x);</span><br><span class=\"line\">        dp[x][<span class=\"number\">0</span>] += <span class=\"built_in\">max</span>(dp[u][<span class=\"number\">0</span>], dp[u][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        dp[x][<span class=\"number\">1</span>] += dp[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE         </span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span> </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;val[i], &amp;x);</span><br><span class=\"line\">        G[x].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        G[i].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll res = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[i])  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(i, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; curx &lt;&lt; &#x27; &#x27; &lt;&lt; cury &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; count(G[curx].begin(), G[curx].end(), cury) &lt;&lt; endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">count</span>(G[curx].<span class=\"built_in\">begin</span>(), G[curx].<span class=\"built_in\">end</span>(), cury) == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">go</span>(curx, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"built_in\">go</span>(cury, <span class=\"number\">0</span>);</span><br><span class=\"line\">            res += <span class=\"built_in\">max</span>(dp[curx][<span class=\"number\">0</span>] + dp[cury][<span class=\"number\">1</span>], dp[curx][<span class=\"number\">1</span>] + dp[cury][<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">go</span>(curx, <span class=\"number\">0</span>);</span><br><span class=\"line\">        tmp = dp[curx][<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"built_in\">go</span>(cury, <span class=\"number\">0</span>);</span><br><span class=\"line\">        tmp = <span class=\"built_in\">max</span>(tmp, dp[cury][<span class=\"number\">0</span>]);</span><br><span class=\"line\">        res += tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"hexo博客搭建总结","thumbnail":"/gallery/thumbnails/0_Crystal Caverns , Anton Fadeev_01.jpg","date":"2019-04-11T13:50:15.000Z","_content":"\n## 序言\n之前使用jekyll在github上搭建了一个博客。\n但是，原博客不支持归档和搜索功能，主题也不是特别喜欢，于是决定重新搭建自己的博客站点。\n这次放弃了jekyll，使用hexo搭建。主要原因是hexo支持很多插件，且性能强悍。(~~相中了一个特别好看的主题~~)。\n\n<!--more-->\n\n## 背景\n\n本文代码均基于阿里云`Centos7`服务器，`Manjaro Linux`客户端，与`hexo`引擎。\n\n## 选择主题\n\n在搭建博客之前当然要选择一个自己喜欢的主题了。\n\n可以在hexo的主题官方上挑选一个。[戳我](<https://hexo.io/themes/>)\n\n注意挑选的时候不仅要看`颜值`，还要看一下自己需要的功能这个主题是否支持，当然如果你自己会添加插件，那就挑你最喜欢的就好了。\n\n## 客户机配置\n\n### 安装Git\n\n1. 下载Git.\n\n2. 修改用户名和邮箱。\n\n   ```\n   # 将此处的\"yourname\"替换成自己的用户名\n   git config --global user.name \"yourname\"\n   \n   # 将此处的\"youremail\"替换成自己的邮箱\n   git config --global user.email \"youremail\"\n   ```\n\n### 创建SSH钥匙对\n\n1. 检查是否存在钥匙对。\n\n   > $ cd ~/.ssh\n\n2. 若没有钥匙对，则创建钥匙对。\n\n   > $ ssh-keygen -t rsa -C \"youremail\"\n\n### 安装Nodejs\n\n1. 使用命令行下载Nodejs。\n\n2. 检查是否下载完成。\n\n   > $ node -v\n   >\n   > $ npm -v\n\n### 安装Hexo框架\n\n1. 使用`npm`下载`hexo`\n\n   > $ npm install -g hexo-cli\n\n   因为一下原因，`npm`的下载速度十分感人，建议更换\n\n2. 选择一个你想要存放文件的文件夹，初始化blog。\n\n   > $ hexo init blog\n\n3. 初始化完毕之后，打开博客根目录的package.json文件，在dependencies的配置中，追加一项：`\"hexo-deployer-git\": \"^0.3.1\"`\n\n4. 运行`hexo`\n\n   > $ hexo s\n\n   然后在浏览器输入：｀localhost:4000｀，如果出现hexo的界面就说明已经搭建成功了。\n\n   如果有包缺失，根据提示下载相应的包，再次尝试即可。\n\n## 服务端配置\n\n首先，进行服务端的系统更新。\n\n> $ yum update -y  \n\n更新完系统后，输入一下代码查看系统版本。\n\n> $ cat /etc/centos-release\n\n### 安装Nginx\n\n安装Nginx分为以下几步。第一，配置Nginx官方源。第二，安装Nginx。第三，配置Nginx配置文件。\n1、配置Nginx官方源\n输入以下代码，新建一个文件以配置Nginx源\n\n```\n$ vi /etc/yum.repos.d/nginx.repo\n```\n\n在打开的文件中输入以下代码，输入完毕之后，按 “esc” 键退出编辑模式， 输入 “:wq” 保存退出。\n\n```\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/mainline/centos/7/$basearch/\ngpgcheck=0\nenabled=1\n```\n\n2、安装Nginx\n输入以下代码进行安装。\n\n```\n$ yum install nginx -y\n```\n\n3、启动Nginx并设置开机自启\n输入以下代码:\n\n```\n$ systemctl start nginx\n$ systemctl enable nginx\n```\n\n进行到这里，你已经可以把服务器ip复制到浏览器就可以看到Nginx的欢迎界面了。\n\n4、配置Nginx\n接下来，需要修改一下nginx的相关配置，包括设置网站根目录以及配置域名。输入以下代码，打开Nginx的配置文件。(注：此处假定读者已完成了域名备案以及域名解析。)\n\n```\n$ vi /etc/nginx/conf.d/default.conf\n```\n\n依照下图进行修改，将“/usr/share/nginx/html”改为“/usr/share/nginx/html/blog”。\n![nginx配置](https://segmentfault.com/img/remote/1460000012907517?w=698&h=768)\n\n至此，Nginx的配置就基本完成了。\n\n## 安装Nodejs\n\n输入以下代码进行Nodejs的安装。\n\n```\n$ yum install nodejs\n```\n\n可输入`node -v`以及`npm -v`查看node的版本。\n至此，Nodejs的安装就完成了。\n\n## 安装Git以及进行相关配置\n\n1、输入以下代码，进行Git的安装\n\n```\n$ yum install git\n```\n\n2、创建git用户以及设置密码\n输入以下代码：\n\n```\n# 创建用户,用户名为git\n$ adduser git\n# 设置密码\n$ passwd git\n```\n\n3、把git用户添加到sudo用户组中\n输入以下代码`sudo vi /etc/sudoers`，打开sudoers文件，输入`:/root`进行搜索，搜索到代码行`root ALL=(ALL) ALL`,然后在这一行下添加以下代码`git ALL=(ALL) ALL`。输入完毕之后，按`wq!`强制保存退出vi。\n\n4、切换到git用户，添加SSH Key文件并且设置相应的读写与执行权限。\n输入以下代码：\n\n```\n# 切换用户\n$ su git\n# 创建目录\n$ mkdir ~/.ssh\n# 新建文件\n$ vim ~/.ssh/authorized_keys\n```\n\n然后把之前在客户端设置的SSH Key,复制到authorized_keys文件中，保存后退出。\n\n接下来设置文件权限，把authorized_keys文件设置成只有属主有读写权限，把ssh目录设置为只有属主有读、写、执行权限。代码如下：\n\n```\n$ chmod 600 ~/.ssh/authorized_keys\n$ chmod 700 ~/.ssh\n```\n\n设置完后，返回客户端，打开Git Bash，输入以下代码，测试是否能连接上服务器：\n\n```\n# ServerIP为你自己服务器的ip\n$ ssh -v git@ServerIP\n```\n\n**注意**\n\nSSH使用非对称加密，服务端不需要生成密钥对，而只需要一个`authorized_keys`文件，里面存放的是你客户端的**公钥**。客户端应该有密钥对`id_rsa`和`id_rsa.pub`文件，客户端的`authorized_keys`文件应该和`id_rsa.pub`文件内容一致。如果SSH免密码登录失败，请反复确认上述两点。\n\n5、重新回到服务器，在网站根目录新建一个blog文件夹，用于客户端上传文件，并且把该文件授权给git用户。代码如下：\n\n```\n# 使用sudo指令，需要输入git用户的密码\n$ sudo mkdir -p /usr/share/nginx/html/blog\n$ sudo chown -R git:git /usr/share/nginx/html/blog\n```\n\n6、在服务器上初始化一个git裸库\n切换到git用户，然后切换到git用户目录，接着初始化裸库，代码如下：\n\n```\n$ su git\n$ cd ~\n$ git init --bare blog.git\n```\n\n接着新建一个post-receive文件\n\n```\n$ vim ~/blog.git/hooks/post-receive\n```\n\n然后在该文件中输入以下内容：\n\n```\n#！/bin/sh\ngit --work-tree=/usr/share/nginx/html/blog --git-dir=/home/git/blog.git checkout -f\n```\n\n保存退出之后，再输入以下代码，赋予该文件可执行权限。\n\n```\n$ chmod +x ~/blog.git/hooks/post-receive\n```\n\n7、返回客户端，设置博客根目录下的_config.yml文件。\n\n```\ndeploy:\n    type: git\n    repo: git@SERVER:/home/git/blog.git       #此处的SERVER需改为你自己服务器的ip\n    branch: master                            #这里填写分支\n    message:                                  #提交的信息\n```\n\n保存后，在博客根目录打开Git Bash，输入以下命令：\n\n```\n$ hexo clean\n$ hexo g\n$ hexo d\n```\n\n部署完毕之后，即可在浏览器输入你的服务器ip进行访问你的博客了。\n\n## 引用\n\n[fogcrane-基于CentOS搭建Hexo博客](<https://segmentfault.com/a/1190000012907499>)","source":"_posts/hexo_blog_construct_summary.md","raw":"---\ntitle: hexo博客搭建总结\nthumbnail: /gallery/thumbnails/0_Crystal Caverns , Anton Fadeev_01.jpg\ndate: 2019-04-11 21:50:15\ntags: \n   - Hexo\ncategories: \n---\n\n## 序言\n之前使用jekyll在github上搭建了一个博客。\n但是，原博客不支持归档和搜索功能，主题也不是特别喜欢，于是决定重新搭建自己的博客站点。\n这次放弃了jekyll，使用hexo搭建。主要原因是hexo支持很多插件，且性能强悍。(~~相中了一个特别好看的主题~~)。\n\n<!--more-->\n\n## 背景\n\n本文代码均基于阿里云`Centos7`服务器，`Manjaro Linux`客户端，与`hexo`引擎。\n\n## 选择主题\n\n在搭建博客之前当然要选择一个自己喜欢的主题了。\n\n可以在hexo的主题官方上挑选一个。[戳我](<https://hexo.io/themes/>)\n\n注意挑选的时候不仅要看`颜值`，还要看一下自己需要的功能这个主题是否支持，当然如果你自己会添加插件，那就挑你最喜欢的就好了。\n\n## 客户机配置\n\n### 安装Git\n\n1. 下载Git.\n\n2. 修改用户名和邮箱。\n\n   ```\n   # 将此处的\"yourname\"替换成自己的用户名\n   git config --global user.name \"yourname\"\n   \n   # 将此处的\"youremail\"替换成自己的邮箱\n   git config --global user.email \"youremail\"\n   ```\n\n### 创建SSH钥匙对\n\n1. 检查是否存在钥匙对。\n\n   > $ cd ~/.ssh\n\n2. 若没有钥匙对，则创建钥匙对。\n\n   > $ ssh-keygen -t rsa -C \"youremail\"\n\n### 安装Nodejs\n\n1. 使用命令行下载Nodejs。\n\n2. 检查是否下载完成。\n\n   > $ node -v\n   >\n   > $ npm -v\n\n### 安装Hexo框架\n\n1. 使用`npm`下载`hexo`\n\n   > $ npm install -g hexo-cli\n\n   因为一下原因，`npm`的下载速度十分感人，建议更换\n\n2. 选择一个你想要存放文件的文件夹，初始化blog。\n\n   > $ hexo init blog\n\n3. 初始化完毕之后，打开博客根目录的package.json文件，在dependencies的配置中，追加一项：`\"hexo-deployer-git\": \"^0.3.1\"`\n\n4. 运行`hexo`\n\n   > $ hexo s\n\n   然后在浏览器输入：｀localhost:4000｀，如果出现hexo的界面就说明已经搭建成功了。\n\n   如果有包缺失，根据提示下载相应的包，再次尝试即可。\n\n## 服务端配置\n\n首先，进行服务端的系统更新。\n\n> $ yum update -y  \n\n更新完系统后，输入一下代码查看系统版本。\n\n> $ cat /etc/centos-release\n\n### 安装Nginx\n\n安装Nginx分为以下几步。第一，配置Nginx官方源。第二，安装Nginx。第三，配置Nginx配置文件。\n1、配置Nginx官方源\n输入以下代码，新建一个文件以配置Nginx源\n\n```\n$ vi /etc/yum.repos.d/nginx.repo\n```\n\n在打开的文件中输入以下代码，输入完毕之后，按 “esc” 键退出编辑模式， 输入 “:wq” 保存退出。\n\n```\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/mainline/centos/7/$basearch/\ngpgcheck=0\nenabled=1\n```\n\n2、安装Nginx\n输入以下代码进行安装。\n\n```\n$ yum install nginx -y\n```\n\n3、启动Nginx并设置开机自启\n输入以下代码:\n\n```\n$ systemctl start nginx\n$ systemctl enable nginx\n```\n\n进行到这里，你已经可以把服务器ip复制到浏览器就可以看到Nginx的欢迎界面了。\n\n4、配置Nginx\n接下来，需要修改一下nginx的相关配置，包括设置网站根目录以及配置域名。输入以下代码，打开Nginx的配置文件。(注：此处假定读者已完成了域名备案以及域名解析。)\n\n```\n$ vi /etc/nginx/conf.d/default.conf\n```\n\n依照下图进行修改，将“/usr/share/nginx/html”改为“/usr/share/nginx/html/blog”。\n![nginx配置](https://segmentfault.com/img/remote/1460000012907517?w=698&h=768)\n\n至此，Nginx的配置就基本完成了。\n\n## 安装Nodejs\n\n输入以下代码进行Nodejs的安装。\n\n```\n$ yum install nodejs\n```\n\n可输入`node -v`以及`npm -v`查看node的版本。\n至此，Nodejs的安装就完成了。\n\n## 安装Git以及进行相关配置\n\n1、输入以下代码，进行Git的安装\n\n```\n$ yum install git\n```\n\n2、创建git用户以及设置密码\n输入以下代码：\n\n```\n# 创建用户,用户名为git\n$ adduser git\n# 设置密码\n$ passwd git\n```\n\n3、把git用户添加到sudo用户组中\n输入以下代码`sudo vi /etc/sudoers`，打开sudoers文件，输入`:/root`进行搜索，搜索到代码行`root ALL=(ALL) ALL`,然后在这一行下添加以下代码`git ALL=(ALL) ALL`。输入完毕之后，按`wq!`强制保存退出vi。\n\n4、切换到git用户，添加SSH Key文件并且设置相应的读写与执行权限。\n输入以下代码：\n\n```\n# 切换用户\n$ su git\n# 创建目录\n$ mkdir ~/.ssh\n# 新建文件\n$ vim ~/.ssh/authorized_keys\n```\n\n然后把之前在客户端设置的SSH Key,复制到authorized_keys文件中，保存后退出。\n\n接下来设置文件权限，把authorized_keys文件设置成只有属主有读写权限，把ssh目录设置为只有属主有读、写、执行权限。代码如下：\n\n```\n$ chmod 600 ~/.ssh/authorized_keys\n$ chmod 700 ~/.ssh\n```\n\n设置完后，返回客户端，打开Git Bash，输入以下代码，测试是否能连接上服务器：\n\n```\n# ServerIP为你自己服务器的ip\n$ ssh -v git@ServerIP\n```\n\n**注意**\n\nSSH使用非对称加密，服务端不需要生成密钥对，而只需要一个`authorized_keys`文件，里面存放的是你客户端的**公钥**。客户端应该有密钥对`id_rsa`和`id_rsa.pub`文件，客户端的`authorized_keys`文件应该和`id_rsa.pub`文件内容一致。如果SSH免密码登录失败，请反复确认上述两点。\n\n5、重新回到服务器，在网站根目录新建一个blog文件夹，用于客户端上传文件，并且把该文件授权给git用户。代码如下：\n\n```\n# 使用sudo指令，需要输入git用户的密码\n$ sudo mkdir -p /usr/share/nginx/html/blog\n$ sudo chown -R git:git /usr/share/nginx/html/blog\n```\n\n6、在服务器上初始化一个git裸库\n切换到git用户，然后切换到git用户目录，接着初始化裸库，代码如下：\n\n```\n$ su git\n$ cd ~\n$ git init --bare blog.git\n```\n\n接着新建一个post-receive文件\n\n```\n$ vim ~/blog.git/hooks/post-receive\n```\n\n然后在该文件中输入以下内容：\n\n```\n#！/bin/sh\ngit --work-tree=/usr/share/nginx/html/blog --git-dir=/home/git/blog.git checkout -f\n```\n\n保存退出之后，再输入以下代码，赋予该文件可执行权限。\n\n```\n$ chmod +x ~/blog.git/hooks/post-receive\n```\n\n7、返回客户端，设置博客根目录下的_config.yml文件。\n\n```\ndeploy:\n    type: git\n    repo: git@SERVER:/home/git/blog.git       #此处的SERVER需改为你自己服务器的ip\n    branch: master                            #这里填写分支\n    message:                                  #提交的信息\n```\n\n保存后，在博客根目录打开Git Bash，输入以下命令：\n\n```\n$ hexo clean\n$ hexo g\n$ hexo d\n```\n\n部署完毕之后，即可在浏览器输入你的服务器ip进行访问你的博客了。\n\n## 引用\n\n[fogcrane-基于CentOS搭建Hexo博客](<https://segmentfault.com/a/1190000012907499>)","slug":"hexo_blog_construct_summary","published":1,"updated":"2021-03-28T08:44:39.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyca001769kjbfzx583l","content":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>之前使用jekyll在github上搭建了一个博客。<br>但是，原博客不支持归档和搜索功能，主题也不是特别喜欢，于是决定重新搭建自己的博客站点。<br>这次放弃了jekyll，使用hexo搭建。主要原因是hexo支持很多插件，且性能强悍。(<del>相中了一个特别好看的主题</del>)。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本文代码均基于阿里云<code>Centos7</code>服务器，<code>Manjaro Linux</code>客户端，与<code>hexo</code>引擎。</p>\n<h2 id=\"选择主题\"><a href=\"#选择主题\" class=\"headerlink\" title=\"选择主题\"></a>选择主题</h2><p>在搭建博客之前当然要选择一个自己喜欢的主题了。</p>\n<p>可以在hexo的主题官方上挑选一个。<a href=\"https://hexo.io/themes/\">戳我</a></p>\n<p>注意挑选的时候不仅要看<code>颜值</code>，还要看一下自己需要的功能这个主题是否支持，当然如果你自己会添加插件，那就挑你最喜欢的就好了。</p>\n<h2 id=\"客户机配置\"><a href=\"#客户机配置\" class=\"headerlink\" title=\"客户机配置\"></a>客户机配置</h2><h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><ol>\n<li><p>下载Git.</p>\n</li>\n<li><p>修改用户名和邮箱。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将此处的&quot;yourname&quot;替换成自己的用户名</span><br><span class=\"line\">git config --global user.name &quot;yourname&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 将此处的&quot;youremail&quot;替换成自己的邮箱</span><br><span class=\"line\">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"创建SSH钥匙对\"><a href=\"#创建SSH钥匙对\" class=\"headerlink\" title=\"创建SSH钥匙对\"></a>创建SSH钥匙对</h3><ol>\n<li><p>检查是否存在钥匙对。</p>\n<blockquote>\n<p>$ cd ~/.ssh</p>\n</blockquote>\n</li>\n<li><p>若没有钥匙对，则创建钥匙对。</p>\n<blockquote>\n<p>$ ssh-keygen -t rsa -C “youremail”</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"安装Nodejs\"><a href=\"#安装Nodejs\" class=\"headerlink\" title=\"安装Nodejs\"></a>安装Nodejs</h3><ol>\n<li><p>使用命令行下载Nodejs。</p>\n</li>\n<li><p>检查是否下载完成。</p>\n<blockquote>\n<p>$ node -v</p>\n<p>$ npm -v</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"安装Hexo框架\"><a href=\"#安装Hexo框架\" class=\"headerlink\" title=\"安装Hexo框架\"></a>安装Hexo框架</h3><ol>\n<li><p>使用<code>npm</code>下载<code>hexo</code></p>\n<blockquote>\n<p>$ npm install -g hexo-cli</p>\n</blockquote>\n<p>因为一下原因，<code>npm</code>的下载速度十分感人，建议更换</p>\n</li>\n<li><p>选择一个你想要存放文件的文件夹，初始化blog。</p>\n<blockquote>\n<p>$ hexo init blog</p>\n</blockquote>\n</li>\n<li><p>初始化完毕之后，打开博客根目录的package.json文件，在dependencies的配置中，追加一项：<code>&quot;hexo-deployer-git&quot;: &quot;^0.3.1&quot;</code></p>\n</li>\n<li><p>运行<code>hexo</code></p>\n<blockquote>\n<p>$ hexo s</p>\n</blockquote>\n<p>然后在浏览器输入：｀localhost:4000｀，如果出现hexo的界面就说明已经搭建成功了。</p>\n<p>如果有包缺失，根据提示下载相应的包，再次尝试即可。</p>\n</li>\n</ol>\n<h2 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h2><p>首先，进行服务端的系统更新。</p>\n<blockquote>\n<p>$ yum update -y  </p>\n</blockquote>\n<p>更新完系统后，输入一下代码查看系统版本。</p>\n<blockquote>\n<p>$ cat /etc/centos-release</p>\n</blockquote>\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><p>安装Nginx分为以下几步。第一，配置Nginx官方源。第二，安装Nginx。第三，配置Nginx配置文件。<br>1、配置Nginx官方源<br>输入以下代码，新建一个文件以配置Nginx源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi &#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo</span><br></pre></td></tr></table></figure>\n\n<p>在打开的文件中输入以下代码，输入完毕之后，按 “esc” 键退出编辑模式， 输入 “:wq” 保存退出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">name&#x3D;nginx repo</span><br><span class=\"line\">baseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;mainline&#x2F;centos&#x2F;7&#x2F;$basearch&#x2F;</span><br><span class=\"line\">gpgcheck&#x3D;0</span><br><span class=\"line\">enabled&#x3D;1</span><br></pre></td></tr></table></figure>\n\n<p>2、安装Nginx<br>输入以下代码进行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install nginx -y</span><br></pre></td></tr></table></figure>\n\n<p>3、启动Nginx并设置开机自启<br>输入以下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start nginx</span><br><span class=\"line\">$ systemctl enable nginx</span><br></pre></td></tr></table></figure>\n\n<p>进行到这里，你已经可以把服务器ip复制到浏览器就可以看到Nginx的欢迎界面了。</p>\n<p>4、配置Nginx<br>接下来，需要修改一下nginx的相关配置，包括设置网站根目录以及配置域名。输入以下代码，打开Nginx的配置文件。(注：此处假定读者已完成了域名备案以及域名解析。)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br></pre></td></tr></table></figure>\n\n<p>依照下图进行修改，将“/usr/share/nginx/html”改为“/usr/share/nginx/html/blog”。<br><img src=\"https://segmentfault.com/img/remote/1460000012907517?w=698&h=768\" alt=\"nginx配置\"></p>\n<p>至此，Nginx的配置就基本完成了。</p>\n<h2 id=\"安装Nodejs-1\"><a href=\"#安装Nodejs-1\" class=\"headerlink\" title=\"安装Nodejs\"></a>安装Nodejs</h2><p>输入以下代码进行Nodejs的安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install nodejs</span><br></pre></td></tr></table></figure>\n\n<p>可输入<code>node -v</code>以及<code>npm -v</code>查看node的版本。<br>至此，Nodejs的安装就完成了。</p>\n<h2 id=\"安装Git以及进行相关配置\"><a href=\"#安装Git以及进行相关配置\" class=\"headerlink\" title=\"安装Git以及进行相关配置\"></a>安装Git以及进行相关配置</h2><p>1、输入以下代码，进行Git的安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install git</span><br></pre></td></tr></table></figure>\n\n<p>2、创建git用户以及设置密码<br>输入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建用户,用户名为git</span><br><span class=\"line\">$ adduser git</span><br><span class=\"line\"># 设置密码</span><br><span class=\"line\">$ passwd git</span><br></pre></td></tr></table></figure>\n\n<p>3、把git用户添加到sudo用户组中<br>输入以下代码<code>sudo vi /etc/sudoers</code>，打开sudoers文件，输入<code>:/root</code>进行搜索，搜索到代码行<code>root ALL=(ALL) ALL</code>,然后在这一行下添加以下代码<code>git ALL=(ALL) ALL</code>。输入完毕之后，按<code>wq!</code>强制保存退出vi。</p>\n<p>4、切换到git用户，添加SSH Key文件并且设置相应的读写与执行权限。<br>输入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 切换用户</span><br><span class=\"line\">$ su git</span><br><span class=\"line\"># 创建目录</span><br><span class=\"line\">$ mkdir ~&#x2F;.ssh</span><br><span class=\"line\"># 新建文件</span><br><span class=\"line\">$ vim ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>然后把之前在客户端设置的SSH Key,复制到authorized_keys文件中，保存后退出。</p>\n<p>接下来设置文件权限，把authorized_keys文件设置成只有属主有读写权限，把ssh目录设置为只有属主有读、写、执行权限。代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class=\"line\">$ chmod 700 ~&#x2F;.ssh</span><br></pre></td></tr></table></figure>\n\n<p>设置完后，返回客户端，打开Git Bash，输入以下代码，测试是否能连接上服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ServerIP为你自己服务器的ip</span><br><span class=\"line\">$ ssh -v git@ServerIP</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<p>SSH使用非对称加密，服务端不需要生成密钥对，而只需要一个<code>authorized_keys</code>文件，里面存放的是你客户端的<strong>公钥</strong>。客户端应该有密钥对<code>id_rsa</code>和<code>id_rsa.pub</code>文件，客户端的<code>authorized_keys</code>文件应该和<code>id_rsa.pub</code>文件内容一致。如果SSH免密码登录失败，请反复确认上述两点。</p>\n<p>5、重新回到服务器，在网站根目录新建一个blog文件夹，用于客户端上传文件，并且把该文件授权给git用户。代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用sudo指令，需要输入git用户的密码</span><br><span class=\"line\">$ sudo mkdir -p &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;blog</span><br><span class=\"line\">$ sudo chown -R git:git &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;blog</span><br></pre></td></tr></table></figure>\n\n<p>6、在服务器上初始化一个git裸库<br>切换到git用户，然后切换到git用户目录，接着初始化裸库，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su git</span><br><span class=\"line\">$ cd ~</span><br><span class=\"line\">$ git init --bare blog.git</span><br></pre></td></tr></table></figure>\n\n<p>接着新建一个post-receive文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>\n\n<p>然后在该文件中输入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#！&#x2F;bin&#x2F;sh</span><br><span class=\"line\">git --work-tree&#x3D;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;blog --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;blog.git checkout -f</span><br></pre></td></tr></table></figure>\n\n<p>保存退出之后，再输入以下代码，赋予该文件可执行权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>\n\n<p>7、返回客户端，设置博客根目录下的_config.yml文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: git@SERVER:&#x2F;home&#x2F;git&#x2F;blog.git       #此处的SERVER需改为你自己服务器的ip</span><br><span class=\"line\">    branch: master                            #这里填写分支</span><br><span class=\"line\">    message:                                  #提交的信息</span><br></pre></td></tr></table></figure>\n\n<p>保存后，在博客根目录打开Git Bash，输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<p>部署完毕之后，即可在浏览器输入你的服务器ip进行访问你的博客了。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://segmentfault.com/a/1190000012907499\">fogcrane-基于CentOS搭建Hexo博客</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a>序言</h2><p>之前使用jekyll在github上搭建了一个博客。<br>但是，原博客不支持归档和搜索功能，主题也不是特别喜欢，于是决定重新搭建自己的博客站点。<br>这次放弃了jekyll，使用hexo搭建。主要原因是hexo支持很多插件，且性能强悍。(<del>相中了一个特别好看的主题</del>)。</p>","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本文代码均基于阿里云<code>Centos7</code>服务器，<code>Manjaro Linux</code>客户端，与<code>hexo</code>引擎。</p>\n<h2 id=\"选择主题\"><a href=\"#选择主题\" class=\"headerlink\" title=\"选择主题\"></a>选择主题</h2><p>在搭建博客之前当然要选择一个自己喜欢的主题了。</p>\n<p>可以在hexo的主题官方上挑选一个。<a href=\"https://hexo.io/themes/\">戳我</a></p>\n<p>注意挑选的时候不仅要看<code>颜值</code>，还要看一下自己需要的功能这个主题是否支持，当然如果你自己会添加插件，那就挑你最喜欢的就好了。</p>\n<h2 id=\"客户机配置\"><a href=\"#客户机配置\" class=\"headerlink\" title=\"客户机配置\"></a>客户机配置</h2><h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><ol>\n<li><p>下载Git.</p>\n</li>\n<li><p>修改用户名和邮箱。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将此处的&quot;yourname&quot;替换成自己的用户名</span><br><span class=\"line\">git config --global user.name &quot;yourname&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 将此处的&quot;youremail&quot;替换成自己的邮箱</span><br><span class=\"line\">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"创建SSH钥匙对\"><a href=\"#创建SSH钥匙对\" class=\"headerlink\" title=\"创建SSH钥匙对\"></a>创建SSH钥匙对</h3><ol>\n<li><p>检查是否存在钥匙对。</p>\n<blockquote>\n<p>$ cd ~/.ssh</p>\n</blockquote>\n</li>\n<li><p>若没有钥匙对，则创建钥匙对。</p>\n<blockquote>\n<p>$ ssh-keygen -t rsa -C “youremail”</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"安装Nodejs\"><a href=\"#安装Nodejs\" class=\"headerlink\" title=\"安装Nodejs\"></a>安装Nodejs</h3><ol>\n<li><p>使用命令行下载Nodejs。</p>\n</li>\n<li><p>检查是否下载完成。</p>\n<blockquote>\n<p>$ node -v</p>\n<p>$ npm -v</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"安装Hexo框架\"><a href=\"#安装Hexo框架\" class=\"headerlink\" title=\"安装Hexo框架\"></a>安装Hexo框架</h3><ol>\n<li><p>使用<code>npm</code>下载<code>hexo</code></p>\n<blockquote>\n<p>$ npm install -g hexo-cli</p>\n</blockquote>\n<p>因为一下原因，<code>npm</code>的下载速度十分感人，建议更换</p>\n</li>\n<li><p>选择一个你想要存放文件的文件夹，初始化blog。</p>\n<blockquote>\n<p>$ hexo init blog</p>\n</blockquote>\n</li>\n<li><p>初始化完毕之后，打开博客根目录的package.json文件，在dependencies的配置中，追加一项：<code>&quot;hexo-deployer-git&quot;: &quot;^0.3.1&quot;</code></p>\n</li>\n<li><p>运行<code>hexo</code></p>\n<blockquote>\n<p>$ hexo s</p>\n</blockquote>\n<p>然后在浏览器输入：｀localhost:4000｀，如果出现hexo的界面就说明已经搭建成功了。</p>\n<p>如果有包缺失，根据提示下载相应的包，再次尝试即可。</p>\n</li>\n</ol>\n<h2 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h2><p>首先，进行服务端的系统更新。</p>\n<blockquote>\n<p>$ yum update -y  </p>\n</blockquote>\n<p>更新完系统后，输入一下代码查看系统版本。</p>\n<blockquote>\n<p>$ cat /etc/centos-release</p>\n</blockquote>\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><p>安装Nginx分为以下几步。第一，配置Nginx官方源。第二，安装Nginx。第三，配置Nginx配置文件。<br>1、配置Nginx官方源<br>输入以下代码，新建一个文件以配置Nginx源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi &#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo</span><br></pre></td></tr></table></figure>\n\n<p>在打开的文件中输入以下代码，输入完毕之后，按 “esc” 键退出编辑模式， 输入 “:wq” 保存退出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">name&#x3D;nginx repo</span><br><span class=\"line\">baseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;mainline&#x2F;centos&#x2F;7&#x2F;$basearch&#x2F;</span><br><span class=\"line\">gpgcheck&#x3D;0</span><br><span class=\"line\">enabled&#x3D;1</span><br></pre></td></tr></table></figure>\n\n<p>2、安装Nginx<br>输入以下代码进行安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install nginx -y</span><br></pre></td></tr></table></figure>\n\n<p>3、启动Nginx并设置开机自启<br>输入以下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start nginx</span><br><span class=\"line\">$ systemctl enable nginx</span><br></pre></td></tr></table></figure>\n\n<p>进行到这里，你已经可以把服务器ip复制到浏览器就可以看到Nginx的欢迎界面了。</p>\n<p>4、配置Nginx<br>接下来，需要修改一下nginx的相关配置，包括设置网站根目录以及配置域名。输入以下代码，打开Nginx的配置文件。(注：此处假定读者已完成了域名备案以及域名解析。)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vi &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br></pre></td></tr></table></figure>\n\n<p>依照下图进行修改，将“/usr/share/nginx/html”改为“/usr/share/nginx/html/blog”。<br><img src=\"https://segmentfault.com/img/remote/1460000012907517?w=698&h=768\" alt=\"nginx配置\"></p>\n<p>至此，Nginx的配置就基本完成了。</p>\n<h2 id=\"安装Nodejs-1\"><a href=\"#安装Nodejs-1\" class=\"headerlink\" title=\"安装Nodejs\"></a>安装Nodejs</h2><p>输入以下代码进行Nodejs的安装。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install nodejs</span><br></pre></td></tr></table></figure>\n\n<p>可输入<code>node -v</code>以及<code>npm -v</code>查看node的版本。<br>至此，Nodejs的安装就完成了。</p>\n<h2 id=\"安装Git以及进行相关配置\"><a href=\"#安装Git以及进行相关配置\" class=\"headerlink\" title=\"安装Git以及进行相关配置\"></a>安装Git以及进行相关配置</h2><p>1、输入以下代码，进行Git的安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ yum install git</span><br></pre></td></tr></table></figure>\n\n<p>2、创建git用户以及设置密码<br>输入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建用户,用户名为git</span><br><span class=\"line\">$ adduser git</span><br><span class=\"line\"># 设置密码</span><br><span class=\"line\">$ passwd git</span><br></pre></td></tr></table></figure>\n\n<p>3、把git用户添加到sudo用户组中<br>输入以下代码<code>sudo vi /etc/sudoers</code>，打开sudoers文件，输入<code>:/root</code>进行搜索，搜索到代码行<code>root ALL=(ALL) ALL</code>,然后在这一行下添加以下代码<code>git ALL=(ALL) ALL</code>。输入完毕之后，按<code>wq!</code>强制保存退出vi。</p>\n<p>4、切换到git用户，添加SSH Key文件并且设置相应的读写与执行权限。<br>输入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 切换用户</span><br><span class=\"line\">$ su git</span><br><span class=\"line\"># 创建目录</span><br><span class=\"line\">$ mkdir ~&#x2F;.ssh</span><br><span class=\"line\"># 新建文件</span><br><span class=\"line\">$ vim ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>然后把之前在客户端设置的SSH Key,复制到authorized_keys文件中，保存后退出。</p>\n<p>接下来设置文件权限，把authorized_keys文件设置成只有属主有读写权限，把ssh目录设置为只有属主有读、写、执行权限。代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class=\"line\">$ chmod 700 ~&#x2F;.ssh</span><br></pre></td></tr></table></figure>\n\n<p>设置完后，返回客户端，打开Git Bash，输入以下代码，测试是否能连接上服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ServerIP为你自己服务器的ip</span><br><span class=\"line\">$ ssh -v git@ServerIP</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<p>SSH使用非对称加密，服务端不需要生成密钥对，而只需要一个<code>authorized_keys</code>文件，里面存放的是你客户端的<strong>公钥</strong>。客户端应该有密钥对<code>id_rsa</code>和<code>id_rsa.pub</code>文件，客户端的<code>authorized_keys</code>文件应该和<code>id_rsa.pub</code>文件内容一致。如果SSH免密码登录失败，请反复确认上述两点。</p>\n<p>5、重新回到服务器，在网站根目录新建一个blog文件夹，用于客户端上传文件，并且把该文件授权给git用户。代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用sudo指令，需要输入git用户的密码</span><br><span class=\"line\">$ sudo mkdir -p &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;blog</span><br><span class=\"line\">$ sudo chown -R git:git &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;blog</span><br></pre></td></tr></table></figure>\n\n<p>6、在服务器上初始化一个git裸库<br>切换到git用户，然后切换到git用户目录，接着初始化裸库，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ su git</span><br><span class=\"line\">$ cd ~</span><br><span class=\"line\">$ git init --bare blog.git</span><br></pre></td></tr></table></figure>\n\n<p>接着新建一个post-receive文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>\n\n<p>然后在该文件中输入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#！&#x2F;bin&#x2F;sh</span><br><span class=\"line\">git --work-tree&#x3D;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;blog --git-dir&#x3D;&#x2F;home&#x2F;git&#x2F;blog.git checkout -f</span><br></pre></td></tr></table></figure>\n\n<p>保存退出之后，再输入以下代码，赋予该文件可执行权限。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chmod +x ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>\n\n<p>7、返回客户端，设置博客根目录下的_config.yml文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: git@SERVER:&#x2F;home&#x2F;git&#x2F;blog.git       #此处的SERVER需改为你自己服务器的ip</span><br><span class=\"line\">    branch: master                            #这里填写分支</span><br><span class=\"line\">    message:                                  #提交的信息</span><br></pre></td></tr></table></figure>\n\n<p>保存后，在博客根目录打开Git Bash，输入以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure>\n\n<p>部署完毕之后，即可在浏览器输入你的服务器ip进行访问你的博客了。</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://segmentfault.com/a/1190000012907499\">fogcrane-基于CentOS搭建Hexo博客</a></p>"},{"title":"luogu-P1131","thumbnail":"/gallery/thumbnails/hei3.jpg","date":"2019-09-18T15:07:13.000Z","_content":"\n# 题目\n\n[时态同步](https://www.luogu.org/problem/P1131)\n\n一道双 $dfs$ 的题目。\n\n<!--more-->\n\n## 分析\n\n题意就是给出一棵树，可以增加任意一条边的权值，问最少增加多少可以让所有叶子节点到跟节点的距离相等。\n\n先跑一边 $dfs$ 求出所有节点到根节点的距离，再统计出以每个节点为根的子树上的所有点到根节点的距离的最大值。\n\n然后再做一次 $dfs$ ，当一棵子树中离根节点最远的那个节点到根节点的距离都小于所有树中的距离最大的那个的话就可以考虑增加当前子树的根节点与它父亲节点之间的距离了，因为子树中所有节点的距离都需要增大，增大这条边一定是消耗最少的，因为这条边被所有子树上的节点复用了。然后递归下去。\n\n说起来有点复杂，举个例子吧：\n\n比如对于：\n\n> 5 1\n>\n> 1 2 1\n>\n> 1 3 5\n>\n> 2 4 2\n>\n> 2 5 3\n\n先把图画出来，有三个叶子节点，3 4 5，你会发现 1 到 3 的距离是最远的，因此 4 5 到根节点需要增加，而它们到根节点的路径在 1 2 这条边上重合了，因此我们可以优先在这条边上加，加到子树上有些叶子节点已经达到的最大值。然后向下递归。\n\n## 代码\n\n~~~cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 5e5 + 7;\n\nvector<pair<int, int> > G[MAXN];\nll dis[MAXN], msd[MAXN], maxdis, ans;\nvoid dfs(int x, int fa) {\n    for(auto p: G[x]) {\n        int v = p.first, w = p.second;\n        if(v == fa) continue;\n        dis[v] = dis[x] + w;\n        dfs(v, x);\n        msd[x] = max(msd[x], msd[v] + w);\n    }\n}\n\nvoid dfs2(int x, int fa) {\n    for (auto p: G[x]) {\n        int v = p.first, w = p.second;\n        if(v == fa) continue;\n        ans += msd[x] - msd[v] - w;\n        dfs2(v, x);\n    }\n}\nint main(int argc, char const *argv[])\n{\n    int n, rt;\n    scanf(\"%d %d\", &n, &rt);\n    int u, v, w;\n    rep(i, 1, n-1){\n        scanf(\"%d %d %d\", &u, &v, &w);\n        G[u].push_back({v, w});\n        G[v].push_back({u, w});\n    }\n    dfs(rt, 0);\n\n    dfs2(rt, 0);\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n~~~\n\n","source":"_posts/luogu-P1131.md","raw":"---\ntitle: luogu-P1131\nthumbnail: /gallery/thumbnails/hei3.jpg\ndate: 2019-09-18 23:07:13\ntags: \n    - 搜索\ncategories: \n---\n\n# 题目\n\n[时态同步](https://www.luogu.org/problem/P1131)\n\n一道双 $dfs$ 的题目。\n\n<!--more-->\n\n## 分析\n\n题意就是给出一棵树，可以增加任意一条边的权值，问最少增加多少可以让所有叶子节点到跟节点的距离相等。\n\n先跑一边 $dfs$ 求出所有节点到根节点的距离，再统计出以每个节点为根的子树上的所有点到根节点的距离的最大值。\n\n然后再做一次 $dfs$ ，当一棵子树中离根节点最远的那个节点到根节点的距离都小于所有树中的距离最大的那个的话就可以考虑增加当前子树的根节点与它父亲节点之间的距离了，因为子树中所有节点的距离都需要增大，增大这条边一定是消耗最少的，因为这条边被所有子树上的节点复用了。然后递归下去。\n\n说起来有点复杂，举个例子吧：\n\n比如对于：\n\n> 5 1\n>\n> 1 2 1\n>\n> 1 3 5\n>\n> 2 4 2\n>\n> 2 5 3\n\n先把图画出来，有三个叶子节点，3 4 5，你会发现 1 到 3 的距离是最远的，因此 4 5 到根节点需要增加，而它们到根节点的路径在 1 2 这条边上重合了，因此我们可以优先在这条边上加，加到子树上有些叶子节点已经达到的最大值。然后向下递归。\n\n## 代码\n\n~~~cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int mod = 1e9+7;\nconst int MAXN = 5e5 + 7;\n\nvector<pair<int, int> > G[MAXN];\nll dis[MAXN], msd[MAXN], maxdis, ans;\nvoid dfs(int x, int fa) {\n    for(auto p: G[x]) {\n        int v = p.first, w = p.second;\n        if(v == fa) continue;\n        dis[v] = dis[x] + w;\n        dfs(v, x);\n        msd[x] = max(msd[x], msd[v] + w);\n    }\n}\n\nvoid dfs2(int x, int fa) {\n    for (auto p: G[x]) {\n        int v = p.first, w = p.second;\n        if(v == fa) continue;\n        ans += msd[x] - msd[v] - w;\n        dfs2(v, x);\n    }\n}\nint main(int argc, char const *argv[])\n{\n    int n, rt;\n    scanf(\"%d %d\", &n, &rt);\n    int u, v, w;\n    rep(i, 1, n-1){\n        scanf(\"%d %d %d\", &u, &v, &w);\n        G[u].push_back({v, w});\n        G[v].push_back({u, w});\n    }\n    dfs(rt, 0);\n\n    dfs2(rt, 0);\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n~~~\n\n","slug":"luogu-P1131","published":1,"updated":"2021-03-28T08:45:10.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hycb001a69kjaivv79m7","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problem/P1131\">时态同步</a></p>\n<p>一道双 $dfs$ 的题目。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题意就是给出一棵树，可以增加任意一条边的权值，问最少增加多少可以让所有叶子节点到跟节点的距离相等。</p>\n<p>先跑一边 $dfs$ 求出所有节点到根节点的距离，再统计出以每个节点为根的子树上的所有点到根节点的距离的最大值。</p>\n<p>然后再做一次 $dfs$ ，当一棵子树中离根节点最远的那个节点到根节点的距离都小于所有树中的距离最大的那个的话就可以考虑增加当前子树的根节点与它父亲节点之间的距离了，因为子树中所有节点的距离都需要增大，增大这条边一定是消耗最少的，因为这条边被所有子树上的节点复用了。然后递归下去。</p>\n<p>说起来有点复杂，举个例子吧：</p>\n<p>比如对于：</p>\n<blockquote>\n<p>5 1</p>\n<p>1 2 1</p>\n<p>1 3 5</p>\n<p>2 4 2</p>\n<p>2 5 3</p>\n</blockquote>\n<p>先把图画出来，有三个叶子节点，3 4 5，你会发现 1 到 3 的距离是最远的，因此 4 5 到根节点需要增加，而它们到根节点的路径在 1 2 这条边上重合了，因此我们可以优先在这条边上加，加到子树上有些叶子节点已经达到的最大值。然后向下递归。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">5e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; G[MAXN];</span><br><span class=\"line\">ll dis[MAXN], msd[MAXN], maxdis, ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p: G[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = p.first, w = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dis[v] = dis[x] + w;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, x);</span><br><span class=\"line\">        msd[x] = <span class=\"built_in\">max</span>(msd[x], msd[v] + w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p: G[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = p.first, w = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans += msd[x] - msd[v] - w;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(v, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, rt;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;rt);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(&#123;v, w&#125;);</span><br><span class=\"line\">        G[v].<span class=\"built_in\">push_back</span>(&#123;u, w&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(rt, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(rt, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problem/P1131\">时态同步</a></p>\n<p>一道双 $dfs$ 的题目。</p>","more":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>题意就是给出一棵树，可以增加任意一条边的权值，问最少增加多少可以让所有叶子节点到跟节点的距离相等。</p>\n<p>先跑一边 $dfs$ 求出所有节点到根节点的距离，再统计出以每个节点为根的子树上的所有点到根节点的距离的最大值。</p>\n<p>然后再做一次 $dfs$ ，当一棵子树中离根节点最远的那个节点到根节点的距离都小于所有树中的距离最大的那个的话就可以考虑增加当前子树的根节点与它父亲节点之间的距离了，因为子树中所有节点的距离都需要增大，增大这条边一定是消耗最少的，因为这条边被所有子树上的节点复用了。然后递归下去。</p>\n<p>说起来有点复杂，举个例子吧：</p>\n<p>比如对于：</p>\n<blockquote>\n<p>5 1</p>\n<p>1 2 1</p>\n<p>1 3 5</p>\n<p>2 4 2</p>\n<p>2 5 3</p>\n</blockquote>\n<p>先把图画出来，有三个叶子节点，3 4 5，你会发现 1 到 3 的距离是最远的，因此 4 5 到根节点需要增加，而它们到根节点的路径在 1 2 这条边上重合了，因此我们可以优先在这条边上加，加到子树上有些叶子节点已经达到的最大值。然后向下递归。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">5e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; G[MAXN];</span><br><span class=\"line\">ll dis[MAXN], msd[MAXN], maxdis, ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p: G[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = p.first, w = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dis[v] = dis[x] + w;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, x);</span><br><span class=\"line\">        msd[x] = <span class=\"built_in\">max</span>(msd[x], msd[v] + w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p: G[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v = p.first, w = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans += msd[x] - msd[v] - w;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(v, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, rt;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;rt);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(&#123;v, w&#125;);</span><br><span class=\"line\">        G[v].<span class=\"built_in\">push_back</span>(&#123;u, w&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(rt, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(rt, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CODEVS-2370-小机房的树","thumbnail":"/gallery/thumbnails/0_Obsidian woods_2, Anton Fadeev_01.jpg","date":"2019-08-06T11:57:30.000Z","_content":"\n# 题目\n\n[CODEVS-2370-小机房的树](codevs.cn/problem/2370/)\n\n一道经典的LCA问题。\n\n<!--more-->\n\n## 题解\n\n题目就是求$u,v$两点之间的最短距离，利用$lca$的性质可以在$O(log(n))$的时间内求出答案。\n\n也就是$dis[u] + dis[v] - 2 * dis[lca(u, v)]$，其中 $dis[u]$ 数组表示从根节点到点 $u$ 的距离。\n\n~~~c++\n#include<bits/stdc++.h>\n#define rep(i, a, b)    for(int i = (a); i <= (int)(b); ++i)\n#define per(i, a, b)    for(int i = (a); i >= (int)(b); --i)\n#define debug(x)    cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\nconst int MAXN = 2e5 + 7;\n\nint dep[MAXN], dis[MAXN], f[MAXN][20];\nvector<pii> G[MAXN];\n\nvoid dfs(int x, int last = 0, int fa = -1) {\n    f[x][0] = fa;\n    dep[x] = dep[fa] + 1;\n    dis[x] = dis[fa] + last;\n    for(int i = 1; (1<<i) <= dep[x]; ++i){\n        f[x][i] = f[f[x][i-1]][i-1];\n    }\n    rep(i, 0, G[x].size()-1){\n        pii p = G[x][i];\n        if(p.first == fa)   continue;\n        dfs(p.first, p.second, x);\n    }\n}\n\nint lca(int u, int v) {\n    if(dep[u] < dep[v]) swap(u, v);\n    int dif = dep[u] - dep[v];\n    per(i, 20, 0){\n        if((1<<i) <= dif){\n            dif -= (1<<i);\n            u = f[u][i];\n        }\n    }\n    if(u == v)  return u;\n    per(i, 20, 0){\n        if(dep[u] >= (1<<i) && f[u][i] != f[v][i]){\n            u = f[u][i];\n            v = f[v][i];\n        }\n    }\n    return f[u][0];\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int u, v, c;\n    rep(i, 1, n-1){\n        scanf(\"%d %d %d\", &u, &v, &c);\n        G[u].push_back(make_pair(v, c));\n        G[v].push_back(make_pair(u, c));\n    }\n    dfs(0);\n    int T;\n    scanf(\"%d\", &T);\n    while(T--){\n        scanf(\"%d %d\", &u, &v);\n        printf(\"%d\\n\", dis[u] + dis[v] - 2 * dis[lca(u, v)]);\n    }\n    return 0;\n}\n~~~\n\n","source":"_posts/CODEVS-2370-小机房的树.md","raw":"---\ntitle: CODEVS-2370-小机房的树\nthumbnail: /gallery/thumbnails/0_Obsidian woods_2, Anton Fadeev_01.jpg\ndate: 2019-08-06 19:57:30\ntags: \n    - LCA\n    - 图论\ncategories: \n---\n\n# 题目\n\n[CODEVS-2370-小机房的树](codevs.cn/problem/2370/)\n\n一道经典的LCA问题。\n\n<!--more-->\n\n## 题解\n\n题目就是求$u,v$两点之间的最短距离，利用$lca$的性质可以在$O(log(n))$的时间内求出答案。\n\n也就是$dis[u] + dis[v] - 2 * dis[lca(u, v)]$，其中 $dis[u]$ 数组表示从根节点到点 $u$ 的距离。\n\n~~~c++\n#include<bits/stdc++.h>\n#define rep(i, a, b)    for(int i = (a); i <= (int)(b); ++i)\n#define per(i, a, b)    for(int i = (a); i >= (int)(b); --i)\n#define debug(x)    cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int, int> pii;\nconst int MAXN = 2e5 + 7;\n\nint dep[MAXN], dis[MAXN], f[MAXN][20];\nvector<pii> G[MAXN];\n\nvoid dfs(int x, int last = 0, int fa = -1) {\n    f[x][0] = fa;\n    dep[x] = dep[fa] + 1;\n    dis[x] = dis[fa] + last;\n    for(int i = 1; (1<<i) <= dep[x]; ++i){\n        f[x][i] = f[f[x][i-1]][i-1];\n    }\n    rep(i, 0, G[x].size()-1){\n        pii p = G[x][i];\n        if(p.first == fa)   continue;\n        dfs(p.first, p.second, x);\n    }\n}\n\nint lca(int u, int v) {\n    if(dep[u] < dep[v]) swap(u, v);\n    int dif = dep[u] - dep[v];\n    per(i, 20, 0){\n        if((1<<i) <= dif){\n            dif -= (1<<i);\n            u = f[u][i];\n        }\n    }\n    if(u == v)  return u;\n    per(i, 20, 0){\n        if(dep[u] >= (1<<i) && f[u][i] != f[v][i]){\n            u = f[u][i];\n            v = f[v][i];\n        }\n    }\n    return f[u][0];\n}\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    int u, v, c;\n    rep(i, 1, n-1){\n        scanf(\"%d %d %d\", &u, &v, &c);\n        G[u].push_back(make_pair(v, c));\n        G[v].push_back(make_pair(u, c));\n    }\n    dfs(0);\n    int T;\n    scanf(\"%d\", &T);\n    while(T--){\n        scanf(\"%d %d\", &u, &v);\n        printf(\"%d\\n\", dis[u] + dis[v] - 2 * dis[lca(u, v)]);\n    }\n    return 0;\n}\n~~~\n\n","slug":"CODEVS-2370-小机房的树","published":1,"updated":"2021-03-28T08:52:39.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hycc001d69kjgkb8euwv","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"codevs.cn/problem/2370/\">CODEVS-2370-小机房的树</a></p>\n<p>一道经典的LCA问题。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>题目就是求$u,v$两点之间的最短距离，利用$lca$的性质可以在$O(log(n))$的时间内求出答案。</p>\n<p>也就是$dis[u] + dis[v] - 2 * dis[lca(u, v)]$，其中 $dis[u]$ 数组表示从根节点到点 $u$ 的距离。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b)    for(int i = (a); i &lt;= (int)(b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b)    for(int i = (a); i &gt;= (int)(b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x)    cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dep[MAXN], dis[MAXN], f[MAXN][<span class=\"number\">20</span>];</span><br><span class=\"line\">vector&lt;pii&gt; G[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> last = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> fa = <span class=\"number\">-1</span>)</span> </span>&#123;</span><br><span class=\"line\">    f[x][<span class=\"number\">0</span>] = fa;</span><br><span class=\"line\">    dep[x] = dep[fa] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    dis[x] = dis[fa] + last;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; (<span class=\"number\">1</span>&lt;&lt;i) &lt;= dep[x]; ++i)&#123;</span><br><span class=\"line\">        f[x][i] = f[f[x][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, G[x].<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        pii p = G[x][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.first == fa)   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(p.first, p.second, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[u] &lt; dep[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dif = dep[u] - dep[v];</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">20</span>, <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((<span class=\"number\">1</span>&lt;&lt;i) &lt;= dif)&#123;</span><br><span class=\"line\">            dif -= (<span class=\"number\">1</span>&lt;&lt;i);</span><br><span class=\"line\">            u = f[u][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == v)  <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">20</span>, <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[u] &gt;= (<span class=\"number\">1</span>&lt;&lt;i) &amp;&amp; f[u][i] != f[v][i])&#123;</span><br><span class=\"line\">            u = f[u][i];</span><br><span class=\"line\">            v = f[v][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, c;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;c);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(v, c));</span><br><span class=\"line\">        G[v].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(u, c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, dis[u] + dis[v] - <span class=\"number\">2</span> * dis[<span class=\"built_in\">lca</span>(u, v)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"codevs.cn/problem/2370/\">CODEVS-2370-小机房的树</a></p>\n<p>一道经典的LCA问题。</p>","more":"<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>题目就是求$u,v$两点之间的最短距离，利用$lca$的性质可以在$O(log(n))$的时间内求出答案。</p>\n<p>也就是$dis[u] + dis[v] - 2 * dis[lca(u, v)]$，其中 $dis[u]$ 数组表示从根节点到点 $u$ 的距离。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b)    for(int i = (a); i &lt;= (int)(b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b)    for(int i = (a); i &gt;= (int)(b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x)    cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dep[MAXN], dis[MAXN], f[MAXN][<span class=\"number\">20</span>];</span><br><span class=\"line\">vector&lt;pii&gt; G[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> last = <span class=\"number\">0</span>, <span class=\"keyword\">int</span> fa = <span class=\"number\">-1</span>)</span> </span>&#123;</span><br><span class=\"line\">    f[x][<span class=\"number\">0</span>] = fa;</span><br><span class=\"line\">    dep[x] = dep[fa] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    dis[x] = dis[fa] + last;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; (<span class=\"number\">1</span>&lt;&lt;i) &lt;= dep[x]; ++i)&#123;</span><br><span class=\"line\">        f[x][i] = f[f[x][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, G[x].<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        pii p = G[x][i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p.first == fa)   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(p.first, p.second, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dep[u] &lt; dep[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dif = dep[u] - dep[v];</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">20</span>, <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((<span class=\"number\">1</span>&lt;&lt;i) &lt;= dif)&#123;</span><br><span class=\"line\">            dif -= (<span class=\"number\">1</span>&lt;&lt;i);</span><br><span class=\"line\">            u = f[u][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(u == v)  <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    <span class=\"built_in\">per</span>(i, <span class=\"number\">20</span>, <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[u] &gt;= (<span class=\"number\">1</span>&lt;&lt;i) &amp;&amp; f[u][i] != f[v][i])&#123;</span><br><span class=\"line\">            u = f[u][i];</span><br><span class=\"line\">            v = f[v][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, c;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;c);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(v, c));</span><br><span class=\"line\">        G[v].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(u, c));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, dis[u] + dis[v] - <span class=\"number\">2</span> * dis[<span class=\"built_in\">lca</span>(u, v)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"洛谷-P3806","thumbnail":"/gallery/thumbnails/1_Construction of the Monolith, Anton Fadeev_02.jpg","date":"2019-09-28T11:33:57.000Z","_content":"\n# 题目\n\n[洛谷P3806](https://www.luogu.org/problem/P3806)\n\n点分治模板题。\n\n求边权树上距离为 $k$ 的点对。\n\n<!--more-->\n\n## 分析\n\n第一眼没看到边带权，以为直接判断树的直径是否大于等于 $k$ 就行了。233333。\n\n一道经典的点分治的题目，点分治是一种高效的求树上路径满足一定条件的路径个数，当然一条路径，对应两个端点，说成点对数也可以。\n\n这道题目本来写成了在线，有一个点 $1.02s$ 过不去，本来想着卡卡就能过去了，可是去看了看别人的代码，发现总共只需要 $200+ms$ 就够了。想着是自己写搓了，然后翻开了题解，发现可以同时对所有的询问进行查询，没有必要一个一个查。改了改，就过了。\n\n点分治还是比较考验对 $dfs$ 的理解的，因为这道题就有三个 $dfs$ ，甚至还有一个换根 $DP$ 求重心。\n\n然后就是比较考验细节，今天两道模板题都是因为几个变量名弄混了，调了几个小时的 $BUG$ 。\n\n讲一下思路吧。点分治最重要的两点，一是找重心，这样可以降低复杂度，二是统计和去重。\n\n找重心每道题目都是一样的，就不说了。\n\n这道题的统计就是，对于每一个重心树，先统计所有节点到根节点的距离，因为距离范围不超过 $1e7$ 可以用数组保存，剩下一个 $map$ 的 $log$ ，比较重要的是统计数组不能直接清空，我们考虑将所有距离先存起来，统计一下，然后再删除就好了。去重的话，就是很常规的去重。\n\n我统计的直接就是距离为 $k$ 的点对数。\n\n时间复杂度： $O(n\\cdot m \\log n)$\n\n## 代码\n\n~~~c++\n#include<bits/stdc++.h>\n#define rep(i, a, b)    for(int i = (a); i <= (b); ++i)\n#define per(i, a, b)    for(int i = (a); i >= (b); --i)\n#define debug(x)    cerr << #x << ' ' << x << endl\n#define size sizeeeeeee\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN = 1e4 + 7;\nconst int MAXM = 1e7 + 7;\nconst int MOD = 1e9 + 7;\n\nvector<pair<int, int> > G[MAXN];\nint son[MAXN], dep[MAXN], f[MAXN], q[MAXN], ans[MAXN], k;\nint root, size; int cnt[MAXM], n, m;\nbool vis[MAXN];\n\nvoid get_rt(int x, int fa) {\n    son[x] = 1; f[x] = 0;\n    for(auto p: G[x]) {\n        int u = p.first;\n        if(u == fa || vis[u])   continue;\n        get_rt(u, x);\n        son[x] += son[u];\n        f[x] = max(f[x], son[u]);\n    }\n    f[x] = max(f[x], size - son[x]);\n    if(f[x] < f[root])  root = x;\n}\nvector<int> v;\nvoid get_dep(int x, int fa) {\n    v.push_back(dep[x]);\n    for(auto p: G[x]) {\n        int u = p.first, w = p.second;\n        if(u == fa || vis[u])   continue;\n        dep[u] = dep[x] + w;\n        get_dep(u, x);\n    }\n}\nvoid calc(int x, int w, int op) {\n    v.clear(); dep[x] = w; get_dep(x, 0);\n    for(int p: v) {\n        rep(i, 1, m) if(p <= q[i]) ans[i] += op * cnt[q[i] - p];\n        cnt[p]++;\n    }\n    for(int p: v) cnt[p]--;\n}\nvoid solve(int x) {\n    calc(x, 0, 1); vis[x] = 1;\n    for(auto p: G[x]) {\n        int u = p.first, w = p.second;\n        if(vis[u])  continue;\n        calc(u, w, -1);\n        root = 0; size = son[u];\n        get_rt(u, 0);\n        solve(root);\n    }\n}\nint main() {\n    scanf(\"%d %d\", &n, &m);\n    int u, v, w;\n    rep(i, 1, n-1) {\n        scanf(\"%d %d %d\", &u, &v, &w);\n        G[u].push_back({v, w});\n        G[v].push_back({u, w});\n    }\n    rep(i, 1, m) scanf(\"%d\", &q[i]);\n    f[0] = INT_MAX; size = n; root = 0;\n    get_rt(1, 0); solve(root);\n    rep(i, 1, m) {\n        if(ans[i])  printf(\"AYE\\n\");\n        else printf(\"NAY\\n\");\n    }\n    return 0;\n}\n~~~\n\n","source":"_posts/luogu-P3806.md","raw":"---\ntitle: 洛谷-P3806\nthumbnail: /gallery/thumbnails/1_Construction of the Monolith, Anton Fadeev_02.jpg\ndate: 2019-09-28 19:33:57\ntags: \n    - 点分治\n    - 动态规划\n    - 图论\ncategories: \n    - 竞赛\n---\n\n# 题目\n\n[洛谷P3806](https://www.luogu.org/problem/P3806)\n\n点分治模板题。\n\n求边权树上距离为 $k$ 的点对。\n\n<!--more-->\n\n## 分析\n\n第一眼没看到边带权，以为直接判断树的直径是否大于等于 $k$ 就行了。233333。\n\n一道经典的点分治的题目，点分治是一种高效的求树上路径满足一定条件的路径个数，当然一条路径，对应两个端点，说成点对数也可以。\n\n这道题目本来写成了在线，有一个点 $1.02s$ 过不去，本来想着卡卡就能过去了，可是去看了看别人的代码，发现总共只需要 $200+ms$ 就够了。想着是自己写搓了，然后翻开了题解，发现可以同时对所有的询问进行查询，没有必要一个一个查。改了改，就过了。\n\n点分治还是比较考验对 $dfs$ 的理解的，因为这道题就有三个 $dfs$ ，甚至还有一个换根 $DP$ 求重心。\n\n然后就是比较考验细节，今天两道模板题都是因为几个变量名弄混了，调了几个小时的 $BUG$ 。\n\n讲一下思路吧。点分治最重要的两点，一是找重心，这样可以降低复杂度，二是统计和去重。\n\n找重心每道题目都是一样的，就不说了。\n\n这道题的统计就是，对于每一个重心树，先统计所有节点到根节点的距离，因为距离范围不超过 $1e7$ 可以用数组保存，剩下一个 $map$ 的 $log$ ，比较重要的是统计数组不能直接清空，我们考虑将所有距离先存起来，统计一下，然后再删除就好了。去重的话，就是很常规的去重。\n\n我统计的直接就是距离为 $k$ 的点对数。\n\n时间复杂度： $O(n\\cdot m \\log n)$\n\n## 代码\n\n~~~c++\n#include<bits/stdc++.h>\n#define rep(i, a, b)    for(int i = (a); i <= (b); ++i)\n#define per(i, a, b)    for(int i = (a); i >= (b); --i)\n#define debug(x)    cerr << #x << ' ' << x << endl\n#define size sizeeeeeee\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN = 1e4 + 7;\nconst int MAXM = 1e7 + 7;\nconst int MOD = 1e9 + 7;\n\nvector<pair<int, int> > G[MAXN];\nint son[MAXN], dep[MAXN], f[MAXN], q[MAXN], ans[MAXN], k;\nint root, size; int cnt[MAXM], n, m;\nbool vis[MAXN];\n\nvoid get_rt(int x, int fa) {\n    son[x] = 1; f[x] = 0;\n    for(auto p: G[x]) {\n        int u = p.first;\n        if(u == fa || vis[u])   continue;\n        get_rt(u, x);\n        son[x] += son[u];\n        f[x] = max(f[x], son[u]);\n    }\n    f[x] = max(f[x], size - son[x]);\n    if(f[x] < f[root])  root = x;\n}\nvector<int> v;\nvoid get_dep(int x, int fa) {\n    v.push_back(dep[x]);\n    for(auto p: G[x]) {\n        int u = p.first, w = p.second;\n        if(u == fa || vis[u])   continue;\n        dep[u] = dep[x] + w;\n        get_dep(u, x);\n    }\n}\nvoid calc(int x, int w, int op) {\n    v.clear(); dep[x] = w; get_dep(x, 0);\n    for(int p: v) {\n        rep(i, 1, m) if(p <= q[i]) ans[i] += op * cnt[q[i] - p];\n        cnt[p]++;\n    }\n    for(int p: v) cnt[p]--;\n}\nvoid solve(int x) {\n    calc(x, 0, 1); vis[x] = 1;\n    for(auto p: G[x]) {\n        int u = p.first, w = p.second;\n        if(vis[u])  continue;\n        calc(u, w, -1);\n        root = 0; size = son[u];\n        get_rt(u, 0);\n        solve(root);\n    }\n}\nint main() {\n    scanf(\"%d %d\", &n, &m);\n    int u, v, w;\n    rep(i, 1, n-1) {\n        scanf(\"%d %d %d\", &u, &v, &w);\n        G[u].push_back({v, w});\n        G[v].push_back({u, w});\n    }\n    rep(i, 1, m) scanf(\"%d\", &q[i]);\n    f[0] = INT_MAX; size = n; root = 0;\n    get_rt(1, 0); solve(root);\n    rep(i, 1, m) {\n        if(ans[i])  printf(\"AYE\\n\");\n        else printf(\"NAY\\n\");\n    }\n    return 0;\n}\n~~~\n\n","slug":"luogu-P3806","published":1,"updated":"2021-03-28T08:45:49.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hycc001i69kj7r7o7izi","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problem/P3806\">洛谷P3806</a></p>\n<p>点分治模板题。</p>\n<p>求边权树上距离为 $k$ 的点对。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>第一眼没看到边带权，以为直接判断树的直径是否大于等于 $k$ 就行了。233333。</p>\n<p>一道经典的点分治的题目，点分治是一种高效的求树上路径满足一定条件的路径个数，当然一条路径，对应两个端点，说成点对数也可以。</p>\n<p>这道题目本来写成了在线，有一个点 $1.02s$ 过不去，本来想着卡卡就能过去了，可是去看了看别人的代码，发现总共只需要 $200+ms$ 就够了。想着是自己写搓了，然后翻开了题解，发现可以同时对所有的询问进行查询，没有必要一个一个查。改了改，就过了。</p>\n<p>点分治还是比较考验对 $dfs$ 的理解的，因为这道题就有三个 $dfs$ ，甚至还有一个换根 $DP$ 求重心。</p>\n<p>然后就是比较考验细节，今天两道模板题都是因为几个变量名弄混了，调了几个小时的 $BUG$ 。</p>\n<p>讲一下思路吧。点分治最重要的两点，一是找重心，这样可以降低复杂度，二是统计和去重。</p>\n<p>找重心每道题目都是一样的，就不说了。</p>\n<p>这道题的统计就是，对于每一个重心树，先统计所有节点到根节点的距离，因为距离范围不超过 $1e7$ 可以用数组保存，剩下一个 $map$ 的 $log$ ，比较重要的是统计数组不能直接清空，我们考虑将所有距离先存起来，统计一下，然后再删除就好了。去重的话，就是很常规的去重。</p>\n<p>我统计的直接就是距离为 $k$ 的点对数。</p>\n<p>时间复杂度： $O(n\\cdot m \\log n)$</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b)    for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b)    for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x)    cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> size sizeeeeeee</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXM = <span class=\"number\">1e7</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; G[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> son[MAXN], dep[MAXN], f[MAXN], q[MAXN], ans[MAXN], k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> root, size; <span class=\"keyword\">int</span> cnt[MAXM], n, m;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get_rt</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    son[x] = <span class=\"number\">1</span>; f[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p: G[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = p.first;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == fa || vis[u])   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">get_rt</span>(u, x);</span><br><span class=\"line\">        son[x] += son[u];</span><br><span class=\"line\">        f[x] = <span class=\"built_in\">max</span>(f[x], son[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[x] = <span class=\"built_in\">max</span>(f[x], size - son[x]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[x] &lt; f[root])  root = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get_dep</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    v.<span class=\"built_in\">push_back</span>(dep[x]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p: G[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = p.first, w = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == fa || vis[u])   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dep[u] = dep[x] + w;</span><br><span class=\"line\">        <span class=\"built_in\">get_dep</span>(u, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> op)</span> </span>&#123;</span><br><span class=\"line\">    v.<span class=\"built_in\">clear</span>(); dep[x] = w; <span class=\"built_in\">get_dep</span>(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p: v) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"keyword\">if</span>(p &lt;= q[i]) ans[i] += op * cnt[q[i] - p];</span><br><span class=\"line\">        cnt[p]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p: v) cnt[p]--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">calc</span>(x, <span class=\"number\">0</span>, <span class=\"number\">1</span>); vis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p: G[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = p.first, w = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u])  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">calc</span>(u, w, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        root = <span class=\"number\">0</span>; size = son[u];</span><br><span class=\"line\">        <span class=\"built_in\">get_rt</span>(u, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(&#123;v, w&#125;);</span><br><span class=\"line\">        G[v].<span class=\"built_in\">push_back</span>(&#123;u, w&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = INT_MAX; size = n; root = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">get_rt</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"built_in\">solve</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i])  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;AYE\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NAY\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problem/P3806\">洛谷P3806</a></p>\n<p>点分治模板题。</p>\n<p>求边权树上距离为 $k$ 的点对。</p>","more":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>第一眼没看到边带权，以为直接判断树的直径是否大于等于 $k$ 就行了。233333。</p>\n<p>一道经典的点分治的题目，点分治是一种高效的求树上路径满足一定条件的路径个数，当然一条路径，对应两个端点，说成点对数也可以。</p>\n<p>这道题目本来写成了在线，有一个点 $1.02s$ 过不去，本来想着卡卡就能过去了，可是去看了看别人的代码，发现总共只需要 $200+ms$ 就够了。想着是自己写搓了，然后翻开了题解，发现可以同时对所有的询问进行查询，没有必要一个一个查。改了改，就过了。</p>\n<p>点分治还是比较考验对 $dfs$ 的理解的，因为这道题就有三个 $dfs$ ，甚至还有一个换根 $DP$ 求重心。</p>\n<p>然后就是比较考验细节，今天两道模板题都是因为几个变量名弄混了，调了几个小时的 $BUG$ 。</p>\n<p>讲一下思路吧。点分治最重要的两点，一是找重心，这样可以降低复杂度，二是统计和去重。</p>\n<p>找重心每道题目都是一样的，就不说了。</p>\n<p>这道题的统计就是，对于每一个重心树，先统计所有节点到根节点的距离，因为距离范围不超过 $1e7$ 可以用数组保存，剩下一个 $map$ 的 $log$ ，比较重要的是统计数组不能直接清空，我们考虑将所有距离先存起来，统计一下，然后再删除就好了。去重的话，就是很常规的去重。</p>\n<p>我统计的直接就是距离为 $k$ 的点对数。</p>\n<p>时间复杂度： $O(n\\cdot m \\log n)$</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b)    for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b)    for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x)    cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> size sizeeeeeee</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">1e4</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXM = <span class=\"number\">1e7</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; G[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> son[MAXN], dep[MAXN], f[MAXN], q[MAXN], ans[MAXN], k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> root, size; <span class=\"keyword\">int</span> cnt[MAXM], n, m;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get_rt</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    son[x] = <span class=\"number\">1</span>; f[x] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p: G[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = p.first;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == fa || vis[u])   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">get_rt</span>(u, x);</span><br><span class=\"line\">        son[x] += son[u];</span><br><span class=\"line\">        f[x] = <span class=\"built_in\">max</span>(f[x], son[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f[x] = <span class=\"built_in\">max</span>(f[x], size - son[x]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(f[x] &lt; f[root])  root = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get_dep</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">    v.<span class=\"built_in\">push_back</span>(dep[x]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p: G[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = p.first, w = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(u == fa || vis[u])   <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dep[u] = dep[x] + w;</span><br><span class=\"line\">        <span class=\"built_in\">get_dep</span>(u, x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> op)</span> </span>&#123;</span><br><span class=\"line\">    v.<span class=\"built_in\">clear</span>(); dep[x] = w; <span class=\"built_in\">get_dep</span>(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p: v) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"keyword\">if</span>(p &lt;= q[i]) ans[i] += op * cnt[q[i] - p];</span><br><span class=\"line\">        cnt[p]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p: v) cnt[p]--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">calc</span>(x, <span class=\"number\">0</span>, <span class=\"number\">1</span>); vis[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> p: G[x]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = p.first, w = p.second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u])  <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">calc</span>(u, w, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        root = <span class=\"number\">0</span>; size = son[u];</span><br><span class=\"line\">        <span class=\"built_in\">get_rt</span>(u, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, w;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w);</span><br><span class=\"line\">        G[u].<span class=\"built_in\">push_back</span>(&#123;v, w&#125;);</span><br><span class=\"line\">        G[v].<span class=\"built_in\">push_back</span>(&#123;u, w&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class=\"line\">    f[<span class=\"number\">0</span>] = INT_MAX; size = n; root = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">get_rt</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"built_in\">solve</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans[i])  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;AYE\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;NAY\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"牛客小白赛15","thumbnail":"/gallery/thumbnails/2_Sea Landscapes, Anton Fadeev_03.jpg","date":"2019-06-16T04:52:25.000Z","_content":"\n# 题目\n\n[牛客小白赛15](https://ac.nowcoder.com/acm/contest/917#question)\n\n<!--more-->\n\n# 题解\n\n## E. 希望\n\n*希望是什么，希望是我们这个时代最珍贵的东西。*\n\n直接用一颗线段树维护区间最小值就可以了。\n\n然后在做一个背包。\n\n## H.数据结构题\n\n一个很神奇的思路。\n\n我们将每一个出现x的位置，放进G[x]中，然后查找第一个比r大的位置，和第一个大于定于l的位置，然后这两个位置做差就可以得到x在这段区间中的出现次数了。\n\n# 代码\n\n## E. 希望\n\n~~~c++\n/*---------------------------------\n\n @Author:   Dicer\n @DateTime: 2019-06-16 11:54:32\n\n---------------------------------*/\n\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst double eps = 1e-8;\nconst int INF = 0x3f3f3f3f;\nconst int mod = 1e9+7;\nconst int MAXN = 2e5 + 7;\n\nstruct node{\n    int l, r;\n    int mid(){return (l+r)>>1;}\n    int val;\n}s[MAXN<<1];\nll a[MAXN], b[MAXN], dp[MAXN];\nvoid build(int l, int r, int x){\n    s[x].l = l; s[x].r = r; s[x].val = 500;\n    int mid = (l+r)>>1;\n    if(l == r)  return;\n    build(l, mid, x<<1);\n    build(mid+1, r, x<<1|1);\n}\ninline void upd(int l, int r, int x, int v){\n    // cout << l << ' ' << r << ' ' << s[x].l << ' ' << s[x].r << ' ' << v << endl;\n    if(s[x].l >= l && s[x].r <= r){\n        s[x].val = min(s[x].val, v);\n        return;\n    }\n    int mid = s[x].mid();\n    if(r > mid) upd(l, r, x<<1|1, v);\n    if(l <= mid) upd(l, r, x<<1, v);\n}\ninline void pushdown(int x){\n    if(s[x].l == s[x].r){\n        a[s[x].l] = s[x].val;\n        return;\n    }\n    s[x<<1].val = min(s[x<<1].val, s[x].val);\n    s[x<<1|1].val = min(s[x<<1|1].val, s[x].val);\n    pushdown(x<<1);\n    pushdown(x<<1|1);\n}\nint main(int argc, char const *argv[])\n{\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif\n    \n    int n, k, m;\n    cin >> n >> k >> m;\n    for(int i = 1; i <= n; ++i) cin >> b[i];\n    build(1, n, 1);\n    int l, r; ll c;\n    for(int i = 1; i <= m; ++i){\n        cin >> l >> r >> c;\n        upd(l, r, 1, c);\n    }\n    pushdown(1);\n    // for(int i = 1; i <= n; ++i) cout << a[i] << ' ';\n    // cout << endl;\n    //dp\n\tll sum = 0;\n    for(int i = 1; i <= n; ++i){\n    \tsum += b[i];\n    \tif(b[i] >= 0)\tcontinue;\n    \tfor(int j = k; j >= a[i]; --j){\n    \t\tdp[j] = max(dp[j], dp[j-a[i]] - b[i]);\n    \t}\n    }\n    cout << sum+dp[k] << endl;\n    return 0;\n}\n~~~\n\n## H.数据结构题\n\n~~~c++\n/*---------------------------------\n\n @Author:   Dicer\n @DateTime: 2019-06-16 01:55:25\n\n---------------------------------*/\n\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst double eps = 1e-8;\nconst int INF = 0x3f3f3f3f;\nconst int mod = 20180623;\nconst int MAXN = 2e5 + 7;\n\nint a[MAXN];\nvector<int> G[MAXN];\nint main(int argc, char const *argv[])\n{\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif\n    \n    int n, m;\n    cin >> n >> m;\n    for(int i = 1; i <= n; ++i){\n        cin >> a[i];\n        G[a[i]].push_back(i);\n    }\n    ll x, a, b, l1, l2, r1, r2;\n    for(int i = 1; i <= m; ++i){\n        cin >> l1 >> r1 >> l2 >> r2 >> x;\n        if(l1 > r1) swap(l1, r1);\n        if(l2 > r2) swap(l2, r2);\n        a = upper_bound(G[x].begin(), G[x].end(), r1) - lower_bound(G[x].begin(), G[x].end(), l1);\n        b = upper_bound(G[x].begin(), G[x].end(), r2) - lower_bound(G[x].begin(), G[x].end(), l2);\n        cout << a << endl;\n        cout << b << endl;\n        cout << (a%mod)*(b%mod)%mod << endl;\n    }\n    return 0;\n}\n~~~\n\n","source":"_posts/niukexiaobai15.md","raw":"---\ntitle: 牛客小白赛15\nthumbnail: /gallery/thumbnails/2_Sea Landscapes, Anton Fadeev_03.jpg\ndate: 2019-06-16 12:52:25\ntags: \n    - 数据结构\n    - 线段树\ncategories: \n---\n\n# 题目\n\n[牛客小白赛15](https://ac.nowcoder.com/acm/contest/917#question)\n\n<!--more-->\n\n# 题解\n\n## E. 希望\n\n*希望是什么，希望是我们这个时代最珍贵的东西。*\n\n直接用一颗线段树维护区间最小值就可以了。\n\n然后在做一个背包。\n\n## H.数据结构题\n\n一个很神奇的思路。\n\n我们将每一个出现x的位置，放进G[x]中，然后查找第一个比r大的位置，和第一个大于定于l的位置，然后这两个位置做差就可以得到x在这段区间中的出现次数了。\n\n# 代码\n\n## E. 希望\n\n~~~c++\n/*---------------------------------\n\n @Author:   Dicer\n @DateTime: 2019-06-16 11:54:32\n\n---------------------------------*/\n\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst double eps = 1e-8;\nconst int INF = 0x3f3f3f3f;\nconst int mod = 1e9+7;\nconst int MAXN = 2e5 + 7;\n\nstruct node{\n    int l, r;\n    int mid(){return (l+r)>>1;}\n    int val;\n}s[MAXN<<1];\nll a[MAXN], b[MAXN], dp[MAXN];\nvoid build(int l, int r, int x){\n    s[x].l = l; s[x].r = r; s[x].val = 500;\n    int mid = (l+r)>>1;\n    if(l == r)  return;\n    build(l, mid, x<<1);\n    build(mid+1, r, x<<1|1);\n}\ninline void upd(int l, int r, int x, int v){\n    // cout << l << ' ' << r << ' ' << s[x].l << ' ' << s[x].r << ' ' << v << endl;\n    if(s[x].l >= l && s[x].r <= r){\n        s[x].val = min(s[x].val, v);\n        return;\n    }\n    int mid = s[x].mid();\n    if(r > mid) upd(l, r, x<<1|1, v);\n    if(l <= mid) upd(l, r, x<<1, v);\n}\ninline void pushdown(int x){\n    if(s[x].l == s[x].r){\n        a[s[x].l] = s[x].val;\n        return;\n    }\n    s[x<<1].val = min(s[x<<1].val, s[x].val);\n    s[x<<1|1].val = min(s[x<<1|1].val, s[x].val);\n    pushdown(x<<1);\n    pushdown(x<<1|1);\n}\nint main(int argc, char const *argv[])\n{\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif\n    \n    int n, k, m;\n    cin >> n >> k >> m;\n    for(int i = 1; i <= n; ++i) cin >> b[i];\n    build(1, n, 1);\n    int l, r; ll c;\n    for(int i = 1; i <= m; ++i){\n        cin >> l >> r >> c;\n        upd(l, r, 1, c);\n    }\n    pushdown(1);\n    // for(int i = 1; i <= n; ++i) cout << a[i] << ' ';\n    // cout << endl;\n    //dp\n\tll sum = 0;\n    for(int i = 1; i <= n; ++i){\n    \tsum += b[i];\n    \tif(b[i] >= 0)\tcontinue;\n    \tfor(int j = k; j >= a[i]; --j){\n    \t\tdp[j] = max(dp[j], dp[j-a[i]] - b[i]);\n    \t}\n    }\n    cout << sum+dp[k] << endl;\n    return 0;\n}\n~~~\n\n## H.数据结构题\n\n~~~c++\n/*---------------------------------\n\n @Author:   Dicer\n @DateTime: 2019-06-16 01:55:25\n\n---------------------------------*/\n\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ninline ll qpow(ll a,ll b,ll mod){ll res=1;while(b){if(b&1)res = (res*a)%mod;a=(a*a)%mod;b>>=1;}return res;}\nconst double eps = 1e-8;\nconst int INF = 0x3f3f3f3f;\nconst int mod = 20180623;\nconst int MAXN = 2e5 + 7;\n\nint a[MAXN];\nvector<int> G[MAXN];\nint main(int argc, char const *argv[])\n{\n    #ifndef ONLINE_JUDGE\n        freopen(\"in.txt\", \"r\", stdin);\n        freopen(\"out.txt\", \"w\", stdout);\n    #endif\n    \n    int n, m;\n    cin >> n >> m;\n    for(int i = 1; i <= n; ++i){\n        cin >> a[i];\n        G[a[i]].push_back(i);\n    }\n    ll x, a, b, l1, l2, r1, r2;\n    for(int i = 1; i <= m; ++i){\n        cin >> l1 >> r1 >> l2 >> r2 >> x;\n        if(l1 > r1) swap(l1, r1);\n        if(l2 > r2) swap(l2, r2);\n        a = upper_bound(G[x].begin(), G[x].end(), r1) - lower_bound(G[x].begin(), G[x].end(), l1);\n        b = upper_bound(G[x].begin(), G[x].end(), r2) - lower_bound(G[x].begin(), G[x].end(), l2);\n        cout << a << endl;\n        cout << b << endl;\n        cout << (a%mod)*(b%mod)%mod << endl;\n    }\n    return 0;\n}\n~~~\n\n","slug":"niukexiaobai15","published":1,"updated":"2021-03-28T08:46:54.777Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hycd001l69kj9pq55rd1","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/917#question\">牛客小白赛15</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><h2 id=\"E-希望\"><a href=\"#E-希望\" class=\"headerlink\" title=\"E. 希望\"></a>E. 希望</h2><p><em>希望是什么，希望是我们这个时代最珍贵的东西。</em></p>\n<p>直接用一颗线段树维护区间最小值就可以了。</p>\n<p>然后在做一个背包。</p>\n<h2 id=\"H-数据结构题\"><a href=\"#H-数据结构题\" class=\"headerlink\" title=\"H.数据结构题\"></a>H.数据结构题</h2><p>一个很神奇的思路。</p>\n<p>我们将每一个出现x的位置，放进G[x]中，然后查找第一个比r大的位置，和第一个大于定于l的位置，然后这两个位置做差就可以得到x在这段区间中的出现次数了。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"E-希望-1\"><a href=\"#E-希望-1\" class=\"headerlink\" title=\"E. 希望\"></a>E. 希望</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*---------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> @Author:   Dicer</span></span><br><span class=\"line\"><span class=\"comment\"> @DateTime: 2019-06-16 11:54:32</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">---------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mid</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> (l+r)&gt;&gt;<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">&#125;s[MAXN&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\">ll a[MAXN], b[MAXN], dp[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    s[x].l = l; s[x].r = r; s[x].val = <span class=\"number\">500</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l, mid, x&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(mid+<span class=\"number\">1</span>, r, x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; l &lt;&lt; &#x27; &#x27; &lt;&lt; r &lt;&lt; &#x27; &#x27; &lt;&lt; s[x].l &lt;&lt; &#x27; &#x27; &lt;&lt; s[x].r &lt;&lt; &#x27; &#x27; &lt;&lt; v &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[x].l &gt;= l &amp;&amp; s[x].r &lt;= r)&#123;</span><br><span class=\"line\">        s[x].val = <span class=\"built_in\">min</span>(s[x].val, v);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = s[x].<span class=\"built_in\">mid</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &gt; mid) <span class=\"built_in\">upd</span>(l, r, x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>, v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= mid) <span class=\"built_in\">upd</span>(l, r, x&lt;&lt;<span class=\"number\">1</span>, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[x].l == s[x].r)&#123;</span><br><span class=\"line\">        a[s[x].l] = s[x].val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s[x&lt;&lt;<span class=\"number\">1</span>].val = <span class=\"built_in\">min</span>(s[x&lt;&lt;<span class=\"number\">1</span>].val, s[x].val);</span><br><span class=\"line\">    s[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = <span class=\"built_in\">min</span>(s[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val, s[x].val);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, k, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) cin &gt;&gt; b[i];</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r; ll c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)&#123;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(l, r, <span class=\"number\">1</span>, c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// for(int i = 1; i &lt;= n; ++i) cout &lt;&lt; a[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">//dp</span></span><br><span class=\"line\">\tll sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">    \tsum += b[i];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(b[i] &gt;= <span class=\"number\">0</span>)\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = k; j &gt;= a[i]; --j)&#123;</span><br><span class=\"line\">    \t\tdp[j] = <span class=\"built_in\">max</span>(dp[j], dp[j-a[i]] - b[i]);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; sum+dp[k] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"H-数据结构题-1\"><a href=\"#H-数据结构题-1\" class=\"headerlink\" title=\"H.数据结构题\"></a>H.数据结构题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*---------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> @Author:   Dicer</span></span><br><span class=\"line\"><span class=\"comment\"> @DateTime: 2019-06-16 01:55:25</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">---------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">20180623</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[MAXN];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        G[a[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll x, a, b, l1, l2, r1, r2;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)&#123;</span><br><span class=\"line\">        cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2 &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1 &gt; r1) <span class=\"built_in\">swap</span>(l1, r1);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l2 &gt; r2) <span class=\"built_in\">swap</span>(l2, r2);</span><br><span class=\"line\">        a = <span class=\"built_in\">upper_bound</span>(G[x].<span class=\"built_in\">begin</span>(), G[x].<span class=\"built_in\">end</span>(), r1) - <span class=\"built_in\">lower_bound</span>(G[x].<span class=\"built_in\">begin</span>(), G[x].<span class=\"built_in\">end</span>(), l1);</span><br><span class=\"line\">        b = <span class=\"built_in\">upper_bound</span>(G[x].<span class=\"built_in\">begin</span>(), G[x].<span class=\"built_in\">end</span>(), r2) - <span class=\"built_in\">lower_bound</span>(G[x].<span class=\"built_in\">begin</span>(), G[x].<span class=\"built_in\">end</span>(), l2);</span><br><span class=\"line\">        cout &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; (a%mod)*(b%mod)%mod &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://ac.nowcoder.com/acm/contest/917#question\">牛客小白赛15</a></p>","more":"<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><h2 id=\"E-希望\"><a href=\"#E-希望\" class=\"headerlink\" title=\"E. 希望\"></a>E. 希望</h2><p><em>希望是什么，希望是我们这个时代最珍贵的东西。</em></p>\n<p>直接用一颗线段树维护区间最小值就可以了。</p>\n<p>然后在做一个背包。</p>\n<h2 id=\"H-数据结构题\"><a href=\"#H-数据结构题\" class=\"headerlink\" title=\"H.数据结构题\"></a>H.数据结构题</h2><p>一个很神奇的思路。</p>\n<p>我们将每一个出现x的位置，放进G[x]中，然后查找第一个比r大的位置，和第一个大于定于l的位置，然后这两个位置做差就可以得到x在这段区间中的出现次数了。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><h2 id=\"E-希望-1\"><a href=\"#E-希望-1\" class=\"headerlink\" title=\"E. 希望\"></a>E. 希望</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*---------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> @Author:   Dicer</span></span><br><span class=\"line\"><span class=\"comment\"> @DateTime: 2019-06-16 11:54:32</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">---------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mid</span><span class=\"params\">()</span></span>&#123;<span class=\"keyword\">return</span> (l+r)&gt;&gt;<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">&#125;s[MAXN&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\">ll a[MAXN], b[MAXN], dp[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    s[x].l = l; s[x].r = r; s[x].val = <span class=\"number\">500</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = (l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r)  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(l, mid, x&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(mid+<span class=\"number\">1</span>, r, x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; l &lt;&lt; &#x27; &#x27; &lt;&lt; r &lt;&lt; &#x27; &#x27; &lt;&lt; s[x].l &lt;&lt; &#x27; &#x27; &lt;&lt; s[x].r &lt;&lt; &#x27; &#x27; &lt;&lt; v &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[x].l &gt;= l &amp;&amp; s[x].r &lt;= r)&#123;</span><br><span class=\"line\">        s[x].val = <span class=\"built_in\">min</span>(s[x].val, v);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = s[x].<span class=\"built_in\">mid</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &gt; mid) <span class=\"built_in\">upd</span>(l, r, x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>, v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l &lt;= mid) <span class=\"built_in\">upd</span>(l, r, x&lt;&lt;<span class=\"number\">1</span>, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(s[x].l == s[x].r)&#123;</span><br><span class=\"line\">        a[s[x].l] = s[x].val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s[x&lt;&lt;<span class=\"number\">1</span>].val = <span class=\"built_in\">min</span>(s[x&lt;&lt;<span class=\"number\">1</span>].val, s[x].val);</span><br><span class=\"line\">    s[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val = <span class=\"built_in\">min</span>(s[x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].val, s[x].val);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x&lt;&lt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(x&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, k, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) cin &gt;&gt; b[i];</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, n, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l, r; ll c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)&#123;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class=\"line\">        <span class=\"built_in\">upd</span>(l, r, <span class=\"number\">1</span>, c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">pushdown</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// for(int i = 1; i &lt;= n; ++i) cout &lt;&lt; a[i] &lt;&lt; &#x27; &#x27;;</span></span><br><span class=\"line\">    <span class=\"comment\">// cout &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"comment\">//dp</span></span><br><span class=\"line\">\tll sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">    \tsum += b[i];</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(b[i] &gt;= <span class=\"number\">0</span>)\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = k; j &gt;= a[i]; --j)&#123;</span><br><span class=\"line\">    \t\tdp[j] = <span class=\"built_in\">max</span>(dp[j], dp[j-a[i]] - b[i]);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; sum+dp[k] &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"H-数据结构题-1\"><a href=\"#H-数据结构题-1\" class=\"headerlink\" title=\"H.数据结构题\"></a>H.数据结构题</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*---------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\"> @Author:   Dicer</span></span><br><span class=\"line\"><span class=\"comment\"> @DateTime: 2019-06-16 01:55:25</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">---------------------------------*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; pii;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll mod)</span></span>&#123;ll res=<span class=\"number\">1</span>;<span class=\"keyword\">while</span>(b)&#123;<span class=\"keyword\">if</span>(b&amp;<span class=\"number\">1</span>)res = (res*a)%mod;a=(a*a)%mod;b&gt;&gt;=<span class=\"number\">1</span>;&#125;<span class=\"keyword\">return</span> res;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps = <span class=\"number\">1e-8</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">20180623</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[MAXN];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;in.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;out.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        G[a[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll x, a, b, l1, l2, r1, r2;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)&#123;</span><br><span class=\"line\">        cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2 &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1 &gt; r1) <span class=\"built_in\">swap</span>(l1, r1);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l2 &gt; r2) <span class=\"built_in\">swap</span>(l2, r2);</span><br><span class=\"line\">        a = <span class=\"built_in\">upper_bound</span>(G[x].<span class=\"built_in\">begin</span>(), G[x].<span class=\"built_in\">end</span>(), r1) - <span class=\"built_in\">lower_bound</span>(G[x].<span class=\"built_in\">begin</span>(), G[x].<span class=\"built_in\">end</span>(), l1);</span><br><span class=\"line\">        b = <span class=\"built_in\">upper_bound</span>(G[x].<span class=\"built_in\">begin</span>(), G[x].<span class=\"built_in\">end</span>(), r2) - <span class=\"built_in\">lower_bound</span>(G[x].<span class=\"built_in\">begin</span>(), G[x].<span class=\"built_in\">end</span>(), l2);</span><br><span class=\"line\">        cout &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; (a%mod)*(b%mod)%mod &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"洛谷P1879 & P2051","thumbnail":"/gallery/thumbnails/hei2.JPG","date":"2019-09-18T13:56:23.000Z","_content":"\n# 题目\n\n[中国象棋](https://www.luogu.org/problem/P2051)\n\n[玉米田Corn Fields](https://www.luogu.org/problem/P1879)\n\n两道DP。\n\n<!--more-->\n\n## 中国象棋\n\n以为是状压DP，但是不知道怎么做。\n\n换了另一种做法。\n\n显然，每列不可能有两个以上的炮，设 $f[i][j][k]$ 表示第 $i$ 行有 $j$ 列有一个炮车，有 $k$ 列有两个炮车。那么一个炮车也没有个列数就是 $m-j-k$。\n\n定义完状态，再来想怎么转移。考虑从 $i-1$ 行向 $i$ 行转移。第 $i$ 行最多只能有两个炮车分情况讨论：\n\n1. 不放炮车，$f[i][j][k] = f[i-1][j][k]$\n2. 放一个炮车，放在没有跑车的列或者有一个炮车列：$f[i][j+1][k] = f[j-1][j][k] * (m-j-k), f[i][j][k+1] = f[i-1][j][k]*j$\n3. 放两个炮车的情况，讨论一下就好了，看代码吧。\n\n~~~cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int MOD = 9999973;\nconst int MAXN = 2e5 + 7;\n\n//第i行有j个单跑k个双炮\nll f[105][105][105];\nll C[105][105];\n\nvoid init(){\n    C[0][0] = 1;\n    rep(i, 1, 100){\n        rep(j, 0, i){\n            C[i][j] = C[i-1][j] + C[i-1][j-1];\n        }\n    }\n}\nint main(int argc, char const *argv[])\n{\n    init();\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    f[0][0][0] = 1;\n    rep(i, 1, n){\n        rep(j, 0, m){\n            rep(k, 0, m){\n                if(j + k > m) continue;\n                //不选\n                f[i][j][k] += f[i-1][j][k];\n                f[i][j][k] %= MOD;\n                \n                //选一个 选在空列\n                f[i][j+1][k] += f[i-1][j][k] * (m - j - k);\n                f[i][j+1][k] %= MOD;\n                // 选一个 选在单炮列\n                f[i][j-1][k+1] += f[i-1][j][k] * j;\n                f[i][j-1][k+1] %= MOD;\n                \n                // 选两个 都选在空列\n                f[i][j+2][k] += f[i-1][j][k] * C[m - j - k][2];\n                f[i][j+2][k] %= MOD;\n                // 选两个 都选在单炮列\n                f[i][j-2][k+2] += f[i-1][j][k] * C[j][2];\n                f[i][j-2][k+2] %= MOD;\n                // 选两个 一个在空列一个在单炮列\n                f[i][j][k+1] += f[i-1][j][k] * (m - j - k) * j;\n                f[i][j][k+1] %= MOD;\n            }\n        }\n    }\n    ll ans = 0;\n    rep(i, 0, m) rep(j, 0, m) {\n        ans += f[n][i][j];\n        ans %= MOD;\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n~~~\n\n\n\n## 玉米田\n\n状压DP，先保存每一行的状态，在求出有效的状态。\n\n枚举有效的状态，判断是否和土地状况冲突，不冲突再枚举上一行的状态，如果和当前行不冲突，那么就是有效的转移。\n\n~~~cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int MOD = 1e9;\nconst int MAXN = 2e5 + 7;\n\nll f[15][5005];\nbool g[5005];\nint mp[15][15];\nint field[15];\nint main(int argc, char const *argv[])\n{\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    rep(i, 1, n){\n        rep(j, 1, m){\n            scanf(\"%d\", &mp[i][j]);\n            field[i] <<= 1;\n            field[i] |= mp[i][j];\n        }\n    }\n    //求出可行状态集\n    vector<int> sta;\n    rep(i, 0, (1<<m)-1) if(!((i & i>>1)||(i & i<<1)))   sta.push_back(i);\n    \n    f[0][0] = 1;\n    rep(i, 1, n) {\n        //枚举当前行的状态\n        for(int j: sta) {\n            //如果和土地状况不冲突\n            if((j & field[i]) == j) {\n                //枚举上一行的状态\n                for(int k: sta) {\n                    //如果也不冲突\n                    if((j & k) == 0) {\n                        //可行的转移\n                        f[i][j] += f[i-1][k], f[i][j] %= MOD;\n                    }\n                }\n            }\n        }\n    }\n    ll ans = 0;\n    rep(i, 0, (1<<m)-1) {\n        ans += f[n][i];\n        ans %= MOD;\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n~~~\n\n\n\n","source":"_posts/luogu-P1879-P2051.md","raw":"---\ntitle: 洛谷P1879 & P2051\nthumbnail: /gallery/thumbnails/hei2.JPG\ndate: 2019-09-18 21:56:23\ntags: \n    - 动态规划\ncategories: \n---\n\n# 题目\n\n[中国象棋](https://www.luogu.org/problem/P2051)\n\n[玉米田Corn Fields](https://www.luogu.org/problem/P1879)\n\n两道DP。\n\n<!--more-->\n\n## 中国象棋\n\n以为是状压DP，但是不知道怎么做。\n\n换了另一种做法。\n\n显然，每列不可能有两个以上的炮，设 $f[i][j][k]$ 表示第 $i$ 行有 $j$ 列有一个炮车，有 $k$ 列有两个炮车。那么一个炮车也没有个列数就是 $m-j-k$。\n\n定义完状态，再来想怎么转移。考虑从 $i-1$ 行向 $i$ 行转移。第 $i$ 行最多只能有两个炮车分情况讨论：\n\n1. 不放炮车，$f[i][j][k] = f[i-1][j][k]$\n2. 放一个炮车，放在没有跑车的列或者有一个炮车列：$f[i][j+1][k] = f[j-1][j][k] * (m-j-k), f[i][j][k+1] = f[i-1][j][k]*j$\n3. 放两个炮车的情况，讨论一下就好了，看代码吧。\n\n~~~cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int MOD = 9999973;\nconst int MAXN = 2e5 + 7;\n\n//第i行有j个单跑k个双炮\nll f[105][105][105];\nll C[105][105];\n\nvoid init(){\n    C[0][0] = 1;\n    rep(i, 1, 100){\n        rep(j, 0, i){\n            C[i][j] = C[i-1][j] + C[i-1][j-1];\n        }\n    }\n}\nint main(int argc, char const *argv[])\n{\n    init();\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    f[0][0][0] = 1;\n    rep(i, 1, n){\n        rep(j, 0, m){\n            rep(k, 0, m){\n                if(j + k > m) continue;\n                //不选\n                f[i][j][k] += f[i-1][j][k];\n                f[i][j][k] %= MOD;\n                \n                //选一个 选在空列\n                f[i][j+1][k] += f[i-1][j][k] * (m - j - k);\n                f[i][j+1][k] %= MOD;\n                // 选一个 选在单炮列\n                f[i][j-1][k+1] += f[i-1][j][k] * j;\n                f[i][j-1][k+1] %= MOD;\n                \n                // 选两个 都选在空列\n                f[i][j+2][k] += f[i-1][j][k] * C[m - j - k][2];\n                f[i][j+2][k] %= MOD;\n                // 选两个 都选在单炮列\n                f[i][j-2][k+2] += f[i-1][j][k] * C[j][2];\n                f[i][j-2][k+2] %= MOD;\n                // 选两个 一个在空列一个在单炮列\n                f[i][j][k+1] += f[i-1][j][k] * (m - j - k) * j;\n                f[i][j][k+1] %= MOD;\n            }\n        }\n    }\n    ll ans = 0;\n    rep(i, 0, m) rep(j, 0, m) {\n        ans += f[n][i][j];\n        ans %= MOD;\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n~~~\n\n\n\n## 玉米田\n\n状压DP，先保存每一行的状态，在求出有效的状态。\n\n枚举有效的状态，判断是否和土地状况冲突，不冲突再枚举上一行的状态，如果和当前行不冲突，那么就是有效的转移。\n\n~~~cpp\n#include <bits/stdc++.h>\n#define rep(i, a, b) for(int i = (a); i <= (b); ++i)\n#define per(i, a, b) for(int i = (a); i >= (b); --i)\n#define debug(x) cerr << #x << ' ' << x << endl;\nusing namespace std;\n\ntypedef long long ll;\nconst int MOD = 1e9;\nconst int MAXN = 2e5 + 7;\n\nll f[15][5005];\nbool g[5005];\nint mp[15][15];\nint field[15];\nint main(int argc, char const *argv[])\n{\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    rep(i, 1, n){\n        rep(j, 1, m){\n            scanf(\"%d\", &mp[i][j]);\n            field[i] <<= 1;\n            field[i] |= mp[i][j];\n        }\n    }\n    //求出可行状态集\n    vector<int> sta;\n    rep(i, 0, (1<<m)-1) if(!((i & i>>1)||(i & i<<1)))   sta.push_back(i);\n    \n    f[0][0] = 1;\n    rep(i, 1, n) {\n        //枚举当前行的状态\n        for(int j: sta) {\n            //如果和土地状况不冲突\n            if((j & field[i]) == j) {\n                //枚举上一行的状态\n                for(int k: sta) {\n                    //如果也不冲突\n                    if((j & k) == 0) {\n                        //可行的转移\n                        f[i][j] += f[i-1][k], f[i][j] %= MOD;\n                    }\n                }\n            }\n        }\n    }\n    ll ans = 0;\n    rep(i, 0, (1<<m)-1) {\n        ans += f[n][i];\n        ans %= MOD;\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n~~~\n\n\n\n","slug":"luogu-P1879-P2051","published":1,"updated":"2021-03-28T08:45:21.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hycd001o69kj0cqnap60","content":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problem/P2051\">中国象棋</a></p>\n<p><a href=\"https://www.luogu.org/problem/P1879\">玉米田Corn Fields</a></p>\n<p>两道DP。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"中国象棋\"><a href=\"#中国象棋\" class=\"headerlink\" title=\"中国象棋\"></a>中国象棋</h2><p>以为是状压DP，但是不知道怎么做。</p>\n<p>换了另一种做法。</p>\n<p>显然，每列不可能有两个以上的炮，设 $f[i][j][k]$ 表示第 $i$ 行有 $j$ 列有一个炮车，有 $k$ 列有两个炮车。那么一个炮车也没有个列数就是 $m-j-k$。</p>\n<p>定义完状态，再来想怎么转移。考虑从 $i-1$ 行向 $i$ 行转移。第 $i$ 行最多只能有两个炮车分情况讨论：</p>\n<ol>\n<li>不放炮车，$f[i][j][k] = f[i-1][j][k]$</li>\n<li>放一个炮车，放在没有跑车的列或者有一个炮车列：$f[i][j+1][k] = f[j-1][j][k] * (m-j-k), f[i][j][k+1] = f[i-1][j][k]*j$</li>\n<li>放两个炮车的情况，讨论一下就好了，看代码吧。</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">9999973</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第i行有j个单跑k个双炮</span></span><br><span class=\"line\">ll f[<span class=\"number\">105</span>][<span class=\"number\">105</span>][<span class=\"number\">105</span>];</span><br><span class=\"line\">ll C[<span class=\"number\">105</span>][<span class=\"number\">105</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    C[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, i)&#123;</span><br><span class=\"line\">            C[i][j] = C[i<span class=\"number\">-1</span>][j] + C[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    f[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, m)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(k, <span class=\"number\">0</span>, m)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j + k &gt; m) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"comment\">//不选</span></span><br><span class=\"line\">                f[i][j][k] += f[i<span class=\"number\">-1</span>][j][k];</span><br><span class=\"line\">                f[i][j][k] %= MOD;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//选一个 选在空列</span></span><br><span class=\"line\">                f[i][j+<span class=\"number\">1</span>][k] += f[i<span class=\"number\">-1</span>][j][k] * (m - j - k);</span><br><span class=\"line\">                f[i][j+<span class=\"number\">1</span>][k] %= MOD;</span><br><span class=\"line\">                <span class=\"comment\">// 选一个 选在单炮列</span></span><br><span class=\"line\">                f[i][j<span class=\"number\">-1</span>][k+<span class=\"number\">1</span>] += f[i<span class=\"number\">-1</span>][j][k] * j;</span><br><span class=\"line\">                f[i][j<span class=\"number\">-1</span>][k+<span class=\"number\">1</span>] %= MOD;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 选两个 都选在空列</span></span><br><span class=\"line\">                f[i][j+<span class=\"number\">2</span>][k] += f[i<span class=\"number\">-1</span>][j][k] * C[m - j - k][<span class=\"number\">2</span>];</span><br><span class=\"line\">                f[i][j+<span class=\"number\">2</span>][k] %= MOD;</span><br><span class=\"line\">                <span class=\"comment\">// 选两个 都选在单炮列</span></span><br><span class=\"line\">                f[i][j<span class=\"number\">-2</span>][k+<span class=\"number\">2</span>] += f[i<span class=\"number\">-1</span>][j][k] * C[j][<span class=\"number\">2</span>];</span><br><span class=\"line\">                f[i][j<span class=\"number\">-2</span>][k+<span class=\"number\">2</span>] %= MOD;</span><br><span class=\"line\">                <span class=\"comment\">// 选两个 一个在空列一个在单炮列</span></span><br><span class=\"line\">                f[i][j][k+<span class=\"number\">1</span>] += f[i<span class=\"number\">-1</span>][j][k] * (m - j - k) * j;</span><br><span class=\"line\">                f[i][j][k+<span class=\"number\">1</span>] %= MOD;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, m) &#123;</span><br><span class=\"line\">        ans += f[n][i][j];</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"玉米田\"><a href=\"#玉米田\" class=\"headerlink\" title=\"玉米田\"></a>玉米田</h2><p>状压DP，先保存每一行的状态，在求出有效的状态。</p>\n<p>枚举有效的状态，判断是否和土地状况冲突，不冲突再枚举上一行的状态，如果和当前行不冲突，那么就是有效的转移。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll f[<span class=\"number\">15</span>][<span class=\"number\">5005</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> g[<span class=\"number\">5005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp[<span class=\"number\">15</span>][<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> field[<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;mp[i][j]);</span><br><span class=\"line\">            field[i] &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            field[i] |= mp[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//求出可行状态集</span></span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; sta;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, (<span class=\"number\">1</span>&lt;&lt;m)<span class=\"number\">-1</span>) <span class=\"keyword\">if</span>(!((i &amp; i&gt;&gt;<span class=\"number\">1</span>)||(i &amp; i&lt;&lt;<span class=\"number\">1</span>)))   sta.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    </span><br><span class=\"line\">    f[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//枚举当前行的状态</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j: sta) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果和土地状况不冲突</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>((j &amp; field[i]) == j) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//枚举上一行的状态</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k: sta) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果也不冲突</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((j &amp; k) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//可行的转移</span></span><br><span class=\"line\">                        f[i][j] += f[i<span class=\"number\">-1</span>][k], f[i][j] %= MOD;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, (<span class=\"number\">1</span>&lt;&lt;m)<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        ans += f[n][i];</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h1 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h1><p><a href=\"https://www.luogu.org/problem/P2051\">中国象棋</a></p>\n<p><a href=\"https://www.luogu.org/problem/P1879\">玉米田Corn Fields</a></p>\n<p>两道DP。</p>","more":"<h2 id=\"中国象棋\"><a href=\"#中国象棋\" class=\"headerlink\" title=\"中国象棋\"></a>中国象棋</h2><p>以为是状压DP，但是不知道怎么做。</p>\n<p>换了另一种做法。</p>\n<p>显然，每列不可能有两个以上的炮，设 $f[i][j][k]$ 表示第 $i$ 行有 $j$ 列有一个炮车，有 $k$ 列有两个炮车。那么一个炮车也没有个列数就是 $m-j-k$。</p>\n<p>定义完状态，再来想怎么转移。考虑从 $i-1$ 行向 $i$ 行转移。第 $i$ 行最多只能有两个炮车分情况讨论：</p>\n<ol>\n<li>不放炮车，$f[i][j][k] = f[i-1][j][k]$</li>\n<li>放一个炮车，放在没有跑车的列或者有一个炮车列：$f[i][j+1][k] = f[j-1][j][k] * (m-j-k), f[i][j][k+1] = f[i-1][j][k]*j$</li>\n<li>放两个炮车的情况，讨论一下就好了，看代码吧。</li>\n</ol>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">9999973</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//第i行有j个单跑k个双炮</span></span><br><span class=\"line\">ll f[<span class=\"number\">105</span>][<span class=\"number\">105</span>][<span class=\"number\">105</span>];</span><br><span class=\"line\">ll C[<span class=\"number\">105</span>][<span class=\"number\">105</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    C[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, <span class=\"number\">100</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, i)&#123;</span><br><span class=\"line\">            C[i][j] = C[i<span class=\"number\">-1</span>][j] + C[i<span class=\"number\">-1</span>][j<span class=\"number\">-1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    f[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, m)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">rep</span>(k, <span class=\"number\">0</span>, m)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j + k &gt; m) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"comment\">//不选</span></span><br><span class=\"line\">                f[i][j][k] += f[i<span class=\"number\">-1</span>][j][k];</span><br><span class=\"line\">                f[i][j][k] %= MOD;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">//选一个 选在空列</span></span><br><span class=\"line\">                f[i][j+<span class=\"number\">1</span>][k] += f[i<span class=\"number\">-1</span>][j][k] * (m - j - k);</span><br><span class=\"line\">                f[i][j+<span class=\"number\">1</span>][k] %= MOD;</span><br><span class=\"line\">                <span class=\"comment\">// 选一个 选在单炮列</span></span><br><span class=\"line\">                f[i][j<span class=\"number\">-1</span>][k+<span class=\"number\">1</span>] += f[i<span class=\"number\">-1</span>][j][k] * j;</span><br><span class=\"line\">                f[i][j<span class=\"number\">-1</span>][k+<span class=\"number\">1</span>] %= MOD;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 选两个 都选在空列</span></span><br><span class=\"line\">                f[i][j+<span class=\"number\">2</span>][k] += f[i<span class=\"number\">-1</span>][j][k] * C[m - j - k][<span class=\"number\">2</span>];</span><br><span class=\"line\">                f[i][j+<span class=\"number\">2</span>][k] %= MOD;</span><br><span class=\"line\">                <span class=\"comment\">// 选两个 都选在单炮列</span></span><br><span class=\"line\">                f[i][j<span class=\"number\">-2</span>][k+<span class=\"number\">2</span>] += f[i<span class=\"number\">-1</span>][j][k] * C[j][<span class=\"number\">2</span>];</span><br><span class=\"line\">                f[i][j<span class=\"number\">-2</span>][k+<span class=\"number\">2</span>] %= MOD;</span><br><span class=\"line\">                <span class=\"comment\">// 选两个 一个在空列一个在单炮列</span></span><br><span class=\"line\">                f[i][j][k+<span class=\"number\">1</span>] += f[i<span class=\"number\">-1</span>][j][k] * (m - j - k) * j;</span><br><span class=\"line\">                f[i][j][k+<span class=\"number\">1</span>] %= MOD;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, m) <span class=\"built_in\">rep</span>(j, <span class=\"number\">0</span>, m) &#123;</span><br><span class=\"line\">        ans += f[n][i][j];</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"玉米田\"><a href=\"#玉米田\" class=\"headerlink\" title=\"玉米田\"></a>玉米田</h2><p>状压DP，先保存每一行的状态，在求出有效的状态。</p>\n<p>枚举有效的状态，判断是否和土地状况冲突，不冲突再枚举上一行的状态，如果和当前行不冲突，那么就是有效的转移。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rep(i, a, b) for(int i = (a); i &lt;= (b); ++i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> per(i, a, b) for(int i = (a); i &gt;= (b); --i)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> debug(x) cerr &lt;&lt; #x &lt;&lt; <span class=\"meta-string\">&#x27; &#x27;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">ll f[<span class=\"number\">15</span>][<span class=\"number\">5005</span>];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> g[<span class=\"number\">5005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp[<span class=\"number\">15</span>][<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> field[<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> <span class=\"keyword\">const</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">rep</span>(j, <span class=\"number\">1</span>, m)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;mp[i][j]);</span><br><span class=\"line\">            field[i] &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">            field[i] |= mp[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//求出可行状态集</span></span><br><span class=\"line\">    vector&lt;<span class=\"keyword\">int</span>&gt; sta;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, (<span class=\"number\">1</span>&lt;&lt;m)<span class=\"number\">-1</span>) <span class=\"keyword\">if</span>(!((i &amp; i&gt;&gt;<span class=\"number\">1</span>)||(i &amp; i&lt;&lt;<span class=\"number\">1</span>)))   sta.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    </span><br><span class=\"line\">    f[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">1</span>, n) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//枚举当前行的状态</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j: sta) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果和土地状况不冲突</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>((j &amp; field[i]) == j) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//枚举上一行的状态</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k: sta) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果也不冲突</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>((j &amp; k) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//可行的转移</span></span><br><span class=\"line\">                        f[i][j] += f[i<span class=\"number\">-1</span>][k], f[i][j] %= MOD;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">rep</span>(i, <span class=\"number\">0</span>, (<span class=\"number\">1</span>&lt;&lt;m)<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        ans += f[n][i];</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"sklearn踩坑","cover":"/gallery/cover/sklearn.png","thumbnail":"/gallery/cover/sklearn.png","date":"2021-05-05T07:37:56.000Z","_content":"\n这几天在做毕业设计，想做一个微博的情感分析，想着实现两种方式，一是朴素贝叶斯，二是用LSTM。\n\n在做朴素贝叶斯的时候，据网上看到的一些文章说，训练的速度应该是很快的。但是我的训练速度却很慢，分析了一下发现是文本分词、清洗占去了大量的时间。我的语料大概12w行，20MB左右。文本处理需要一分多钟，而朴素贝叶斯的训练时间只需要一秒钟左右。\n\n于是想把文本处理的结果，保存起来，下次直接使用，就不需要每次都多等一分钟了。\n\n<!--more-->\n\n# 持久化\n\n原始文本的格式（csv格式）：\n\n~~~\nlabel,review\n1,更博了，爆照了，帅的呀，就是越来越爱你！生快傻缺[爱你][爱你][爱你]\n1,@张晓鹏jonathan 土耳其的事要认真对待[哈哈]，否则直接开除。@丁丁看世界 很是细心，酒店都全部OK啦。\n1,姑娘都羡慕你呢…还有招财猫高兴……//@爱在蔓延-JC:[哈哈]小学徒一枚，等着明天见您呢//@李欣芸SharonLee:大佬范儿[书呆子]\n1,美~~~~~[爱你]\n~~~\n\n处理后的文件（csv格式）：\n\n~~~\nlabel,review\n1,更博 爆照 帅 的 呀 越来越 爱 生快 傻 缺 [爱你] [爱你] [爱你]\n1,土耳其 的 事要 认真对待 [哈哈] 直接 开除 是 细心 酒店 都 全部\n1,姑娘 都 羡慕 呢 招财猫 高兴 [哈哈] 小 学徒 一枚 等 着 明天 见 呢 大佬 范儿 [书呆子]\n1,美 [爱你]\n~~~\n\n处理文件的脚本：\n\n~~~python\nimport random\nimport re\n\nimport jieba\nimport pandas as pd\n\n\ndef trim(text):\n    \"\"\"\n    带有语料清洗功能的分词函数, 包含数据预处理, 可以根据自己的需求重载\n    使用re保证了一些本来可能会分开的表情图标不分开\n    return: [str]\n    \"\"\"\n    text = re.sub(\"\\{%.+?%\\}\", \" \", text)           # 去除 {%xxx%} (地理定位, 微博话题等)\n    # text = re.sub(\"@.+?( |$)\", \" \", text)           # 去除 @xxx (用户名)\n    text = re.sub(\"@.+?( |:)\", \" \", text)           # 去除 @xxx (用户名)\n    text = re.sub(\"【.+?】\", \" \", text)              # 去除 【xx】 (里面的内容通常都不是用户自己写的)\n    text = re.sub(\"[a-zA-Z0-9]\", \" \", text)         # 去除字母和数字\n    icons = re.findall(\"\\[.+?\\]\", text)             # 提取出所有表情图标\n    text = re.sub(\"\\[.+?\\]\", \"IconMark\", text)      # 将文本中的图标替换为`IconMark`\n\n    tokens = []\n    # for k, w in enumerate(jieba.lcut(text)):\n    jieba.load_userdict('./data/user_dict.txt')\n    for w in jieba.cut(text):\n        w = w.strip()\n        if \"IconMark\" in w:                         # 将IconMark替换为原图标\n            for i in range(w.count(\"IconMark\")):\n                tokens.append(icons.pop(0))\n        elif w and w != '\\u200b' and w.isalpha():   # 只保留有效文本\n            tokens.append(w)\n    return tokens\n\n\ndef load_corpus(csvFilePath, stopwordPath):\n    \"\"\"\n    加载语料库，并进行分词，数据清洗，去除停用词\n    \"\"\"\n    # 数据读取\n    df = pd.read_csv(csvFilePath)\n    stopword = load_stopword(stopwordPath)\n    labels, reviews = df['label'].to_list(), df['review'].to_list()\n    trimedReviews = []\n    for review in reviews:\n        # 数据清洗\n        trimedReview = trim(review)\n        # 去除停用词\n        finalReview = []\n        for word in trimedReview:\n            if word not in stopword:\n                finalReview.append(word)\n        trimedReviews.append(finalReview)\n    return labels, trimedReviews\n\ndef load_reviews(csvFilePath):\n    df = pd.read_csv(csvFilePath)\n    return df['label'], df['review']\n\ndef load_stopword(filePath):\n    \"\"\"\n    加载停用词\n    \"\"\"\n    with open(filePath, encoding='UTF-8') as words:\n        stopword = [word.strip() for word in words]\n    return stopword\n\n\ndef data_suffle(labels, reviews):\n    \"\"\"\n    打乱数据\n    \"\"\"\n    join = list(zip(labels, reviews))\n    random.shuffle(join)\n    labels, reviews = zip(*join)\n    return list(labels), list(reviews)\n\ndef pre_trim(csvFilePath, stopwordPath):\n    \"\"\"\n    预处理csv文本，并持久化\n    \"\"\"\n    df = pd.read_csv(csvFilePath)\n    _, reviews = load_corpus(csvFilePath, stopwordPath)\n    for index in range(len(reviews)):\n        reviews[index] = ' '.join(reviews[index])\n    df['review'] = reviews\n    df.to_csv(csvFilePath[:-4] + 'Trimed.csv', index=False)\n\nif __name__ == '__main__':\n    csvFilePath = '../../corpus/100k/all.csv'\n    stopwordPath = './data/stopword.txt'\n    pre_trim(csvFilePath, stopwordPath)\n~~~\n\n# 读取文件\n\n## 读取文件并分割数据集\n\n~~~python\nimport time\nimport pickle\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\nfrom utils import load_reviews, data_suffle\n\n# stopwordPath = './data/stopword.txt'\n# userDictPath = './data/user_dict.txt'\ncsvFilePath = '../../corpus/100k/allTrimed.csv'\nmodelPath = './data/bayes.model'\n\n# 载入自定义字典\n# jieba.load_userdict(userDictPath)\n\ntime_start = time.time()\n\nlabels, reviews = load_reviews(csvFilePath)\nlabels, reviews = data_suffle(labels, reviews)\n\n# 1/4 分割数据集\nn = len(labels) // 5\nlabels_train, reviews_train = labels[n:], reviews[n:]\nlabels_test, reviews_test = labels[:n], reviews[:n]\n\nprint(f'Load Corpus Cost {time.time() - time_start:.4f} Sec')\n~~~\n\n## 训练模型\n\n~~~python\ntime_start = time.time()\n\nvectorizer = CountVectorizer(max_df=0.8, min_df=5)\n# ⚠️坑点\nvec_train = vectorizer.fit_transform([np.str_(review) for review in reviews_train])\nclf = MultinomialNB().fit(vec_train, labels_train)\n\nprint(f'Train Model Cost {time.time() - time_start:.4f} Sec')\n~~~\n\n这个地方就是我遇到的问题，如果不将`reviews`全部转为`np.string`的话，会报`ValueError: np.nan is an invalid document, expected byte or unicode string.`错误，但是根据sklearn的文档，似乎并没有说不能传入`str`类型。\n\n## 测试模型\n\n~~~python\nvec_test = vectorizer.transform([np.str_(review) for review in reviews_test])\npred = clf.predict(vec_test)\nfrom sklearn import metrics\nprint(metrics.classification_report(labels_test, pred))\nprint(\"准确率:\", metrics.accuracy_score(labels_test, pred))\n~~~\n\n预测的准确率还不错，能达到85%以上。","source":"_posts/sklearn踩坑.md","raw":"---\ntitle: sklearn踩坑\ncover: /gallery/cover/sklearn.png\nthumbnail: /gallery/cover/sklearn.png\ndate: 2021-05-05 15:37:56\ntags:\n\t- sklearn\ncategories:\n\t- NLP\n---\n\n这几天在做毕业设计，想做一个微博的情感分析，想着实现两种方式，一是朴素贝叶斯，二是用LSTM。\n\n在做朴素贝叶斯的时候，据网上看到的一些文章说，训练的速度应该是很快的。但是我的训练速度却很慢，分析了一下发现是文本分词、清洗占去了大量的时间。我的语料大概12w行，20MB左右。文本处理需要一分多钟，而朴素贝叶斯的训练时间只需要一秒钟左右。\n\n于是想把文本处理的结果，保存起来，下次直接使用，就不需要每次都多等一分钟了。\n\n<!--more-->\n\n# 持久化\n\n原始文本的格式（csv格式）：\n\n~~~\nlabel,review\n1,更博了，爆照了，帅的呀，就是越来越爱你！生快傻缺[爱你][爱你][爱你]\n1,@张晓鹏jonathan 土耳其的事要认真对待[哈哈]，否则直接开除。@丁丁看世界 很是细心，酒店都全部OK啦。\n1,姑娘都羡慕你呢…还有招财猫高兴……//@爱在蔓延-JC:[哈哈]小学徒一枚，等着明天见您呢//@李欣芸SharonLee:大佬范儿[书呆子]\n1,美~~~~~[爱你]\n~~~\n\n处理后的文件（csv格式）：\n\n~~~\nlabel,review\n1,更博 爆照 帅 的 呀 越来越 爱 生快 傻 缺 [爱你] [爱你] [爱你]\n1,土耳其 的 事要 认真对待 [哈哈] 直接 开除 是 细心 酒店 都 全部\n1,姑娘 都 羡慕 呢 招财猫 高兴 [哈哈] 小 学徒 一枚 等 着 明天 见 呢 大佬 范儿 [书呆子]\n1,美 [爱你]\n~~~\n\n处理文件的脚本：\n\n~~~python\nimport random\nimport re\n\nimport jieba\nimport pandas as pd\n\n\ndef trim(text):\n    \"\"\"\n    带有语料清洗功能的分词函数, 包含数据预处理, 可以根据自己的需求重载\n    使用re保证了一些本来可能会分开的表情图标不分开\n    return: [str]\n    \"\"\"\n    text = re.sub(\"\\{%.+?%\\}\", \" \", text)           # 去除 {%xxx%} (地理定位, 微博话题等)\n    # text = re.sub(\"@.+?( |$)\", \" \", text)           # 去除 @xxx (用户名)\n    text = re.sub(\"@.+?( |:)\", \" \", text)           # 去除 @xxx (用户名)\n    text = re.sub(\"【.+?】\", \" \", text)              # 去除 【xx】 (里面的内容通常都不是用户自己写的)\n    text = re.sub(\"[a-zA-Z0-9]\", \" \", text)         # 去除字母和数字\n    icons = re.findall(\"\\[.+?\\]\", text)             # 提取出所有表情图标\n    text = re.sub(\"\\[.+?\\]\", \"IconMark\", text)      # 将文本中的图标替换为`IconMark`\n\n    tokens = []\n    # for k, w in enumerate(jieba.lcut(text)):\n    jieba.load_userdict('./data/user_dict.txt')\n    for w in jieba.cut(text):\n        w = w.strip()\n        if \"IconMark\" in w:                         # 将IconMark替换为原图标\n            for i in range(w.count(\"IconMark\")):\n                tokens.append(icons.pop(0))\n        elif w and w != '\\u200b' and w.isalpha():   # 只保留有效文本\n            tokens.append(w)\n    return tokens\n\n\ndef load_corpus(csvFilePath, stopwordPath):\n    \"\"\"\n    加载语料库，并进行分词，数据清洗，去除停用词\n    \"\"\"\n    # 数据读取\n    df = pd.read_csv(csvFilePath)\n    stopword = load_stopword(stopwordPath)\n    labels, reviews = df['label'].to_list(), df['review'].to_list()\n    trimedReviews = []\n    for review in reviews:\n        # 数据清洗\n        trimedReview = trim(review)\n        # 去除停用词\n        finalReview = []\n        for word in trimedReview:\n            if word not in stopword:\n                finalReview.append(word)\n        trimedReviews.append(finalReview)\n    return labels, trimedReviews\n\ndef load_reviews(csvFilePath):\n    df = pd.read_csv(csvFilePath)\n    return df['label'], df['review']\n\ndef load_stopword(filePath):\n    \"\"\"\n    加载停用词\n    \"\"\"\n    with open(filePath, encoding='UTF-8') as words:\n        stopword = [word.strip() for word in words]\n    return stopword\n\n\ndef data_suffle(labels, reviews):\n    \"\"\"\n    打乱数据\n    \"\"\"\n    join = list(zip(labels, reviews))\n    random.shuffle(join)\n    labels, reviews = zip(*join)\n    return list(labels), list(reviews)\n\ndef pre_trim(csvFilePath, stopwordPath):\n    \"\"\"\n    预处理csv文本，并持久化\n    \"\"\"\n    df = pd.read_csv(csvFilePath)\n    _, reviews = load_corpus(csvFilePath, stopwordPath)\n    for index in range(len(reviews)):\n        reviews[index] = ' '.join(reviews[index])\n    df['review'] = reviews\n    df.to_csv(csvFilePath[:-4] + 'Trimed.csv', index=False)\n\nif __name__ == '__main__':\n    csvFilePath = '../../corpus/100k/all.csv'\n    stopwordPath = './data/stopword.txt'\n    pre_trim(csvFilePath, stopwordPath)\n~~~\n\n# 读取文件\n\n## 读取文件并分割数据集\n\n~~~python\nimport time\nimport pickle\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\nfrom utils import load_reviews, data_suffle\n\n# stopwordPath = './data/stopword.txt'\n# userDictPath = './data/user_dict.txt'\ncsvFilePath = '../../corpus/100k/allTrimed.csv'\nmodelPath = './data/bayes.model'\n\n# 载入自定义字典\n# jieba.load_userdict(userDictPath)\n\ntime_start = time.time()\n\nlabels, reviews = load_reviews(csvFilePath)\nlabels, reviews = data_suffle(labels, reviews)\n\n# 1/4 分割数据集\nn = len(labels) // 5\nlabels_train, reviews_train = labels[n:], reviews[n:]\nlabels_test, reviews_test = labels[:n], reviews[:n]\n\nprint(f'Load Corpus Cost {time.time() - time_start:.4f} Sec')\n~~~\n\n## 训练模型\n\n~~~python\ntime_start = time.time()\n\nvectorizer = CountVectorizer(max_df=0.8, min_df=5)\n# ⚠️坑点\nvec_train = vectorizer.fit_transform([np.str_(review) for review in reviews_train])\nclf = MultinomialNB().fit(vec_train, labels_train)\n\nprint(f'Train Model Cost {time.time() - time_start:.4f} Sec')\n~~~\n\n这个地方就是我遇到的问题，如果不将`reviews`全部转为`np.string`的话，会报`ValueError: np.nan is an invalid document, expected byte or unicode string.`错误，但是根据sklearn的文档，似乎并没有说不能传入`str`类型。\n\n## 测试模型\n\n~~~python\nvec_test = vectorizer.transform([np.str_(review) for review in reviews_test])\npred = clf.predict(vec_test)\nfrom sklearn import metrics\nprint(metrics.classification_report(labels_test, pred))\nprint(\"准确率:\", metrics.accuracy_score(labels_test, pred))\n~~~\n\n预测的准确率还不错，能达到85%以上。","slug":"sklearn踩坑","published":1,"updated":"2021-05-05T08:11:03.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyce001r69kj51kv7cvt","content":"<p>这几天在做毕业设计，想做一个微博的情感分析，想着实现两种方式，一是朴素贝叶斯，二是用LSTM。</p>\n<p>在做朴素贝叶斯的时候，据网上看到的一些文章说，训练的速度应该是很快的。但是我的训练速度却很慢，分析了一下发现是文本分词、清洗占去了大量的时间。我的语料大概12w行，20MB左右。文本处理需要一分多钟，而朴素贝叶斯的训练时间只需要一秒钟左右。</p>\n<p>于是想把文本处理的结果，保存起来，下次直接使用，就不需要每次都多等一分钟了。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h1><p>原始文本的格式（csv格式）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label,review</span><br><span class=\"line\">1,更博了，爆照了，帅的呀，就是越来越爱你！生快傻缺[爱你][爱你][爱你]</span><br><span class=\"line\">1,@张晓鹏jonathan 土耳其的事要认真对待[哈哈]，否则直接开除。@丁丁看世界 很是细心，酒店都全部OK啦。</span><br><span class=\"line\">1,姑娘都羡慕你呢…还有招财猫高兴……&#x2F;&#x2F;@爱在蔓延-JC:[哈哈]小学徒一枚，等着明天见您呢&#x2F;&#x2F;@李欣芸SharonLee:大佬范儿[书呆子]</span><br><span class=\"line\">1,美~~~~~[爱你]</span><br></pre></td></tr></table></figure>\n\n<p>处理后的文件（csv格式）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label,review</span><br><span class=\"line\">1,更博 爆照 帅 的 呀 越来越 爱 生快 傻 缺 [爱你] [爱你] [爱你]</span><br><span class=\"line\">1,土耳其 的 事要 认真对待 [哈哈] 直接 开除 是 细心 酒店 都 全部</span><br><span class=\"line\">1,姑娘 都 羡慕 呢 招财猫 高兴 [哈哈] 小 学徒 一枚 等 着 明天 见 呢 大佬 范儿 [书呆子]</span><br><span class=\"line\">1,美 [爱你]</span><br></pre></td></tr></table></figure>\n\n<p>处理文件的脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trim</span>(<span class=\"params\">text</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    带有语料清洗功能的分词函数, 包含数据预处理, 可以根据自己的需求重载</span></span><br><span class=\"line\"><span class=\"string\">    使用re保证了一些本来可能会分开的表情图标不分开</span></span><br><span class=\"line\"><span class=\"string\">    return: [str]</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    text = re.sub(<span class=\"string\">&quot;\\&#123;%.+?%\\&#125;&quot;</span>, <span class=\"string\">&quot; &quot;</span>, text)           <span class=\"comment\"># 去除 &#123;%xxx%&#125; (地理定位, 微博话题等)</span></span><br><span class=\"line\">    <span class=\"comment\"># text = re.sub(&quot;@.+?( |$)&quot;, &quot; &quot;, text)           # 去除 @xxx (用户名)</span></span><br><span class=\"line\">    text = re.sub(<span class=\"string\">&quot;@.+?( |:)&quot;</span>, <span class=\"string\">&quot; &quot;</span>, text)           <span class=\"comment\"># 去除 @xxx (用户名)</span></span><br><span class=\"line\">    text = re.sub(<span class=\"string\">&quot;【.+?】&quot;</span>, <span class=\"string\">&quot; &quot;</span>, text)              <span class=\"comment\"># 去除 【xx】 (里面的内容通常都不是用户自己写的)</span></span><br><span class=\"line\">    text = re.sub(<span class=\"string\">&quot;[a-zA-Z0-9]&quot;</span>, <span class=\"string\">&quot; &quot;</span>, text)         <span class=\"comment\"># 去除字母和数字</span></span><br><span class=\"line\">    icons = re.findall(<span class=\"string\">&quot;\\[.+?\\]&quot;</span>, text)             <span class=\"comment\"># 提取出所有表情图标</span></span><br><span class=\"line\">    text = re.sub(<span class=\"string\">&quot;\\[.+?\\]&quot;</span>, <span class=\"string\">&quot;IconMark&quot;</span>, text)      <span class=\"comment\"># 将文本中的图标替换为`IconMark`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    tokens = []</span><br><span class=\"line\">    <span class=\"comment\"># for k, w in enumerate(jieba.lcut(text)):</span></span><br><span class=\"line\">    jieba.load_userdict(<span class=\"string\">&#x27;./data/user_dict.txt&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> jieba.cut(text):</span><br><span class=\"line\">        w = w.strip()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;IconMark&quot;</span> <span class=\"keyword\">in</span> w:                         <span class=\"comment\"># 将IconMark替换为原图标</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(w.count(<span class=\"string\">&quot;IconMark&quot;</span>)):</span><br><span class=\"line\">                tokens.append(icons.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> w <span class=\"keyword\">and</span> w != <span class=\"string\">&#x27;\\u200b&#x27;</span> <span class=\"keyword\">and</span> w.isalpha():   <span class=\"comment\"># 只保留有效文本</span></span><br><span class=\"line\">            tokens.append(w)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tokens</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_corpus</span>(<span class=\"params\">csvFilePath, stopwordPath</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    加载语料库，并进行分词，数据清洗，去除停用词</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据读取</span></span><br><span class=\"line\">    df = pd.read_csv(csvFilePath)</span><br><span class=\"line\">    stopword = load_stopword(stopwordPath)</span><br><span class=\"line\">    labels, reviews = df[<span class=\"string\">&#x27;label&#x27;</span>].to_list(), df[<span class=\"string\">&#x27;review&#x27;</span>].to_list()</span><br><span class=\"line\">    trimedReviews = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> review <span class=\"keyword\">in</span> reviews:</span><br><span class=\"line\">        <span class=\"comment\"># 数据清洗</span></span><br><span class=\"line\">        trimedReview = trim(review)</span><br><span class=\"line\">        <span class=\"comment\"># 去除停用词</span></span><br><span class=\"line\">        finalReview = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> trimedReview:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> stopword:</span><br><span class=\"line\">                finalReview.append(word)</span><br><span class=\"line\">        trimedReviews.append(finalReview)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> labels, trimedReviews</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_reviews</span>(<span class=\"params\">csvFilePath</span>):</span></span><br><span class=\"line\">    df = pd.read_csv(csvFilePath)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df[<span class=\"string\">&#x27;label&#x27;</span>], df[<span class=\"string\">&#x27;review&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_stopword</span>(<span class=\"params\">filePath</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    加载停用词</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filePath, encoding=<span class=\"string\">&#x27;UTF-8&#x27;</span>) <span class=\"keyword\">as</span> words:</span><br><span class=\"line\">        stopword = [word.strip() <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stopword</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data_suffle</span>(<span class=\"params\">labels, reviews</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    打乱数据</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    join = <span class=\"built_in\">list</span>(<span class=\"built_in\">zip</span>(labels, reviews))</span><br><span class=\"line\">    random.shuffle(join)</span><br><span class=\"line\">    labels, reviews = <span class=\"built_in\">zip</span>(*join)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>(labels), <span class=\"built_in\">list</span>(reviews)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pre_trim</span>(<span class=\"params\">csvFilePath, stopwordPath</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    预处理csv文本，并持久化</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    df = pd.read_csv(csvFilePath)</span><br><span class=\"line\">    _, reviews = load_corpus(csvFilePath, stopwordPath)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(reviews)):</span><br><span class=\"line\">        reviews[index] = <span class=\"string\">&#x27; &#x27;</span>.join(reviews[index])</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;review&#x27;</span>] = reviews</span><br><span class=\"line\">    df.to_csv(csvFilePath[:-<span class=\"number\">4</span>] + <span class=\"string\">&#x27;Trimed.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    csvFilePath = <span class=\"string\">&#x27;../../corpus/100k/all.csv&#x27;</span></span><br><span class=\"line\">    stopwordPath = <span class=\"string\">&#x27;./data/stopword.txt&#x27;</span></span><br><span class=\"line\">    pre_trim(csvFilePath, stopwordPath)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h1><h2 id=\"读取文件并分割数据集\"><a href=\"#读取文件并分割数据集\" class=\"headerlink\" title=\"读取文件并分割数据集\"></a>读取文件并分割数据集</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.feature_extraction.text <span class=\"keyword\">import</span> CountVectorizer, TfidfTransformer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> MultinomialNB</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.pipeline <span class=\"keyword\">import</span> Pipeline</span><br><span class=\"line\"><span class=\"keyword\">from</span> utils <span class=\"keyword\">import</span> load_reviews, data_suffle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># stopwordPath = &#x27;./data/stopword.txt&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># userDictPath = &#x27;./data/user_dict.txt&#x27;</span></span><br><span class=\"line\">csvFilePath = <span class=\"string\">&#x27;../../corpus/100k/allTrimed.csv&#x27;</span></span><br><span class=\"line\">modelPath = <span class=\"string\">&#x27;./data/bayes.model&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 载入自定义字典</span></span><br><span class=\"line\"><span class=\"comment\"># jieba.load_userdict(userDictPath)</span></span><br><span class=\"line\"></span><br><span class=\"line\">time_start = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">labels, reviews = load_reviews(csvFilePath)</span><br><span class=\"line\">labels, reviews = data_suffle(labels, reviews)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1/4 分割数据集</span></span><br><span class=\"line\">n = <span class=\"built_in\">len</span>(labels) // <span class=\"number\">5</span></span><br><span class=\"line\">labels_train, reviews_train = labels[n:], reviews[n:]</span><br><span class=\"line\">labels_test, reviews_test = labels[:n], reviews[:n]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Load Corpus Cost <span class=\"subst\">&#123;time.time() - time_start:<span class=\"number\">.4</span>f&#125;</span> Sec&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"训练模型\"><a href=\"#训练模型\" class=\"headerlink\" title=\"训练模型\"></a>训练模型</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time_start = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">vectorizer = CountVectorizer(max_df=<span class=\"number\">0.8</span>, min_df=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># ⚠️坑点</span></span><br><span class=\"line\">vec_train = vectorizer.fit_transform([np.str_(review) <span class=\"keyword\">for</span> review <span class=\"keyword\">in</span> reviews_train])</span><br><span class=\"line\">clf = MultinomialNB().fit(vec_train, labels_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Train Model Cost <span class=\"subst\">&#123;time.time() - time_start:<span class=\"number\">.4</span>f&#125;</span> Sec&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这个地方就是我遇到的问题，如果不将<code>reviews</code>全部转为<code>np.string</code>的话，会报<code>ValueError: np.nan is an invalid document, expected byte or unicode string.</code>错误，但是根据sklearn的文档，似乎并没有说不能传入<code>str</code>类型。</p>\n<h2 id=\"测试模型\"><a href=\"#测试模型\" class=\"headerlink\" title=\"测试模型\"></a>测试模型</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec_test = vectorizer.transform([np.str_(review) <span class=\"keyword\">for</span> review <span class=\"keyword\">in</span> reviews_test])</span><br><span class=\"line\">pred = clf.predict(vec_test)</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> metrics</span><br><span class=\"line\"><span class=\"built_in\">print</span>(metrics.classification_report(labels_test, pred))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;准确率:&quot;</span>, metrics.accuracy_score(labels_test, pred))</span><br></pre></td></tr></table></figure>\n\n<p>预测的准确率还不错，能达到85%以上。</p>\n","site":{"data":{}},"excerpt":"<p>这几天在做毕业设计，想做一个微博的情感分析，想着实现两种方式，一是朴素贝叶斯，二是用LSTM。</p>\n<p>在做朴素贝叶斯的时候，据网上看到的一些文章说，训练的速度应该是很快的。但是我的训练速度却很慢，分析了一下发现是文本分词、清洗占去了大量的时间。我的语料大概12w行，20MB左右。文本处理需要一分多钟，而朴素贝叶斯的训练时间只需要一秒钟左右。</p>\n<p>于是想把文本处理的结果，保存起来，下次直接使用，就不需要每次都多等一分钟了。</p>","more":"<h1 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h1><p>原始文本的格式（csv格式）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label,review</span><br><span class=\"line\">1,更博了，爆照了，帅的呀，就是越来越爱你！生快傻缺[爱你][爱你][爱你]</span><br><span class=\"line\">1,@张晓鹏jonathan 土耳其的事要认真对待[哈哈]，否则直接开除。@丁丁看世界 很是细心，酒店都全部OK啦。</span><br><span class=\"line\">1,姑娘都羡慕你呢…还有招财猫高兴……&#x2F;&#x2F;@爱在蔓延-JC:[哈哈]小学徒一枚，等着明天见您呢&#x2F;&#x2F;@李欣芸SharonLee:大佬范儿[书呆子]</span><br><span class=\"line\">1,美~~~~~[爱你]</span><br></pre></td></tr></table></figure>\n\n<p>处理后的文件（csv格式）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label,review</span><br><span class=\"line\">1,更博 爆照 帅 的 呀 越来越 爱 生快 傻 缺 [爱你] [爱你] [爱你]</span><br><span class=\"line\">1,土耳其 的 事要 认真对待 [哈哈] 直接 开除 是 细心 酒店 都 全部</span><br><span class=\"line\">1,姑娘 都 羡慕 呢 招财猫 高兴 [哈哈] 小 学徒 一枚 等 着 明天 见 呢 大佬 范儿 [书呆子]</span><br><span class=\"line\">1,美 [爱你]</span><br></pre></td></tr></table></figure>\n\n<p>处理文件的脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">trim</span>(<span class=\"params\">text</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    带有语料清洗功能的分词函数, 包含数据预处理, 可以根据自己的需求重载</span></span><br><span class=\"line\"><span class=\"string\">    使用re保证了一些本来可能会分开的表情图标不分开</span></span><br><span class=\"line\"><span class=\"string\">    return: [str]</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    text = re.sub(<span class=\"string\">&quot;\\&#123;%.+?%\\&#125;&quot;</span>, <span class=\"string\">&quot; &quot;</span>, text)           <span class=\"comment\"># 去除 &#123;%xxx%&#125; (地理定位, 微博话题等)</span></span><br><span class=\"line\">    <span class=\"comment\"># text = re.sub(&quot;@.+?( |$)&quot;, &quot; &quot;, text)           # 去除 @xxx (用户名)</span></span><br><span class=\"line\">    text = re.sub(<span class=\"string\">&quot;@.+?( |:)&quot;</span>, <span class=\"string\">&quot; &quot;</span>, text)           <span class=\"comment\"># 去除 @xxx (用户名)</span></span><br><span class=\"line\">    text = re.sub(<span class=\"string\">&quot;【.+?】&quot;</span>, <span class=\"string\">&quot; &quot;</span>, text)              <span class=\"comment\"># 去除 【xx】 (里面的内容通常都不是用户自己写的)</span></span><br><span class=\"line\">    text = re.sub(<span class=\"string\">&quot;[a-zA-Z0-9]&quot;</span>, <span class=\"string\">&quot; &quot;</span>, text)         <span class=\"comment\"># 去除字母和数字</span></span><br><span class=\"line\">    icons = re.findall(<span class=\"string\">&quot;\\[.+?\\]&quot;</span>, text)             <span class=\"comment\"># 提取出所有表情图标</span></span><br><span class=\"line\">    text = re.sub(<span class=\"string\">&quot;\\[.+?\\]&quot;</span>, <span class=\"string\">&quot;IconMark&quot;</span>, text)      <span class=\"comment\"># 将文本中的图标替换为`IconMark`</span></span><br><span class=\"line\"></span><br><span class=\"line\">    tokens = []</span><br><span class=\"line\">    <span class=\"comment\"># for k, w in enumerate(jieba.lcut(text)):</span></span><br><span class=\"line\">    jieba.load_userdict(<span class=\"string\">&#x27;./data/user_dict.txt&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> jieba.cut(text):</span><br><span class=\"line\">        w = w.strip()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"string\">&quot;IconMark&quot;</span> <span class=\"keyword\">in</span> w:                         <span class=\"comment\"># 将IconMark替换为原图标</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(w.count(<span class=\"string\">&quot;IconMark&quot;</span>)):</span><br><span class=\"line\">                tokens.append(icons.pop(<span class=\"number\">0</span>))</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> w <span class=\"keyword\">and</span> w != <span class=\"string\">&#x27;\\u200b&#x27;</span> <span class=\"keyword\">and</span> w.isalpha():   <span class=\"comment\"># 只保留有效文本</span></span><br><span class=\"line\">            tokens.append(w)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tokens</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_corpus</span>(<span class=\"params\">csvFilePath, stopwordPath</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    加载语料库，并进行分词，数据清洗，去除停用词</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 数据读取</span></span><br><span class=\"line\">    df = pd.read_csv(csvFilePath)</span><br><span class=\"line\">    stopword = load_stopword(stopwordPath)</span><br><span class=\"line\">    labels, reviews = df[<span class=\"string\">&#x27;label&#x27;</span>].to_list(), df[<span class=\"string\">&#x27;review&#x27;</span>].to_list()</span><br><span class=\"line\">    trimedReviews = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> review <span class=\"keyword\">in</span> reviews:</span><br><span class=\"line\">        <span class=\"comment\"># 数据清洗</span></span><br><span class=\"line\">        trimedReview = trim(review)</span><br><span class=\"line\">        <span class=\"comment\"># 去除停用词</span></span><br><span class=\"line\">        finalReview = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> trimedReview:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> word <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> stopword:</span><br><span class=\"line\">                finalReview.append(word)</span><br><span class=\"line\">        trimedReviews.append(finalReview)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> labels, trimedReviews</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_reviews</span>(<span class=\"params\">csvFilePath</span>):</span></span><br><span class=\"line\">    df = pd.read_csv(csvFilePath)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> df[<span class=\"string\">&#x27;label&#x27;</span>], df[<span class=\"string\">&#x27;review&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_stopword</span>(<span class=\"params\">filePath</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    加载停用词</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filePath, encoding=<span class=\"string\">&#x27;UTF-8&#x27;</span>) <span class=\"keyword\">as</span> words:</span><br><span class=\"line\">        stopword = [word.strip() <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stopword</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data_suffle</span>(<span class=\"params\">labels, reviews</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    打乱数据</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    join = <span class=\"built_in\">list</span>(<span class=\"built_in\">zip</span>(labels, reviews))</span><br><span class=\"line\">    random.shuffle(join)</span><br><span class=\"line\">    labels, reviews = <span class=\"built_in\">zip</span>(*join)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>(labels), <span class=\"built_in\">list</span>(reviews)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pre_trim</span>(<span class=\"params\">csvFilePath, stopwordPath</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    预处理csv文本，并持久化</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    df = pd.read_csv(csvFilePath)</span><br><span class=\"line\">    _, reviews = load_corpus(csvFilePath, stopwordPath)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(reviews)):</span><br><span class=\"line\">        reviews[index] = <span class=\"string\">&#x27; &#x27;</span>.join(reviews[index])</span><br><span class=\"line\">    df[<span class=\"string\">&#x27;review&#x27;</span>] = reviews</span><br><span class=\"line\">    df.to_csv(csvFilePath[:-<span class=\"number\">4</span>] + <span class=\"string\">&#x27;Trimed.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    csvFilePath = <span class=\"string\">&#x27;../../corpus/100k/all.csv&#x27;</span></span><br><span class=\"line\">    stopwordPath = <span class=\"string\">&#x27;./data/stopword.txt&#x27;</span></span><br><span class=\"line\">    pre_trim(csvFilePath, stopwordPath)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h1><h2 id=\"读取文件并分割数据集\"><a href=\"#读取文件并分割数据集\" class=\"headerlink\" title=\"读取文件并分割数据集\"></a>读取文件并分割数据集</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> pickle</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.feature_extraction.text <span class=\"keyword\">import</span> CountVectorizer, TfidfTransformer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> MultinomialNB</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.pipeline <span class=\"keyword\">import</span> Pipeline</span><br><span class=\"line\"><span class=\"keyword\">from</span> utils <span class=\"keyword\">import</span> load_reviews, data_suffle</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># stopwordPath = &#x27;./data/stopword.txt&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># userDictPath = &#x27;./data/user_dict.txt&#x27;</span></span><br><span class=\"line\">csvFilePath = <span class=\"string\">&#x27;../../corpus/100k/allTrimed.csv&#x27;</span></span><br><span class=\"line\">modelPath = <span class=\"string\">&#x27;./data/bayes.model&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 载入自定义字典</span></span><br><span class=\"line\"><span class=\"comment\"># jieba.load_userdict(userDictPath)</span></span><br><span class=\"line\"></span><br><span class=\"line\">time_start = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">labels, reviews = load_reviews(csvFilePath)</span><br><span class=\"line\">labels, reviews = data_suffle(labels, reviews)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 1/4 分割数据集</span></span><br><span class=\"line\">n = <span class=\"built_in\">len</span>(labels) // <span class=\"number\">5</span></span><br><span class=\"line\">labels_train, reviews_train = labels[n:], reviews[n:]</span><br><span class=\"line\">labels_test, reviews_test = labels[:n], reviews[:n]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Load Corpus Cost <span class=\"subst\">&#123;time.time() - time_start:<span class=\"number\">.4</span>f&#125;</span> Sec&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"训练模型\"><a href=\"#训练模型\" class=\"headerlink\" title=\"训练模型\"></a>训练模型</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">time_start = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">vectorizer = CountVectorizer(max_df=<span class=\"number\">0.8</span>, min_df=<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\"># ⚠️坑点</span></span><br><span class=\"line\">vec_train = vectorizer.fit_transform([np.str_(review) <span class=\"keyword\">for</span> review <span class=\"keyword\">in</span> reviews_train])</span><br><span class=\"line\">clf = MultinomialNB().fit(vec_train, labels_train)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Train Model Cost <span class=\"subst\">&#123;time.time() - time_start:<span class=\"number\">.4</span>f&#125;</span> Sec&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这个地方就是我遇到的问题，如果不将<code>reviews</code>全部转为<code>np.string</code>的话，会报<code>ValueError: np.nan is an invalid document, expected byte or unicode string.</code>错误，但是根据sklearn的文档，似乎并没有说不能传入<code>str</code>类型。</p>\n<h2 id=\"测试模型\"><a href=\"#测试模型\" class=\"headerlink\" title=\"测试模型\"></a>测试模型</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vec_test = vectorizer.transform([np.str_(review) <span class=\"keyword\">for</span> review <span class=\"keyword\">in</span> reviews_test])</span><br><span class=\"line\">pred = clf.predict(vec_test)</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn <span class=\"keyword\">import</span> metrics</span><br><span class=\"line\"><span class=\"built_in\">print</span>(metrics.classification_report(labels_test, pred))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;准确率:&quot;</span>, metrics.accuracy_score(labels_test, pred))</span><br></pre></td></tr></table></figure>\n\n<p>预测的准确率还不错，能达到85%以上。</p>"},{"title":"牛客练习赛-53B","thumbnail":"/gallery/thumbnails/post-bg-red-moon.jpg","date":"2019-10-12T04:56:03.000Z","_content":"\n## 题目\n\n[题目链接](https://ac.nowcoder.com/acm/contest/1114#question)\n\n<!--more-->\n\n### 题意\n\n求和式： $$\\sum_{i=1}^{n}{\\sum_{j=1}^{i}{i \\lfloor {\\frac{i}{j}} \\rfloor ^j}}$$\n\n### 分析\n\n更换一下枚举顺序：\n\n$$\\sum_{j=1}^{n}\\sum_{i=j}^{n}{i \\lfloor \\frac{i}{j} \\rfloor ^ j}$$\n\n可以发现 $i$ 在 区间 $[k\\cdot j, (k+1)\\cdot j-1]$ 内 $\\lfloor \\frac{i}{j} \\rfloor = k$ ，因此可以对每个 $j$ 做分段处理，另外 $\\lfloor \\frac{i}{j} \\rfloor ^ j$ 可以从上一个状态转移过来。\n\n时间复杂度： $O(n \\log n)$\n\n### 代码\n\n~~~cpp\n#include <bits/stdc++.h>\n  \nusing namespace std;\n  \ntypedef long long ll;\nconst int MAXN = 3e6 + 7;\nconst int MOD = 1e9 + 7;\nll p[MAXN];\n  \nint main () {\n    for (int i = 1; i <= 3000000; ++i) p[i] = 1;\n    ll n; cin >> n;\n    ll ans = 0;\n    for(ll j = 1; j <= n; ++j) {\n        ll lim = n/j, l = j, r = min(2 * j - 1, n);\n        for (ll i = 1; i <= lim; ++i) {\n            p[i] = p[i] * i % MOD;\n            ans += (l+r)*(r-l+1)/2%MOD*p[i]%MOD;\n            ans %= MOD;\n            l += j; r = min(r + j, n);\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n~~~\n\n","source":"_posts/niuke-exercise-53.md","raw":"---\n\ntitle: 牛客练习赛-53B\nthumbnail: /gallery/thumbnails/post-bg-red-moon.jpg\ndate: 2019-10-12 12:56:03\ntags: \n    - 数论\ncategories: \n    - 竞赛\n---\n\n## 题目\n\n[题目链接](https://ac.nowcoder.com/acm/contest/1114#question)\n\n<!--more-->\n\n### 题意\n\n求和式： $$\\sum_{i=1}^{n}{\\sum_{j=1}^{i}{i \\lfloor {\\frac{i}{j}} \\rfloor ^j}}$$\n\n### 分析\n\n更换一下枚举顺序：\n\n$$\\sum_{j=1}^{n}\\sum_{i=j}^{n}{i \\lfloor \\frac{i}{j} \\rfloor ^ j}$$\n\n可以发现 $i$ 在 区间 $[k\\cdot j, (k+1)\\cdot j-1]$ 内 $\\lfloor \\frac{i}{j} \\rfloor = k$ ，因此可以对每个 $j$ 做分段处理，另外 $\\lfloor \\frac{i}{j} \\rfloor ^ j$ 可以从上一个状态转移过来。\n\n时间复杂度： $O(n \\log n)$\n\n### 代码\n\n~~~cpp\n#include <bits/stdc++.h>\n  \nusing namespace std;\n  \ntypedef long long ll;\nconst int MAXN = 3e6 + 7;\nconst int MOD = 1e9 + 7;\nll p[MAXN];\n  \nint main () {\n    for (int i = 1; i <= 3000000; ++i) p[i] = 1;\n    ll n; cin >> n;\n    ll ans = 0;\n    for(ll j = 1; j <= n; ++j) {\n        ll lim = n/j, l = j, r = min(2 * j - 1, n);\n        for (ll i = 1; i <= lim; ++i) {\n            p[i] = p[i] * i % MOD;\n            ans += (l+r)*(r-l+1)/2%MOD*p[i]%MOD;\n            ans %= MOD;\n            l += j; r = min(r + j, n);\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n~~~\n\n","slug":"niuke-exercise-53","published":1,"updated":"2021-03-28T08:52:35.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hycf001u69kj3u6qacv6","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><a href=\"https://ac.nowcoder.com/acm/contest/1114#question\">题目链接</a></p>\n<span id=\"more\"></span>\n\n<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>求和式： $$\\sum_{i=1}^{n}{\\sum_{j=1}^{i}{i \\lfloor {\\frac{i}{j}} \\rfloor ^j}}$$</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>更换一下枚举顺序：</p>\n<p>$$\\sum_{j=1}^{n}\\sum_{i=j}^{n}{i \\lfloor \\frac{i}{j} \\rfloor ^ j}$$</p>\n<p>可以发现 $i$ 在 区间 $[k\\cdot j, (k+1)\\cdot j-1]$ 内 $\\lfloor \\frac{i}{j} \\rfloor = k$ ，因此可以对每个 $j$ 做分段处理，另外 $\\lfloor \\frac{i}{j} \\rfloor ^ j$ 可以从上一个状态转移过来。</p>\n<p>时间复杂度： $O(n \\log n)$</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">3e6</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">ll p[MAXN];</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3000000</span>; ++i) p[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll n; cin &gt;&gt; n;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">        ll lim = n/j, l = j, r = <span class=\"built_in\">min</span>(<span class=\"number\">2</span> * j - <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = <span class=\"number\">1</span>; i &lt;= lim; ++i) &#123;</span><br><span class=\"line\">            p[i] = p[i] * i % MOD;</span><br><span class=\"line\">            ans += (l+r)*(r-l+<span class=\"number\">1</span>)/<span class=\"number\">2</span>%MOD*p[i]%MOD;</span><br><span class=\"line\">            ans %= MOD;</span><br><span class=\"line\">            l += j; r = <span class=\"built_in\">min</span>(r + j, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p><a href=\"https://ac.nowcoder.com/acm/contest/1114#question\">题目链接</a></p>","more":"<h3 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h3><p>求和式： $$\\sum_{i=1}^{n}{\\sum_{j=1}^{i}{i \\lfloor {\\frac{i}{j}} \\rfloor ^j}}$$</p>\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>更换一下枚举顺序：</p>\n<p>$$\\sum_{j=1}^{n}\\sum_{i=j}^{n}{i \\lfloor \\frac{i}{j} \\rfloor ^ j}$$</p>\n<p>可以发现 $i$ 在 区间 $[k\\cdot j, (k+1)\\cdot j-1]$ 内 $\\lfloor \\frac{i}{j} \\rfloor = k$ ，因此可以对每个 $j$ 做分段处理，另外 $\\lfloor \\frac{i}{j} \\rfloor ^ j$ 可以从上一个状态转移过来。</p>\n<p>时间复杂度： $O(n \\log n)$</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">3e6</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MOD = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\">ll p[MAXN];</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3000000</span>; ++i) p[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ll n; cin &gt;&gt; n;</span><br><span class=\"line\">    ll ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(ll j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">        ll lim = n/j, l = j, r = <span class=\"built_in\">min</span>(<span class=\"number\">2</span> * j - <span class=\"number\">1</span>, n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (ll i = <span class=\"number\">1</span>; i &lt;= lim; ++i) &#123;</span><br><span class=\"line\">            p[i] = p[i] * i % MOD;</span><br><span class=\"line\">            ans += (l+r)*(r-l+<span class=\"number\">1</span>)/<span class=\"number\">2</span>%MOD*p[i]%MOD;</span><br><span class=\"line\">            ans %= MOD;</span><br><span class=\"line\">            l += j; r = <span class=\"built_in\">min</span>(r + j, n);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"红楼梦札记","thumbnail":"/gallery/thumbnails/0_Obsidian Woods, Anton Fadeev_01.jpg","date":"2019-04-23T02:56:34.000Z","_content":"\n## 小记\n\n昨天晚上看了一集木鱼水心做的87版红楼梦讲解，颇有兴趣，于是决定写一篇博客，记录个人感受。\n\n说起来，曾经多次想要认真读完红楼梦原著却都不了了之，究其根本可能是我本人对其中复杂人物关系招架不住，毕竟在生活中我就不擅长这些事情。还有可能是因为书中前篇铺垫冗长，这种慢热的写法导致我还没看到精彩的部分就已经没了耐心。\n\n<!--more-->\n\n确实如木鱼水心在第一篇中所说的那样，虽然同为四大名著，红楼梦却没用其他三本书那样人尽皆知。\n\n至于我为什么想读这本书，可能因为高中的时候同学老师的不经意提起，对为何它能被评为“小说的巅峰”感到好奇，还有就是对书中所描述的美食十分感兴趣。\n\n我为何不选择自己品读名著，观看电视剧？\n\n原因有二：１、没有太多的时间。２、觉得自己品读原著读不出来什么东西，很可能很快就放弃了。\n\n本篇博客小标题与木鱼水心分p标题相同。\n\n## 通灵宝玉入红尘，宝黛初会续前盟\n\n ### 抄录\n\n> 满纸荒唐言，一把辛酸泪。\n>\n> 都云作者痴，谁解其中味。\n\n> 红尘之中美中不足且好事多磨，乐极生悲之时又人非物换，不过是到头一梦，万境归空。\n\n> **好了歌**\n>\n> 世人都道神仙好\n>\n> 惟有功名忘不了\n>\n> 古今将相在何方\n>\n> 荒冢一堆草末了\n\n","source":"_posts/reading-Dream-of-the-Red-Chamber.md","raw":"---\ntitle: 红楼梦札记\nthumbnail: /gallery/thumbnails/0_Obsidian Woods, Anton Fadeev_01.jpg\ndate: 2019-04-23 10:56:34\ntags: \n    - 红楼梦\ncategories: \n    - 随笔\n---\n\n## 小记\n\n昨天晚上看了一集木鱼水心做的87版红楼梦讲解，颇有兴趣，于是决定写一篇博客，记录个人感受。\n\n说起来，曾经多次想要认真读完红楼梦原著却都不了了之，究其根本可能是我本人对其中复杂人物关系招架不住，毕竟在生活中我就不擅长这些事情。还有可能是因为书中前篇铺垫冗长，这种慢热的写法导致我还没看到精彩的部分就已经没了耐心。\n\n<!--more-->\n\n确实如木鱼水心在第一篇中所说的那样，虽然同为四大名著，红楼梦却没用其他三本书那样人尽皆知。\n\n至于我为什么想读这本书，可能因为高中的时候同学老师的不经意提起，对为何它能被评为“小说的巅峰”感到好奇，还有就是对书中所描述的美食十分感兴趣。\n\n我为何不选择自己品读名著，观看电视剧？\n\n原因有二：１、没有太多的时间。２、觉得自己品读原著读不出来什么东西，很可能很快就放弃了。\n\n本篇博客小标题与木鱼水心分p标题相同。\n\n## 通灵宝玉入红尘，宝黛初会续前盟\n\n ### 抄录\n\n> 满纸荒唐言，一把辛酸泪。\n>\n> 都云作者痴，谁解其中味。\n\n> 红尘之中美中不足且好事多磨，乐极生悲之时又人非物换，不过是到头一梦，万境归空。\n\n> **好了歌**\n>\n> 世人都道神仙好\n>\n> 惟有功名忘不了\n>\n> 古今将相在何方\n>\n> 荒冢一堆草末了\n\n","slug":"reading-Dream-of-the-Red-Chamber","published":1,"updated":"2021-03-28T08:47:36.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hycg001z69kj4ico87ei","content":"<h2 id=\"小记\"><a href=\"#小记\" class=\"headerlink\" title=\"小记\"></a>小记</h2><p>昨天晚上看了一集木鱼水心做的87版红楼梦讲解，颇有兴趣，于是决定写一篇博客，记录个人感受。</p>\n<p>说起来，曾经多次想要认真读完红楼梦原著却都不了了之，究其根本可能是我本人对其中复杂人物关系招架不住，毕竟在生活中我就不擅长这些事情。还有可能是因为书中前篇铺垫冗长，这种慢热的写法导致我还没看到精彩的部分就已经没了耐心。</p>\n<span id=\"more\"></span>\n\n<p>确实如木鱼水心在第一篇中所说的那样，虽然同为四大名著，红楼梦却没用其他三本书那样人尽皆知。</p>\n<p>至于我为什么想读这本书，可能因为高中的时候同学老师的不经意提起，对为何它能被评为“小说的巅峰”感到好奇，还有就是对书中所描述的美食十分感兴趣。</p>\n<p>我为何不选择自己品读名著，观看电视剧？</p>\n<p>原因有二：１、没有太多的时间。２、觉得自己品读原著读不出来什么东西，很可能很快就放弃了。</p>\n<p>本篇博客小标题与木鱼水心分p标题相同。</p>\n<h2 id=\"通灵宝玉入红尘，宝黛初会续前盟\"><a href=\"#通灵宝玉入红尘，宝黛初会续前盟\" class=\"headerlink\" title=\"通灵宝玉入红尘，宝黛初会续前盟\"></a>通灵宝玉入红尘，宝黛初会续前盟</h2><h3 id=\"抄录\"><a href=\"#抄录\" class=\"headerlink\" title=\"抄录\"></a>抄录</h3><blockquote>\n<p>满纸荒唐言，一把辛酸泪。</p>\n<p>都云作者痴，谁解其中味。</p>\n</blockquote>\n<blockquote>\n<p>红尘之中美中不足且好事多磨，乐极生悲之时又人非物换，不过是到头一梦，万境归空。</p>\n</blockquote>\n<blockquote>\n<p><strong>好了歌</strong></p>\n<p>世人都道神仙好</p>\n<p>惟有功名忘不了</p>\n<p>古今将相在何方</p>\n<p>荒冢一堆草末了</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"小记\"><a href=\"#小记\" class=\"headerlink\" title=\"小记\"></a>小记</h2><p>昨天晚上看了一集木鱼水心做的87版红楼梦讲解，颇有兴趣，于是决定写一篇博客，记录个人感受。</p>\n<p>说起来，曾经多次想要认真读完红楼梦原著却都不了了之，究其根本可能是我本人对其中复杂人物关系招架不住，毕竟在生活中我就不擅长这些事情。还有可能是因为书中前篇铺垫冗长，这种慢热的写法导致我还没看到精彩的部分就已经没了耐心。</p>","more":"<p>确实如木鱼水心在第一篇中所说的那样，虽然同为四大名著，红楼梦却没用其他三本书那样人尽皆知。</p>\n<p>至于我为什么想读这本书，可能因为高中的时候同学老师的不经意提起，对为何它能被评为“小说的巅峰”感到好奇，还有就是对书中所描述的美食十分感兴趣。</p>\n<p>我为何不选择自己品读名著，观看电视剧？</p>\n<p>原因有二：１、没有太多的时间。２、觉得自己品读原著读不出来什么东西，很可能很快就放弃了。</p>\n<p>本篇博客小标题与木鱼水心分p标题相同。</p>\n<h2 id=\"通灵宝玉入红尘，宝黛初会续前盟\"><a href=\"#通灵宝玉入红尘，宝黛初会续前盟\" class=\"headerlink\" title=\"通灵宝玉入红尘，宝黛初会续前盟\"></a>通灵宝玉入红尘，宝黛初会续前盟</h2><h3 id=\"抄录\"><a href=\"#抄录\" class=\"headerlink\" title=\"抄录\"></a>抄录</h3><blockquote>\n<p>满纸荒唐言，一把辛酸泪。</p>\n<p>都云作者痴，谁解其中味。</p>\n</blockquote>\n<blockquote>\n<p>红尘之中美中不足且好事多磨，乐极生悲之时又人非物换，不过是到头一梦，万境归空。</p>\n</blockquote>\n<blockquote>\n<p><strong>好了歌</strong></p>\n<p>世人都道神仙好</p>\n<p>惟有功名忘不了</p>\n<p>古今将相在何方</p>\n<p>荒冢一堆草末了</p>\n</blockquote>"},{"title":"使用HTTP协议实现内网文件传输","thumbnail":"/gallery/thumbnails/http.png","date":"2019-06-25T12:10:28.000Z","_content":"\n# 需求\n\n虽然说现在各种网盘、QQ，已经可以满足我们日常基本的小文件传输的需要了，但是当文件比较大的时候还是很慢，因此我们需要一种更快的，更简洁的传输方式来做**局域网**内的文件传输。\n\n<!--more-->\n\n# 解决方案\n\n考虑使用本地的一台主机做服务器，为其他同局域网内的设备（如：手机、平板电脑）提供文件传输服务，使用`http`协议。\n\n## 工具\n\nMobaXterm、python3。\n\n[下载MobaXterm（Windows）](/download/MobaXterm.exe)\n\n## 步骤\n\n### 使用MobaXterm\n\n1. 打开Xterm的Servers，选择http。\n2. 设置端口号、文件所在地址和开启时间。\n3. 开启服务。\n\n![Step1](/gallery/others/mobaxterm-http1.png)\n\n![Step2](/gallery/others/mobaxterm-http2.png)\n\n### 使用Python\n\n1. 打开cmd\n\n2. 输入\n\n   > $ python -m http.server\t# python3\n   >\n   > $ python -m SimpleHTTPServers\t# python2\n\n![python2](/gallery/others/python2-http.png)\n\n![python3](/gallery/others/python3-http.png)\n\n如果想要选择端口号的话，可以直接在后面添加。\n\n#### Tip\n\npython方法对中文路径很不友好，不建议使用中文文件名，可能会访问不了。MobaXterm没有问题，中文文件也可以正常访问。\n\n## 浏览器访问\n\n经过上述步骤，你已经可以在其他设备上访问你服务器上的文件了。\n\n在浏览器输入你服务器的本地IP即可（如果不是80端口，则需要自己手动输入）。\n\n经测试，网页直接下载速度约为30Mb/s。\n\n另外，意想不到的一点是，视频文件（MP4）可以直接播放，而且丝毫没有卡顿，因此，我们还可以把它当作视频服务器，下载到电脑上的视频可以在手机📱、平板上看啦。","source":"_posts/transfer-file-use-http.md","raw":"---\ntitle: 使用HTTP协议实现内网文件传输\nthumbnail: /gallery/thumbnails/http.png\ndate: 2019-06-25 20:10:28\ntags: \n   - HTTP\ncategories: \n   - 网络\n---\n\n# 需求\n\n虽然说现在各种网盘、QQ，已经可以满足我们日常基本的小文件传输的需要了，但是当文件比较大的时候还是很慢，因此我们需要一种更快的，更简洁的传输方式来做**局域网**内的文件传输。\n\n<!--more-->\n\n# 解决方案\n\n考虑使用本地的一台主机做服务器，为其他同局域网内的设备（如：手机、平板电脑）提供文件传输服务，使用`http`协议。\n\n## 工具\n\nMobaXterm、python3。\n\n[下载MobaXterm（Windows）](/download/MobaXterm.exe)\n\n## 步骤\n\n### 使用MobaXterm\n\n1. 打开Xterm的Servers，选择http。\n2. 设置端口号、文件所在地址和开启时间。\n3. 开启服务。\n\n![Step1](/gallery/others/mobaxterm-http1.png)\n\n![Step2](/gallery/others/mobaxterm-http2.png)\n\n### 使用Python\n\n1. 打开cmd\n\n2. 输入\n\n   > $ python -m http.server\t# python3\n   >\n   > $ python -m SimpleHTTPServers\t# python2\n\n![python2](/gallery/others/python2-http.png)\n\n![python3](/gallery/others/python3-http.png)\n\n如果想要选择端口号的话，可以直接在后面添加。\n\n#### Tip\n\npython方法对中文路径很不友好，不建议使用中文文件名，可能会访问不了。MobaXterm没有问题，中文文件也可以正常访问。\n\n## 浏览器访问\n\n经过上述步骤，你已经可以在其他设备上访问你服务器上的文件了。\n\n在浏览器输入你服务器的本地IP即可（如果不是80端口，则需要自己手动输入）。\n\n经测试，网页直接下载速度约为30Mb/s。\n\n另外，意想不到的一点是，视频文件（MP4）可以直接播放，而且丝毫没有卡顿，因此，我们还可以把它当作视频服务器，下载到电脑上的视频可以在手机📱、平板上看啦。","slug":"transfer-file-use-http","published":1,"updated":"2021-03-28T08:49:41.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hych002169kjcvvo81yl","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>虽然说现在各种网盘、QQ，已经可以满足我们日常基本的小文件传输的需要了，但是当文件比较大的时候还是很慢，因此我们需要一种更快的，更简洁的传输方式来做<strong>局域网</strong>内的文件传输。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>考虑使用本地的一台主机做服务器，为其他同局域网内的设备（如：手机、平板电脑）提供文件传输服务，使用<code>http</code>协议。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>MobaXterm、python3。</p>\n<p><a href=\"/download/MobaXterm.exe\">下载MobaXterm（Windows）</a></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"使用MobaXterm\"><a href=\"#使用MobaXterm\" class=\"headerlink\" title=\"使用MobaXterm\"></a>使用MobaXterm</h3><ol>\n<li>打开Xterm的Servers，选择http。</li>\n<li>设置端口号、文件所在地址和开启时间。</li>\n<li>开启服务。</li>\n</ol>\n<p><img src=\"/gallery/others/mobaxterm-http1.png\" alt=\"Step1\"></p>\n<p><img src=\"/gallery/others/mobaxterm-http2.png\" alt=\"Step2\"></p>\n<h3 id=\"使用Python\"><a href=\"#使用Python\" class=\"headerlink\" title=\"使用Python\"></a>使用Python</h3><ol>\n<li><p>打开cmd</p>\n</li>\n<li><p>输入</p>\n<blockquote>\n<p>$ python -m http.server    # python3</p>\n<p>$ python -m SimpleHTTPServers    # python2</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/gallery/others/python2-http.png\" alt=\"python2\"></p>\n<p><img src=\"/gallery/others/python3-http.png\" alt=\"python3\"></p>\n<p>如果想要选择端口号的话，可以直接在后面添加。</p>\n<h4 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h4><p>python方法对中文路径很不友好，不建议使用中文文件名，可能会访问不了。MobaXterm没有问题，中文文件也可以正常访问。</p>\n<h2 id=\"浏览器访问\"><a href=\"#浏览器访问\" class=\"headerlink\" title=\"浏览器访问\"></a>浏览器访问</h2><p>经过上述步骤，你已经可以在其他设备上访问你服务器上的文件了。</p>\n<p>在浏览器输入你服务器的本地IP即可（如果不是80端口，则需要自己手动输入）。</p>\n<p>经测试，网页直接下载速度约为30Mb/s。</p>\n<p>另外，意想不到的一点是，视频文件（MP4）可以直接播放，而且丝毫没有卡顿，因此，我们还可以把它当作视频服务器，下载到电脑上的视频可以在手机📱、平板上看啦。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>虽然说现在各种网盘、QQ，已经可以满足我们日常基本的小文件传输的需要了，但是当文件比较大的时候还是很慢，因此我们需要一种更快的，更简洁的传输方式来做<strong>局域网</strong>内的文件传输。</p>","more":"<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>考虑使用本地的一台主机做服务器，为其他同局域网内的设备（如：手机、平板电脑）提供文件传输服务，使用<code>http</code>协议。</p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><p>MobaXterm、python3。</p>\n<p><a href=\"/download/MobaXterm.exe\">下载MobaXterm（Windows）</a></p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"使用MobaXterm\"><a href=\"#使用MobaXterm\" class=\"headerlink\" title=\"使用MobaXterm\"></a>使用MobaXterm</h3><ol>\n<li>打开Xterm的Servers，选择http。</li>\n<li>设置端口号、文件所在地址和开启时间。</li>\n<li>开启服务。</li>\n</ol>\n<p><img src=\"/gallery/others/mobaxterm-http1.png\" alt=\"Step1\"></p>\n<p><img src=\"/gallery/others/mobaxterm-http2.png\" alt=\"Step2\"></p>\n<h3 id=\"使用Python\"><a href=\"#使用Python\" class=\"headerlink\" title=\"使用Python\"></a>使用Python</h3><ol>\n<li><p>打开cmd</p>\n</li>\n<li><p>输入</p>\n<blockquote>\n<p>$ python -m http.server    # python3</p>\n<p>$ python -m SimpleHTTPServers    # python2</p>\n</blockquote>\n</li>\n</ol>\n<p><img src=\"/gallery/others/python2-http.png\" alt=\"python2\"></p>\n<p><img src=\"/gallery/others/python3-http.png\" alt=\"python3\"></p>\n<p>如果想要选择端口号的话，可以直接在后面添加。</p>\n<h4 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h4><p>python方法对中文路径很不友好，不建议使用中文文件名，可能会访问不了。MobaXterm没有问题，中文文件也可以正常访问。</p>\n<h2 id=\"浏览器访问\"><a href=\"#浏览器访问\" class=\"headerlink\" title=\"浏览器访问\"></a>浏览器访问</h2><p>经过上述步骤，你已经可以在其他设备上访问你服务器上的文件了。</p>\n<p>在浏览器输入你服务器的本地IP即可（如果不是80端口，则需要自己手动输入）。</p>\n<p>经测试，网页直接下载速度约为30Mb/s。</p>\n<p>另外，意想不到的一点是，视频文件（MP4）可以直接播放，而且丝毫没有卡顿，因此，我们还可以把它当作视频服务器，下载到电脑上的视频可以在手机📱、平板上看啦。</p>"},{"title":"学期总结","thumbnail":"/gallery/thumbnails/roman-kraft-WUvBROPOsuo-unsplash.jpg","date":"2020-01-11T04:22:56.000Z","_content":"\n这个学期应该算是过的最丰富多彩的一个学期。\n\n<!--more-->\n\n出去打了三场比赛，秦皇岛，银川，西安。有得有失。\n\n秦皇岛含泪铁首，银川惊险夺金，西安奇妙得铜，这里面的一个个惊险刺激、趣味横生的故事，只有真正经历过才能体会得到吧。\n\n在期末考试来临前的两周里，完成了两门课程设计以及五门课程的自学，希望能够得到一个好成绩。\n\n## 三场比赛\n\n#### 秦皇岛\n\n这是一场CCPC的比赛，可能是我第一次也是最后一次参加CCPC的区域赛了。\n\n秦皇岛离学校很远，坐了一天一夜的火车，舟车劳顿。\n\n周六的晚上吃了宾馆楼下的一家饭店，主打鱼头。本着来都来了的消费观，点了一个鱼头，一个炒三丝，还有一个记不得了，也可能是就点了这两个菜。鱼头的吃法是泡馍，鱼头特别大，我第一次见到那么大的鱼头。鱼肉一般，汤汁特别浓郁，不过好像勾的欠有点多，导致泡馍的时候馍没有很洗汤。在我们把鱼肉吃完了之后，店家看见我们鱼头都没打开，给我们说“把鱼头翻开啊，里面才是精华”。打开一看，果然，里面都是一些软糯的肉，跟鱼身子上的肉完全不一样，非常的鲜，要不是店家提醒，我们可能就要错过这美食了。炒三丝里面有一个是海参丝，这也是我第一次吃海参，口感Q弹，但是没什么自己味道，都是汤汁的味道。\n\n比赛当天有点炸裂，签到题挂了一次，一道 tarjan 的裸题因为没学过想了很久，因此一道比较简单的 DP 很久之后才看到。决策失误，不然应该不至于成绩这么差。\n\n比赛结束之后去了心心念念的海边，光着脚踩水踩沙子，感受着海浪扑到自己的腿上，感受着脚底的沙子随着海水一起流走。所有的失意也一起流走了，剩下了金子一样的坚韧。\n\n#### 银川\n\n由于银川网赛接二连三的出现问题，很多高校都拒绝参加现场赛，因此给了很多弱校偷鸡的机会，比如我校。\n\n银川那可是相当我远了，火车又是咣当咣当不停的运行了近乎一天的时间。不过幸好这次去的人比较多，路上也不是很落寞。透过火车的窗户，看到了戈壁滩上的落日。\n\n说是银川，实际上比赛是在石嘴山举办的。按照惯例周六去大吃了一顿，吃的是当地一个比较出名的羊肉店，确实很好吃。除了羊肉之外，还有一个花茶特别的好喝。\n\n比赛前夕 q 神熬夜补锅，才使得现场赛顺顺利利的进行。\n\n比赛题目确实简单，前40金，我们第四十。\n\n然后就愉快的返程了。\n\n#### 西安\n\nEC 正好和四六级在同一个周末，只能周六考四六级，晚上坐一夜火车去西安，然后早上正好到赛场直接开始比赛，直接就开始比赛了。\n\n题很难，二十多分钟签上到，然后挂机了快三个小时才写出第二道题。第三道题比赛前十几分钟才交上第一发，然后 TLE 了，发现是结构体里写了个 vector ，赶紧把 vector 提出来，改到结束前20s才改好，提交，返回了 too late，很绝望。这个时候大屏幕上时间显示还有 20s ，但是比赛却已经结束了。\n\n学弟们三题拿到了铜，于是一起去领奖。颁发铜奖的时候突然听到了我们的队名，原来是重测了还通过了。惊喜。\n\n## 期末\n\n这个学期没有怎么上课，能逃的课都逃了。就导致期末考试很难过。还有两篇课程设计是真的麻烦。拼命搞了两个星期总算是复习了个差不多，课设也做好了。等着出成绩。\n\n#### 2020-1-19 update:\n\n成绩都出来了，有几科分数十分不科学，低的就离谱，不知道这些老师怎么想的。\n\n总的来说还可以，绩点3.35，总评可算进前50了。\n\n##### Thumbnail by [Roman Kraft](https://unsplash.com/@romankraft?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/information?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)","source":"_posts/winter-holiday-summary.md","raw":"---\ntitle: 学期总结\nthumbnail: /gallery/thumbnails/roman-kraft-WUvBROPOsuo-unsplash.jpg\ndate: 2020-01-11 12:22:56\ntags: \n    - 旅游\ncategories: \n    - 随笔\n---\n\n这个学期应该算是过的最丰富多彩的一个学期。\n\n<!--more-->\n\n出去打了三场比赛，秦皇岛，银川，西安。有得有失。\n\n秦皇岛含泪铁首，银川惊险夺金，西安奇妙得铜，这里面的一个个惊险刺激、趣味横生的故事，只有真正经历过才能体会得到吧。\n\n在期末考试来临前的两周里，完成了两门课程设计以及五门课程的自学，希望能够得到一个好成绩。\n\n## 三场比赛\n\n#### 秦皇岛\n\n这是一场CCPC的比赛，可能是我第一次也是最后一次参加CCPC的区域赛了。\n\n秦皇岛离学校很远，坐了一天一夜的火车，舟车劳顿。\n\n周六的晚上吃了宾馆楼下的一家饭店，主打鱼头。本着来都来了的消费观，点了一个鱼头，一个炒三丝，还有一个记不得了，也可能是就点了这两个菜。鱼头的吃法是泡馍，鱼头特别大，我第一次见到那么大的鱼头。鱼肉一般，汤汁特别浓郁，不过好像勾的欠有点多，导致泡馍的时候馍没有很洗汤。在我们把鱼肉吃完了之后，店家看见我们鱼头都没打开，给我们说“把鱼头翻开啊，里面才是精华”。打开一看，果然，里面都是一些软糯的肉，跟鱼身子上的肉完全不一样，非常的鲜，要不是店家提醒，我们可能就要错过这美食了。炒三丝里面有一个是海参丝，这也是我第一次吃海参，口感Q弹，但是没什么自己味道，都是汤汁的味道。\n\n比赛当天有点炸裂，签到题挂了一次，一道 tarjan 的裸题因为没学过想了很久，因此一道比较简单的 DP 很久之后才看到。决策失误，不然应该不至于成绩这么差。\n\n比赛结束之后去了心心念念的海边，光着脚踩水踩沙子，感受着海浪扑到自己的腿上，感受着脚底的沙子随着海水一起流走。所有的失意也一起流走了，剩下了金子一样的坚韧。\n\n#### 银川\n\n由于银川网赛接二连三的出现问题，很多高校都拒绝参加现场赛，因此给了很多弱校偷鸡的机会，比如我校。\n\n银川那可是相当我远了，火车又是咣当咣当不停的运行了近乎一天的时间。不过幸好这次去的人比较多，路上也不是很落寞。透过火车的窗户，看到了戈壁滩上的落日。\n\n说是银川，实际上比赛是在石嘴山举办的。按照惯例周六去大吃了一顿，吃的是当地一个比较出名的羊肉店，确实很好吃。除了羊肉之外，还有一个花茶特别的好喝。\n\n比赛前夕 q 神熬夜补锅，才使得现场赛顺顺利利的进行。\n\n比赛题目确实简单，前40金，我们第四十。\n\n然后就愉快的返程了。\n\n#### 西安\n\nEC 正好和四六级在同一个周末，只能周六考四六级，晚上坐一夜火车去西安，然后早上正好到赛场直接开始比赛，直接就开始比赛了。\n\n题很难，二十多分钟签上到，然后挂机了快三个小时才写出第二道题。第三道题比赛前十几分钟才交上第一发，然后 TLE 了，发现是结构体里写了个 vector ，赶紧把 vector 提出来，改到结束前20s才改好，提交，返回了 too late，很绝望。这个时候大屏幕上时间显示还有 20s ，但是比赛却已经结束了。\n\n学弟们三题拿到了铜，于是一起去领奖。颁发铜奖的时候突然听到了我们的队名，原来是重测了还通过了。惊喜。\n\n## 期末\n\n这个学期没有怎么上课，能逃的课都逃了。就导致期末考试很难过。还有两篇课程设计是真的麻烦。拼命搞了两个星期总算是复习了个差不多，课设也做好了。等着出成绩。\n\n#### 2020-1-19 update:\n\n成绩都出来了，有几科分数十分不科学，低的就离谱，不知道这些老师怎么想的。\n\n总的来说还可以，绩点3.35，总评可算进前50了。\n\n##### Thumbnail by [Roman Kraft](https://unsplash.com/@romankraft?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/information?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)","slug":"winter-holiday-summary","published":1,"updated":"2021-03-28T08:51:06.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hycz004369kj99wu63r3","content":"<p>这个学期应该算是过的最丰富多彩的一个学期。</p>\n<span id=\"more\"></span>\n\n<p>出去打了三场比赛，秦皇岛，银川，西安。有得有失。</p>\n<p>秦皇岛含泪铁首，银川惊险夺金，西安奇妙得铜，这里面的一个个惊险刺激、趣味横生的故事，只有真正经历过才能体会得到吧。</p>\n<p>在期末考试来临前的两周里，完成了两门课程设计以及五门课程的自学，希望能够得到一个好成绩。</p>\n<h2 id=\"三场比赛\"><a href=\"#三场比赛\" class=\"headerlink\" title=\"三场比赛\"></a>三场比赛</h2><h4 id=\"秦皇岛\"><a href=\"#秦皇岛\" class=\"headerlink\" title=\"秦皇岛\"></a>秦皇岛</h4><p>这是一场CCPC的比赛，可能是我第一次也是最后一次参加CCPC的区域赛了。</p>\n<p>秦皇岛离学校很远，坐了一天一夜的火车，舟车劳顿。</p>\n<p>周六的晚上吃了宾馆楼下的一家饭店，主打鱼头。本着来都来了的消费观，点了一个鱼头，一个炒三丝，还有一个记不得了，也可能是就点了这两个菜。鱼头的吃法是泡馍，鱼头特别大，我第一次见到那么大的鱼头。鱼肉一般，汤汁特别浓郁，不过好像勾的欠有点多，导致泡馍的时候馍没有很洗汤。在我们把鱼肉吃完了之后，店家看见我们鱼头都没打开，给我们说“把鱼头翻开啊，里面才是精华”。打开一看，果然，里面都是一些软糯的肉，跟鱼身子上的肉完全不一样，非常的鲜，要不是店家提醒，我们可能就要错过这美食了。炒三丝里面有一个是海参丝，这也是我第一次吃海参，口感Q弹，但是没什么自己味道，都是汤汁的味道。</p>\n<p>比赛当天有点炸裂，签到题挂了一次，一道 tarjan 的裸题因为没学过想了很久，因此一道比较简单的 DP 很久之后才看到。决策失误，不然应该不至于成绩这么差。</p>\n<p>比赛结束之后去了心心念念的海边，光着脚踩水踩沙子，感受着海浪扑到自己的腿上，感受着脚底的沙子随着海水一起流走。所有的失意也一起流走了，剩下了金子一样的坚韧。</p>\n<h4 id=\"银川\"><a href=\"#银川\" class=\"headerlink\" title=\"银川\"></a>银川</h4><p>由于银川网赛接二连三的出现问题，很多高校都拒绝参加现场赛，因此给了很多弱校偷鸡的机会，比如我校。</p>\n<p>银川那可是相当我远了，火车又是咣当咣当不停的运行了近乎一天的时间。不过幸好这次去的人比较多，路上也不是很落寞。透过火车的窗户，看到了戈壁滩上的落日。</p>\n<p>说是银川，实际上比赛是在石嘴山举办的。按照惯例周六去大吃了一顿，吃的是当地一个比较出名的羊肉店，确实很好吃。除了羊肉之外，还有一个花茶特别的好喝。</p>\n<p>比赛前夕 q 神熬夜补锅，才使得现场赛顺顺利利的进行。</p>\n<p>比赛题目确实简单，前40金，我们第四十。</p>\n<p>然后就愉快的返程了。</p>\n<h4 id=\"西安\"><a href=\"#西安\" class=\"headerlink\" title=\"西安\"></a>西安</h4><p>EC 正好和四六级在同一个周末，只能周六考四六级，晚上坐一夜火车去西安，然后早上正好到赛场直接开始比赛，直接就开始比赛了。</p>\n<p>题很难，二十多分钟签上到，然后挂机了快三个小时才写出第二道题。第三道题比赛前十几分钟才交上第一发，然后 TLE 了，发现是结构体里写了个 vector ，赶紧把 vector 提出来，改到结束前20s才改好，提交，返回了 too late，很绝望。这个时候大屏幕上时间显示还有 20s ，但是比赛却已经结束了。</p>\n<p>学弟们三题拿到了铜，于是一起去领奖。颁发铜奖的时候突然听到了我们的队名，原来是重测了还通过了。惊喜。</p>\n<h2 id=\"期末\"><a href=\"#期末\" class=\"headerlink\" title=\"期末\"></a>期末</h2><p>这个学期没有怎么上课，能逃的课都逃了。就导致期末考试很难过。还有两篇课程设计是真的麻烦。拼命搞了两个星期总算是复习了个差不多，课设也做好了。等着出成绩。</p>\n<h4 id=\"2020-1-19-update\"><a href=\"#2020-1-19-update\" class=\"headerlink\" title=\"2020-1-19 update:\"></a>2020-1-19 update:</h4><p>成绩都出来了，有几科分数十分不科学，低的就离谱，不知道这些老师怎么想的。</p>\n<p>总的来说还可以，绩点3.35，总评可算进前50了。</p>\n<h5 id=\"Thumbnail-by-Roman-Kraft-on-Unsplash\"><a href=\"#Thumbnail-by-Roman-Kraft-on-Unsplash\" class=\"headerlink\" title=\"Thumbnail by Roman Kraft on Unsplash\"></a>Thumbnail by <a href=\"https://unsplash.com/@romankraft?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Roman Kraft</a> on <a href=\"https://unsplash.com/s/photos/information?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></h5>","site":{"data":{}},"excerpt":"<p>这个学期应该算是过的最丰富多彩的一个学期。</p>","more":"<p>出去打了三场比赛，秦皇岛，银川，西安。有得有失。</p>\n<p>秦皇岛含泪铁首，银川惊险夺金，西安奇妙得铜，这里面的一个个惊险刺激、趣味横生的故事，只有真正经历过才能体会得到吧。</p>\n<p>在期末考试来临前的两周里，完成了两门课程设计以及五门课程的自学，希望能够得到一个好成绩。</p>\n<h2 id=\"三场比赛\"><a href=\"#三场比赛\" class=\"headerlink\" title=\"三场比赛\"></a>三场比赛</h2><h4 id=\"秦皇岛\"><a href=\"#秦皇岛\" class=\"headerlink\" title=\"秦皇岛\"></a>秦皇岛</h4><p>这是一场CCPC的比赛，可能是我第一次也是最后一次参加CCPC的区域赛了。</p>\n<p>秦皇岛离学校很远，坐了一天一夜的火车，舟车劳顿。</p>\n<p>周六的晚上吃了宾馆楼下的一家饭店，主打鱼头。本着来都来了的消费观，点了一个鱼头，一个炒三丝，还有一个记不得了，也可能是就点了这两个菜。鱼头的吃法是泡馍，鱼头特别大，我第一次见到那么大的鱼头。鱼肉一般，汤汁特别浓郁，不过好像勾的欠有点多，导致泡馍的时候馍没有很洗汤。在我们把鱼肉吃完了之后，店家看见我们鱼头都没打开，给我们说“把鱼头翻开啊，里面才是精华”。打开一看，果然，里面都是一些软糯的肉，跟鱼身子上的肉完全不一样，非常的鲜，要不是店家提醒，我们可能就要错过这美食了。炒三丝里面有一个是海参丝，这也是我第一次吃海参，口感Q弹，但是没什么自己味道，都是汤汁的味道。</p>\n<p>比赛当天有点炸裂，签到题挂了一次，一道 tarjan 的裸题因为没学过想了很久，因此一道比较简单的 DP 很久之后才看到。决策失误，不然应该不至于成绩这么差。</p>\n<p>比赛结束之后去了心心念念的海边，光着脚踩水踩沙子，感受着海浪扑到自己的腿上，感受着脚底的沙子随着海水一起流走。所有的失意也一起流走了，剩下了金子一样的坚韧。</p>\n<h4 id=\"银川\"><a href=\"#银川\" class=\"headerlink\" title=\"银川\"></a>银川</h4><p>由于银川网赛接二连三的出现问题，很多高校都拒绝参加现场赛，因此给了很多弱校偷鸡的机会，比如我校。</p>\n<p>银川那可是相当我远了，火车又是咣当咣当不停的运行了近乎一天的时间。不过幸好这次去的人比较多，路上也不是很落寞。透过火车的窗户，看到了戈壁滩上的落日。</p>\n<p>说是银川，实际上比赛是在石嘴山举办的。按照惯例周六去大吃了一顿，吃的是当地一个比较出名的羊肉店，确实很好吃。除了羊肉之外，还有一个花茶特别的好喝。</p>\n<p>比赛前夕 q 神熬夜补锅，才使得现场赛顺顺利利的进行。</p>\n<p>比赛题目确实简单，前40金，我们第四十。</p>\n<p>然后就愉快的返程了。</p>\n<h4 id=\"西安\"><a href=\"#西安\" class=\"headerlink\" title=\"西安\"></a>西安</h4><p>EC 正好和四六级在同一个周末，只能周六考四六级，晚上坐一夜火车去西安，然后早上正好到赛场直接开始比赛，直接就开始比赛了。</p>\n<p>题很难，二十多分钟签上到，然后挂机了快三个小时才写出第二道题。第三道题比赛前十几分钟才交上第一发，然后 TLE 了，发现是结构体里写了个 vector ，赶紧把 vector 提出来，改到结束前20s才改好，提交，返回了 too late，很绝望。这个时候大屏幕上时间显示还有 20s ，但是比赛却已经结束了。</p>\n<p>学弟们三题拿到了铜，于是一起去领奖。颁发铜奖的时候突然听到了我们的队名，原来是重测了还通过了。惊喜。</p>\n<h2 id=\"期末\"><a href=\"#期末\" class=\"headerlink\" title=\"期末\"></a>期末</h2><p>这个学期没有怎么上课，能逃的课都逃了。就导致期末考试很难过。还有两篇课程设计是真的麻烦。拼命搞了两个星期总算是复习了个差不多，课设也做好了。等着出成绩。</p>\n<h4 id=\"2020-1-19-update\"><a href=\"#2020-1-19-update\" class=\"headerlink\" title=\"2020-1-19 update:\"></a>2020-1-19 update:</h4><p>成绩都出来了，有几科分数十分不科学，低的就离谱，不知道这些老师怎么想的。</p>\n<p>总的来说还可以，绩点3.35，总评可算进前50了。</p>\n<h5 id=\"Thumbnail-by-Roman-Kraft-on-Unsplash\"><a href=\"#Thumbnail-by-Roman-Kraft-on-Unsplash\" class=\"headerlink\" title=\"Thumbnail by Roman Kraft on Unsplash\"></a>Thumbnail by <a href=\"https://unsplash.com/@romankraft?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Roman Kraft</a> on <a href=\"https://unsplash.com/s/photos/information?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a></h5>"},{"title":"博客迁移","cover":"/gallery/cover/gitpage.png","thumbnail":"/gallery/cover/gitpage.png","date":"2021-04-25T13:39:02.000Z","_content":"\n白嫖的阿里云服务器今年七月份就要到期了，又白嫖了两年的腾讯云，于是想着把自己的博客迁移到腾讯云上。\n\n之前在阿里云上部署`hexo`博客的时候什么都不懂，是一篇篇教程试出来的。这次在部署写一份详细一点的教程记录一下部署过程。\n\n<!--more-->\n\n# 原理\n\n我们写博客用的是`markdown`格式，使用`nodejs`管理`hexo`，通过`hexo`渲染成`html`格式的静态网页，然后通过`git`将静态网页推送到`linux`服务器上，并用`nginx`驱动网页，然后就可以通过`IP`地址访问我们的博客啦，如果需要的话可以做一下域名解析。\n\n# 需要的部件\n\n## 客户端\n\n~~~shell\n$ node -v\nv13.14.0\n$ hexo version\nhexo: 5.4.0\nhexo-cli: 4.2.0\n~~~\n\n## 服务器端\n\n~~~shell\n$ nginx -v\nnginx version: nginx/1.14.0\n~~~\n\n# 配置\n\n## 客户端\n\n在`hexo`博客的`__config.yml`中添加以下内容：\n\n~~~yaml\ndeploy:\n  type: git\n  repo: 'yourUsername@yourIP:yourRepoPath'\n  branch: master\n  message: '爷爷奶奶你关注的博主更新啦！'\n~~~\n\n## 服务器端\n\n### 创建git用户\n\n`git`用户专门用于管理`hexo`博客。\n\n~~~shell\n$ useradd -m git # -m 参数可以为git用户创建一个/home/git 文件夹\n~~~\n\n### 创建git私有repo\n\n用于与客户端连接。\n\n~~~shell\n$ git init --bare hexo_blog # hexo_blog 可以替换成任何名称，但是注意⚠️__config.yml文件中的yourRepoPath\n~~~\n\n### 创建post-receive\n\n⚠️该文件用于在上传时更新文件。\n\n~~~shell\n$ mkdir /home/git/hexo_blog/hooks/post-receive\n~~~\n\n写入如下内容：\n\n~~~shell\n#！/bin/sh\ngit --work-tree=/usr/share/nginx/html/blog --git-dir=/home/git/hexo_blog checkout -f\n# /usr/share/nginx/html/blog 可以修改为你想要存放静态网页的文件夹\n# /home/git/hexo_blog 注意要和你的上面👆的文件名同步\n~~~\n\n为`post-receive`添加执行权限，否则在执行`hexo d`指令时，`post-receive`无法执行。\n\n另外需要将`--work-tree`文件的拥有者修改为`git`\n\n~~~shell\n$ chmod +x /home/git/hexo_blog/hooks/post-receive\n$ chown -R git:git /usr/share/nginx/html/blog \n~~~\n\n### 修改nginx配置信息\n\n修改`/etc/nginx/nginx.conf`\n\n~~~shell\n$ sudo vim /etc/nginx/nginx.conf\n~~~\n\n写入如下内容：\n\n~~~yaml\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  yourDomainName;\n        # 修改为你对应的文件名\n        root         /usr/share/nginx/html/blog;\n\n        return 301 https://$server_name$request_uri;\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }    # Settings for a TLS enabled server.\n    #\n    server {\n        listen       443 ssl;\n        listen       [::]:443 ssl;\n        server_name  yourDomainName;\n        # 修改为你对应的文件名\n        root         /usr/share/nginx/html/blog;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n\n    }\n}\n~~~\n\n验证`nginx.conf`配置是否有误：\n\n~~~shell\n$ sudo nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n~~~\n\n### 启动nginx服务\n\n~~~shell\n$ sudo service nginx start\n$ sudo service nginx restart # 重启命令\n~~~\n\n# 推送博客\n\n在客户端的`hexo`文件夹内：\n\n~~~shell\n$ hexo clean && hexo g && hexo d\n# 静态网页文件生成之后，输入服务器密码\n~~~\n\n然后在`yourIP:80`即可访问你的博客啦。","source":"_posts/博客迁移.md","raw":"---\ntitle: 博客迁移\ncover: /gallery/cover/gitpage.png\nthumbnail: /gallery/cover/gitpage.png\ndate: 2021-04-25 21:39:02\ntags:\n\t- Hexo\n\t- Nginx\ncategories:\n\t- 随笔\n---\n\n白嫖的阿里云服务器今年七月份就要到期了，又白嫖了两年的腾讯云，于是想着把自己的博客迁移到腾讯云上。\n\n之前在阿里云上部署`hexo`博客的时候什么都不懂，是一篇篇教程试出来的。这次在部署写一份详细一点的教程记录一下部署过程。\n\n<!--more-->\n\n# 原理\n\n我们写博客用的是`markdown`格式，使用`nodejs`管理`hexo`，通过`hexo`渲染成`html`格式的静态网页，然后通过`git`将静态网页推送到`linux`服务器上，并用`nginx`驱动网页，然后就可以通过`IP`地址访问我们的博客啦，如果需要的话可以做一下域名解析。\n\n# 需要的部件\n\n## 客户端\n\n~~~shell\n$ node -v\nv13.14.0\n$ hexo version\nhexo: 5.4.0\nhexo-cli: 4.2.0\n~~~\n\n## 服务器端\n\n~~~shell\n$ nginx -v\nnginx version: nginx/1.14.0\n~~~\n\n# 配置\n\n## 客户端\n\n在`hexo`博客的`__config.yml`中添加以下内容：\n\n~~~yaml\ndeploy:\n  type: git\n  repo: 'yourUsername@yourIP:yourRepoPath'\n  branch: master\n  message: '爷爷奶奶你关注的博主更新啦！'\n~~~\n\n## 服务器端\n\n### 创建git用户\n\n`git`用户专门用于管理`hexo`博客。\n\n~~~shell\n$ useradd -m git # -m 参数可以为git用户创建一个/home/git 文件夹\n~~~\n\n### 创建git私有repo\n\n用于与客户端连接。\n\n~~~shell\n$ git init --bare hexo_blog # hexo_blog 可以替换成任何名称，但是注意⚠️__config.yml文件中的yourRepoPath\n~~~\n\n### 创建post-receive\n\n⚠️该文件用于在上传时更新文件。\n\n~~~shell\n$ mkdir /home/git/hexo_blog/hooks/post-receive\n~~~\n\n写入如下内容：\n\n~~~shell\n#！/bin/sh\ngit --work-tree=/usr/share/nginx/html/blog --git-dir=/home/git/hexo_blog checkout -f\n# /usr/share/nginx/html/blog 可以修改为你想要存放静态网页的文件夹\n# /home/git/hexo_blog 注意要和你的上面👆的文件名同步\n~~~\n\n为`post-receive`添加执行权限，否则在执行`hexo d`指令时，`post-receive`无法执行。\n\n另外需要将`--work-tree`文件的拥有者修改为`git`\n\n~~~shell\n$ chmod +x /home/git/hexo_blog/hooks/post-receive\n$ chown -R git:git /usr/share/nginx/html/blog \n~~~\n\n### 修改nginx配置信息\n\n修改`/etc/nginx/nginx.conf`\n\n~~~shell\n$ sudo vim /etc/nginx/nginx.conf\n~~~\n\n写入如下内容：\n\n~~~yaml\n# For more information on configuration, see:\n#   * Official English Documentation: http://nginx.org/en/docs/\n#   * Official Russian Documentation: http://nginx.org/ru/docs/\n\nuser nginx;\nworker_processes auto;\nerror_log /var/log/nginx/error.log;\npid /run/nginx.pid;\n\n# Load dynamic modules. See /usr/share/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n\n    include             /etc/nginx/mime.types;\n    default_type        application/octet-stream;\n\n    # Load modular configuration files from the /etc/nginx/conf.d directory.\n    # See http://nginx.org/en/docs/ngx_core_module.html#include\n    # for more information.\n    include /etc/nginx/conf.d/*.conf;\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  yourDomainName;\n        # 修改为你对应的文件名\n        root         /usr/share/nginx/html/blog;\n\n        return 301 https://$server_name$request_uri;\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }    # Settings for a TLS enabled server.\n    #\n    server {\n        listen       443 ssl;\n        listen       [::]:443 ssl;\n        server_name  yourDomainName;\n        # 修改为你对应的文件名\n        root         /usr/share/nginx/html/blog;\n\n        # Load configuration files for the default server block.\n        include /etc/nginx/default.d/*.conf;\n\n        location / {\n        }\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n\n    }\n}\n~~~\n\n验证`nginx.conf`配置是否有误：\n\n~~~shell\n$ sudo nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n~~~\n\n### 启动nginx服务\n\n~~~shell\n$ sudo service nginx start\n$ sudo service nginx restart # 重启命令\n~~~\n\n# 推送博客\n\n在客户端的`hexo`文件夹内：\n\n~~~shell\n$ hexo clean && hexo g && hexo d\n# 静态网页文件生成之后，输入服务器密码\n~~~\n\n然后在`yourIP:80`即可访问你的博客啦。","slug":"博客迁移","published":1,"updated":"2021-05-05T07:45:20.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyd1004469kjdzenhan1","content":"<p>白嫖的阿里云服务器今年七月份就要到期了，又白嫖了两年的腾讯云，于是想着把自己的博客迁移到腾讯云上。</p>\n<p>之前在阿里云上部署<code>hexo</code>博客的时候什么都不懂，是一篇篇教程试出来的。这次在部署写一份详细一点的教程记录一下部署过程。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>我们写博客用的是<code>markdown</code>格式，使用<code>nodejs</code>管理<code>hexo</code>，通过<code>hexo</code>渲染成<code>html</code>格式的静态网页，然后通过<code>git</code>将静态网页推送到<code>linux</code>服务器上，并用<code>nginx</code>驱动网页，然后就可以通过<code>IP</code>地址访问我们的博客啦，如果需要的话可以做一下域名解析。</p>\n<h1 id=\"需要的部件\"><a href=\"#需要的部件\" class=\"headerlink\" title=\"需要的部件\"></a>需要的部件</h1><h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node -v</span></span><br><span class=\"line\">v13.14.0</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo version</span></span><br><span class=\"line\">hexo: 5.4.0</span><br><span class=\"line\">hexo-cli: 4.2.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> nginx -v</span></span><br><span class=\"line\">nginx version: nginx/1.14.0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"客户端-1\"><a href=\"#客户端-1\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>在<code>hexo</code>博客的<code>__config.yml</code>中添加以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">&#x27;yourUsername@yourIP:yourRepoPath&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">&#x27;爷爷奶奶你关注的博主更新啦！&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务器端-1\"><a href=\"#服务器端-1\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h2><h3 id=\"创建git用户\"><a href=\"#创建git用户\" class=\"headerlink\" title=\"创建git用户\"></a>创建git用户</h3><p><code>git</code>用户专门用于管理<code>hexo</code>博客。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> useradd -m git <span class=\"comment\"># -m 参数可以为git用户创建一个/home/git 文件夹</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建git私有repo\"><a href=\"#创建git私有repo\" class=\"headerlink\" title=\"创建git私有repo\"></a>创建git私有repo</h3><p>用于与客户端连接。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init --bare hexo_blog <span class=\"comment\"># hexo_blog 可以替换成任何名称，但是注意⚠️__config.yml文件中的yourRepoPath</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建post-receive\"><a href=\"#创建post-receive\" class=\"headerlink\" title=\"创建post-receive\"></a>创建post-receive</h3><p>⚠️该文件用于在上传时更新文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir /home/git/hexo_blog/hooks/post-receive</span></span><br></pre></td></tr></table></figure>\n\n<p>写入如下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">！/bin/sh</span></span><br><span class=\"line\">git --work-tree=/usr/share/nginx/html/blog --git-dir=/home/git/hexo_blog checkout -f</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> /usr/share/nginx/html/blog 可以修改为你想要存放静态网页的文件夹</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> /home/git/hexo_blog 注意要和你的上面👆的文件名同步</span></span><br></pre></td></tr></table></figure>\n\n<p>为<code>post-receive</code>添加执行权限，否则在执行<code>hexo d</code>指令时，<code>post-receive</code>无法执行。</p>\n<p>另外需要将<code>--work-tree</code>文件的拥有者修改为<code>git</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> chmod +x /home/git/hexo_blog/hooks/post-receive</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> chown -R git:git /usr/share/nginx/html/blog</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改nginx配置信息\"><a href=\"#修改nginx配置信息\" class=\"headerlink\" title=\"修改nginx配置信息\"></a>修改nginx配置信息</h3><p>修改<code>/etc/nginx/nginx.conf</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo vim /etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>写入如下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For more information on configuration, see:</span></span><br><span class=\"line\"><span class=\"comment\">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class=\"line\"><span class=\"comment\">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">user</span> <span class=\"string\">nginx;</span></span><br><span class=\"line\"><span class=\"string\">worker_processes</span> <span class=\"string\">auto;</span></span><br><span class=\"line\"><span class=\"string\">error_log</span> <span class=\"string\">/var/log/nginx/error.log;</span></span><br><span class=\"line\"><span class=\"string\">pid</span> <span class=\"string\">/run/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span></span><br><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">/usr/share/nginx/modules/*.conf;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">worker_connections</span> <span class=\"number\">1024</span><span class=\"string\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">log_format</span>  <span class=\"string\">main</span>  <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span><span class=\"string\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">access_log</span>  <span class=\"string\">/var/log/nginx/access.log</span>  <span class=\"string\">main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">sendfile</span>            <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"string\">tcp_nopush</span>          <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"string\">tcp_nodelay</span>         <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"string\">keepalive_timeout</span>   <span class=\"number\">65</span><span class=\"string\">;</span></span><br><span class=\"line\">    <span class=\"string\">types_hash_max_size</span> <span class=\"number\">2048</span><span class=\"string\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">include</span>             <span class=\"string\">/etc/nginx/mime.types;</span></span><br><span class=\"line\">    <span class=\"string\">default_type</span>        <span class=\"string\">application/octet-stream;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class=\"line\">    <span class=\"comment\"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class=\"line\">    <span class=\"comment\"># for more information.</span></span><br><span class=\"line\">    <span class=\"string\">include</span> <span class=\"string\">/etc/nginx/conf.d/*.conf;</span></span><br><span class=\"line\">    <span class=\"string\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">listen</span>       <span class=\"number\">80</span> <span class=\"string\">default_server;</span></span><br><span class=\"line\">        <span class=\"string\">listen</span>       [<span class=\"string\">::</span>]<span class=\"string\">:80</span> <span class=\"string\">default_server;</span></span><br><span class=\"line\">        <span class=\"string\">server_name</span>  <span class=\"string\">yourDomainName;</span></span><br><span class=\"line\">        <span class=\"comment\"># 修改为你对应的文件名</span></span><br><span class=\"line\">        <span class=\"string\">root</span>         <span class=\"string\">/usr/share/nginx/html/blog;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"number\">301</span> <span class=\"string\">https://$server_name$request_uri;</span></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        <span class=\"string\">include</span> <span class=\"string\">/etc/nginx/default.d/*.conf;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">error_page</span> <span class=\"number\">404</span> <span class=\"string\">/404.html;</span></span><br><span class=\"line\">            <span class=\"string\">location</span> <span class=\"string\">=</span> <span class=\"string\">/40x.html</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">error_page</span> <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> <span class=\"string\">/50x.html;</span></span><br><span class=\"line\">            <span class=\"string\">location</span> <span class=\"string\">=</span> <span class=\"string\">/50x.html</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    <span class=\"comment\"># Settings for a TLS enabled server.</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"string\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">listen</span>       <span class=\"number\">443</span> <span class=\"string\">ssl;</span></span><br><span class=\"line\">        <span class=\"string\">listen</span>       [<span class=\"string\">::</span>]<span class=\"string\">:443</span> <span class=\"string\">ssl;</span></span><br><span class=\"line\">        <span class=\"string\">server_name</span>  <span class=\"string\">yourDomainName;</span></span><br><span class=\"line\">        <span class=\"comment\"># 修改为你对应的文件名</span></span><br><span class=\"line\">        <span class=\"string\">root</span>         <span class=\"string\">/usr/share/nginx/html/blog;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        <span class=\"string\">include</span> <span class=\"string\">/etc/nginx/default.d/*.conf;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"string\">error_page</span> <span class=\"number\">404</span> <span class=\"string\">/404.html;</span></span><br><span class=\"line\">            <span class=\"string\">location</span> <span class=\"string\">=</span> <span class=\"string\">/40x.html</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">error_page</span> <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> <span class=\"string\">/50x.html;</span></span><br><span class=\"line\">            <span class=\"string\">location</span> <span class=\"string\">=</span> <span class=\"string\">/50x.html</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>验证<code>nginx.conf</code>配置是否有误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo nginx -t</span></span><br><span class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动nginx服务\"><a href=\"#启动nginx服务\" class=\"headerlink\" title=\"启动nginx服务\"></a>启动nginx服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service nginx start</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service nginx restart <span class=\"comment\"># 重启命令</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"推送博客\"><a href=\"#推送博客\" class=\"headerlink\" title=\"推送博客\"></a>推送博客</h1><p>在客户端的<code>hexo</code>文件夹内：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 静态网页文件生成之后，输入服务器密码</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>yourIP:80</code>即可访问你的博客啦。</p>\n","site":{"data":{}},"excerpt":"<p>白嫖的阿里云服务器今年七月份就要到期了，又白嫖了两年的腾讯云，于是想着把自己的博客迁移到腾讯云上。</p>\n<p>之前在阿里云上部署<code>hexo</code>博客的时候什么都不懂，是一篇篇教程试出来的。这次在部署写一份详细一点的教程记录一下部署过程。</p>","more":"<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>我们写博客用的是<code>markdown</code>格式，使用<code>nodejs</code>管理<code>hexo</code>，通过<code>hexo</code>渲染成<code>html</code>格式的静态网页，然后通过<code>git</code>将静态网页推送到<code>linux</code>服务器上，并用<code>nginx</code>驱动网页，然后就可以通过<code>IP</code>地址访问我们的博客啦，如果需要的话可以做一下域名解析。</p>\n<h1 id=\"需要的部件\"><a href=\"#需要的部件\" class=\"headerlink\" title=\"需要的部件\"></a>需要的部件</h1><h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> node -v</span></span><br><span class=\"line\">v13.14.0</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo version</span></span><br><span class=\"line\">hexo: 5.4.0</span><br><span class=\"line\">hexo-cli: 4.2.0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务器端\"><a href=\"#服务器端\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> nginx -v</span></span><br><span class=\"line\">nginx version: nginx/1.14.0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><h2 id=\"客户端-1\"><a href=\"#客户端-1\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p>在<code>hexo</code>博客的<code>__config.yml</code>中添加以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">&#x27;yourUsername@yourIP:yourRepoPath&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">&#x27;爷爷奶奶你关注的博主更新啦！&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务器端-1\"><a href=\"#服务器端-1\" class=\"headerlink\" title=\"服务器端\"></a>服务器端</h2><h3 id=\"创建git用户\"><a href=\"#创建git用户\" class=\"headerlink\" title=\"创建git用户\"></a>创建git用户</h3><p><code>git</code>用户专门用于管理<code>hexo</code>博客。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> useradd -m git <span class=\"comment\"># -m 参数可以为git用户创建一个/home/git 文件夹</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建git私有repo\"><a href=\"#创建git私有repo\" class=\"headerlink\" title=\"创建git私有repo\"></a>创建git私有repo</h3><p>用于与客户端连接。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git init --bare hexo_blog <span class=\"comment\"># hexo_blog 可以替换成任何名称，但是注意⚠️__config.yml文件中的yourRepoPath</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建post-receive\"><a href=\"#创建post-receive\" class=\"headerlink\" title=\"创建post-receive\"></a>创建post-receive</h3><p>⚠️该文件用于在上传时更新文件。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> mkdir /home/git/hexo_blog/hooks/post-receive</span></span><br></pre></td></tr></table></figure>\n\n<p>写入如下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">！/bin/sh</span></span><br><span class=\"line\">git --work-tree=/usr/share/nginx/html/blog --git-dir=/home/git/hexo_blog checkout -f</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> /usr/share/nginx/html/blog 可以修改为你想要存放静态网页的文件夹</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> /home/git/hexo_blog 注意要和你的上面👆的文件名同步</span></span><br></pre></td></tr></table></figure>\n\n<p>为<code>post-receive</code>添加执行权限，否则在执行<code>hexo d</code>指令时，<code>post-receive</code>无法执行。</p>\n<p>另外需要将<code>--work-tree</code>文件的拥有者修改为<code>git</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> chmod +x /home/git/hexo_blog/hooks/post-receive</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> chown -R git:git /usr/share/nginx/html/blog</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改nginx配置信息\"><a href=\"#修改nginx配置信息\" class=\"headerlink\" title=\"修改nginx配置信息\"></a>修改nginx配置信息</h3><p>修改<code>/etc/nginx/nginx.conf</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo vim /etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>写入如下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># For more information on configuration, see:</span></span><br><span class=\"line\"><span class=\"comment\">#   * Official English Documentation: http://nginx.org/en/docs/</span></span><br><span class=\"line\"><span class=\"comment\">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">user</span> <span class=\"string\">nginx;</span></span><br><span class=\"line\"><span class=\"string\">worker_processes</span> <span class=\"string\">auto;</span></span><br><span class=\"line\"><span class=\"string\">error_log</span> <span class=\"string\">/var/log/nginx/error.log;</span></span><br><span class=\"line\"><span class=\"string\">pid</span> <span class=\"string\">/run/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span></span><br><span class=\"line\"><span class=\"string\">include</span> <span class=\"string\">/usr/share/nginx/modules/*.conf;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">worker_connections</span> <span class=\"number\">1024</span><span class=\"string\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">log_format</span>  <span class=\"string\">main</span>  <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span><span class=\"string\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">access_log</span>  <span class=\"string\">/var/log/nginx/access.log</span>  <span class=\"string\">main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">sendfile</span>            <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"string\">tcp_nopush</span>          <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"string\">tcp_nodelay</span>         <span class=\"string\">on;</span></span><br><span class=\"line\">    <span class=\"string\">keepalive_timeout</span>   <span class=\"number\">65</span><span class=\"string\">;</span></span><br><span class=\"line\">    <span class=\"string\">types_hash_max_size</span> <span class=\"number\">2048</span><span class=\"string\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">include</span>             <span class=\"string\">/etc/nginx/mime.types;</span></span><br><span class=\"line\">    <span class=\"string\">default_type</span>        <span class=\"string\">application/octet-stream;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Load modular configuration files from the /etc/nginx/conf.d directory.</span></span><br><span class=\"line\">    <span class=\"comment\"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class=\"line\">    <span class=\"comment\"># for more information.</span></span><br><span class=\"line\">    <span class=\"string\">include</span> <span class=\"string\">/etc/nginx/conf.d/*.conf;</span></span><br><span class=\"line\">    <span class=\"string\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">listen</span>       <span class=\"number\">80</span> <span class=\"string\">default_server;</span></span><br><span class=\"line\">        <span class=\"string\">listen</span>       [<span class=\"string\">::</span>]<span class=\"string\">:80</span> <span class=\"string\">default_server;</span></span><br><span class=\"line\">        <span class=\"string\">server_name</span>  <span class=\"string\">yourDomainName;</span></span><br><span class=\"line\">        <span class=\"comment\"># 修改为你对应的文件名</span></span><br><span class=\"line\">        <span class=\"string\">root</span>         <span class=\"string\">/usr/share/nginx/html/blog;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">return</span> <span class=\"number\">301</span> <span class=\"string\">https://$server_name$request_uri;</span></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        <span class=\"string\">include</span> <span class=\"string\">/etc/nginx/default.d/*.conf;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">error_page</span> <span class=\"number\">404</span> <span class=\"string\">/404.html;</span></span><br><span class=\"line\">            <span class=\"string\">location</span> <span class=\"string\">=</span> <span class=\"string\">/40x.html</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">error_page</span> <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> <span class=\"string\">/50x.html;</span></span><br><span class=\"line\">            <span class=\"string\">location</span> <span class=\"string\">=</span> <span class=\"string\">/50x.html</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;    <span class=\"comment\"># Settings for a TLS enabled server.</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"string\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">listen</span>       <span class=\"number\">443</span> <span class=\"string\">ssl;</span></span><br><span class=\"line\">        <span class=\"string\">listen</span>       [<span class=\"string\">::</span>]<span class=\"string\">:443</span> <span class=\"string\">ssl;</span></span><br><span class=\"line\">        <span class=\"string\">server_name</span>  <span class=\"string\">yourDomainName;</span></span><br><span class=\"line\">        <span class=\"comment\"># 修改为你对应的文件名</span></span><br><span class=\"line\">        <span class=\"string\">root</span>         <span class=\"string\">/usr/share/nginx/html/blog;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Load configuration files for the default server block.</span></span><br><span class=\"line\">        <span class=\"string\">include</span> <span class=\"string\">/etc/nginx/default.d/*.conf;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">location</span> <span class=\"string\">/</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"string\">error_page</span> <span class=\"number\">404</span> <span class=\"string\">/404.html;</span></span><br><span class=\"line\">            <span class=\"string\">location</span> <span class=\"string\">=</span> <span class=\"string\">/40x.html</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">error_page</span> <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> <span class=\"string\">/50x.html;</span></span><br><span class=\"line\">            <span class=\"string\">location</span> <span class=\"string\">=</span> <span class=\"string\">/50x.html</span> &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>验证<code>nginx.conf</code>配置是否有误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo nginx -t</span></span><br><span class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动nginx服务\"><a href=\"#启动nginx服务\" class=\"headerlink\" title=\"启动nginx服务\"></a>启动nginx服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service nginx start</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo service nginx restart <span class=\"comment\"># 重启命令</span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"推送博客\"><a href=\"#推送博客\" class=\"headerlink\" title=\"推送博客\"></a>推送博客</h1><p>在客户端的<code>hexo</code>文件夹内：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 静态网页文件生成之后，输入服务器密码</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在<code>yourIP:80</code>即可访问你的博客啦。</p>"},{"title":"基于word2vec的红楼梦人物关系分析","cover":"/gallery/cover/hlm.png","thumbnail":"/gallery/cover/hlm.png","date":"2021-05-18T09:02:44.000Z","_content":"\nword2vec是Google公司在2013年提出的一种词嵌入算法。使用word2vec算法对词汇进行向量化后，原来的近义词在向量空间中是邻近的，因此word2vec可以很好的保留原来词汇之间的相似性。\n\n<!--more-->\n\n本文使用gensim库实现的word2vec算法，对红楼梦中的人物关系进行分析，得到了许多有趣的结论。\n\n# 获取文本\n\n首先我们需要获取原著的本文文件，并且需要保证文本文件足够「纯净」，可以减少文本处理的工作量。\n\n可以通过爬虫，从http://www.purepen.com获取原始文本。\n\n爬虫代码如下：\n\n~~~python\nimport requests\nimport random\nimport time\nfrom bs4 import BeautifulSoup\n\ndef crawler():\n    '''\n    爬取红楼梦\n    :url\n    :return\n    '''\n    path = 'http://www.purepen.com/hlm/'\n    file = open('./data/红楼梦.txt', 'w+')\n    for page in range(1, 121):\n        url = path + ('000'+str(page))[-3:] + '.htm'\n        print(url)\n        html = requests.get(url)\n        html.encoding = html.apparent_encoding\n        soup = BeautifulSoup(html.text, 'lxml')\n        title = soup.find(align = 'center').text\n        print(title)\n        content = soup.find(face = '宋体').text\n        file.write(title   + '\\t\\n')\n        file.write(content + '\\t\\n')\n        sec = random.randint(0, 3)\n        print(\"Sleep %d sconds.\" % sec)\n        time.sleep(sec)\n\nif __name__ == '__main__':\n    crawler()\n~~~\n\n代码中通过sleep机制简单的避免了被反爬。\n\n# 文本处理\n\n首先需要使用正则表达式将所有的标点符号去掉。红楼梦属于半白话文半文言文的问题，因此其中许多词语分词系统是不能识别的，但是因为我们这次做的只是人物关系，所以只需要把所有的人名写入用户字典就可以保证所有的人名都能被准确地识别出来。\n\n~~~python\ndef segment():\n    start = time.time()\n    content = open('./data/红楼梦.txt', 'r').read()\n    trimed = re.sub(r'[^\\u4e00-\\u9fa5]', ' ', content)\n    jieba.load_userdict('./data/dict.txt')\n    result = ' '.join(jieba.cut(trimed))\n    file = open('./data/cut_result.txt', 'w+')\n    file.write(' '.join(result.split()))\n    cost = time.time() - start\n    print(f\"Segment cost: {cost:.4f}\")\n~~~\n\n按道理应该是要去掉停用词的，不过我不想做，偷个懒。😛\n\n# 模型训练\n\n使用gensim实现的word2vec算法进行向量化，因为文本不是很大，所以向量长度我选择的200，window大小选择的3。\n\n~~~python\ndef train_model():\n    start = time.time()\n    sentencePath = './data/cut_result.txt'\n    modelPath = './data/hlm_model'\n    sentence = word2vec.LineSentence(sentencePath)\n    model = word2vec.Word2Vec(sentence, vector_size=200, window=3)\n    model.save(modelPath)\n    cost = time.time() - start\n    print(f'Word2Vec model training cost: {cost:.4f}')\n~~~\n\n训练起来还是很快的，大概一秒钟就好了。\n\n# PCA降维\n\n因为原始的向量长度太大，所以我们可以先用PCA（主成分分析）将向量降到二维，然后在坐标系中画出来。\n\n~~~python\nfrom gensim.models import word2vec\nfrom sklearn.decomposition import PCA\nfrom matplotlib import pyplot\n\npyplot.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nmodel = word2vec.Word2Vec.load('./data/hlm_model')\n\nallNames = [x.strip('\\n') for x in open('./data/name.txt', 'r').readlines()]\nX, names = [], []\nfor name in allNames:\n    try:\n        X.append(model.wv[name])\n        names.append(name)\n    except:\n        print(\"missed name: \", name)\n\npca = PCA(n_components=2)\nresult = pca.fit_transform(X)\n\npyplot.scatter(result[:, 0], result[:, 1])\nfor i, name in enumerate(names):\n\tpyplot.annotate(name, xy=(result[i, 0], result[i, 1]))\n# pyplot.show()\npyplot.savefig('./data/relation.png', transparent=True)\n~~~\n\n因为word2vec会忽略掉频次比较小的词语，所以我们在获取词向量时需要进行异常捕捉。\n\n让我们看一下效果吧！\n\n![整体图片](/gallery/others/hlm-all.png)\n\n因为名字有点多，整体看起来有点拥挤。我们把焦点放在又下角，可以看到宝黛钗三个人都在，我们放大一下。\n\n![右下角局部](/gallery/others/hlm-part.png)\n\n我们可以看到宝玉和黛玉紧紧挨着一起，宝黛一生吹好吧！\n\n# 最相似分析\n\nword2vec中提供了几个有趣的方法，我们可以用这些方法进一步分析一下人物关系。\n\n代码如下：\n\n~~~python\nfrom gensim.models import word2vec\n\ndef analyse():\n    model = word2vec.Word2Vec.load('./data/hlm_model')\n    print('Nearest 宝玉:',model.wv.most_similar(['宝玉']))\n    print('Nearest 黛玉:',model.wv.most_similar(['黛玉']))\n    print('Nearest 宝钗:',model.wv.most_similar(['宝钗']))\n    print('Nearest 晴雯:',model.wv.most_similar(['晴雯']))\n    print('Nearest 袭人:',model.wv.most_similar(['袭人']))\n    print('Nearest 贾母:',model.wv.most_similar(['贾母']))\n\n    print(model.wv.doesnt_match(u\"贾宝玉 薛宝钗 林黛玉 史湘云\".split()))\n    print(model.wv.doesnt_match(u\"黛玉 元春 探春 迎春 惜春\".split()))\n    print(model.wv.doesnt_match(u\"贾琏 贾政 贾赦 贾敬\".split()))\n\n    print(model.wv.similarity('贾宝玉','林黛玉'))\n    print(model.wv.similarity('林黛玉','薛宝钗'))\n    print(model.wv.similarity('晴雯', '袭人'))\n    \n    print(model.wv.similarity('林黛玉','薛宝钗'))\n    print(model.wv.similarity('林黛玉','宝钗'))\n    print(model.wv.similarity('黛玉','薛宝钗'))\n    print(model.wv.similarity('黛玉','宝钗'))\n\n    who = model.wv['宝玉'] - model.wv['宝钗'] + model.wv['黛玉']\n    print(model.wv.most_similar(positive=[who]))\n    who = model.wv['宝玉'] - model.wv['黛玉'] + model.wv['宝钗']\n    print(model.wv.most_similar(positive=[who]))\n    \nif __name__ == '__main__':\n    analyse()\n~~~\n\n结果如下：\n\n~~~tex\nNearest 宝玉: [('黛玉', 0.9654377102851868), ('袭人', 0.9432756304740906), ('贾琏', 0.9404013156890869), ('紫鹃', 0.9312815070152283), ('晴雯', 0.9278832674026489), ('鸳鸯', 0.9248123168945312), ('湘云', 0.9108842015266418), ('凤姐', 0.9095652103424072), ('宝钗', 0.9087227582931519), ('薛姨妈', 0.9083631634712219)]\nNearest 黛玉: [('宝玉', 0.9654375910758972), ('宝钗', 0.9516232013702393), ('湘云', 0.9490573406219482), ('贾琏', 0.9195422530174255), ('喜不自胜', 0.9156811237335205), ('晴雯', 0.9114517569541931), ('雨村', 0.9069087505340576), ('鸳鸯', 0.9047612547874451), ('紫鹃', 0.9041048884391785), ('杜撰', 0.9008530974388123)]\nNearest 宝钗: [('探春', 0.958204448223114), ('湘云', 0.9580698609352112), ('黛玉', 0.9516231417655945), ('贾琏', 0.9483581185340881), ('惜春', 0.9394745826721191), ('薛姨妈', 0.9329902529716492), ('雨村', 0.9322482943534851), ('杜撰', 0.9264885783195496), ('紫鹃', 0.9231323003768921), ('喜不自胜', 0.9216738939285278)]\nNearest 晴雯: [('紫鹃', 0.9769253730773926), ('袭人', 0.9697536826133728), ('凤姐儿', 0.9683317542076111), ('香菱', 0.9670401215553284), ('鸳鸯', 0.9620832800865173), ('拍手', 0.9574575424194336), ('薛姨妈', 0.956330418586731), ('贾琏', 0.9559655785560608), ('陪笑', 0.9534842371940613), ('湘云', 0.9519651532173157)]\nNearest 袭人: [('紫鹃', 0.9749440550804138), ('晴雯', 0.9697537422180176), ('凤姐儿', 0.9651725888252258), ('鸳鸯', 0.9604008793830872), ('平儿', 0.9592967629432678), ('凤姐', 0.9534151554107666), ('贾琏', 0.9518244862556458), ('薛姨妈', 0.9457788467407227), ('宝玉', 0.9432753920555115), ('香菱', 0.9285346269607544)]\nNearest 贾母: [('王夫人', 0.9712321162223816), ('尤氏', 0.9515039324760437), ('贾珍', 0.9488133192062378), ('贾琏', 0.9456284046173096), ('薛姨妈', 0.937038779258728), ('凤姐', 0.9299778938293457), ('鸳鸯', 0.9244546890258789), ('邢夫人', 0.9219790101051331), ('贾蓉', 0.9125443696975708), ('雪雁', 0.9032955765724182)]\n史湘云\n元春\n贾敬\n0.9830096\n0.9892198\n0.96975374\n0.9892198\n0.6931182\n0.64615595\n0.95162314\n[('宝玉', 0.9627019166946411), ('黛玉', 0.9240608215332031), ('袭人', 0.8599908351898193), ('晴雯', 0.8383870720863342), ('紫鹃', 0.8329888582229614), ('贾琏', 0.8326756954193115), ('鸳鸯', 0.829352080821991), ('湘云', 0.8235012292861938), ('一想', 0.8234348297119141), ('香菱', 0.8150357007980347)]\n[('贾琏', 0.9775873422622681), ('宝钗', 0.964641809463501), ('紫鹃', 0.958747923374176), ('薛姨妈', 0.9540018439292908), ('宝玉', 0.9533487558364868), ('袭人', 0.9529389142990112), ('鸳鸯', 0.9496896266937256), ('凤姐', 0.9492440223693848), ('晴雯', 0.9458354115486145), ('凤姐儿', 0.9457259178161621)]\n~~~\n\n从上面的结果可以看到，宝玉最相似的是黛玉，黛玉最相似的是宝玉，而宝钗最相似的是探春。\n\n并且可以看到「宝玉」和「黛玉」的相似度比「贾宝玉」和「黛玉」的相似度更高，说明在文中前者往往是成对出现的。\n\n另外，我们还得到了两个有趣的式子：\n$$\n宝玉 - 宝钗 + 黛玉 \\approx 宝玉\n$$\n\n$$\n宝玉 - 黛玉 + 宝钗 \\approx 贾琏\n$$\n\n\n\n很有意思😂\n\n","source":"_posts/基于word2vec的红楼梦人物关系分析.md","raw":"---\ntitle: 基于word2vec的红楼梦人物关系分析\ncover: /gallery/cover/hlm.png\nthumbnail: /gallery/cover/hlm.png\ndate: 2021-05-18 17:02:44\ntags:\n  - word2vec\n  - 红楼梦\ncategories:\n  -\tNLP\n---\n\nword2vec是Google公司在2013年提出的一种词嵌入算法。使用word2vec算法对词汇进行向量化后，原来的近义词在向量空间中是邻近的，因此word2vec可以很好的保留原来词汇之间的相似性。\n\n<!--more-->\n\n本文使用gensim库实现的word2vec算法，对红楼梦中的人物关系进行分析，得到了许多有趣的结论。\n\n# 获取文本\n\n首先我们需要获取原著的本文文件，并且需要保证文本文件足够「纯净」，可以减少文本处理的工作量。\n\n可以通过爬虫，从http://www.purepen.com获取原始文本。\n\n爬虫代码如下：\n\n~~~python\nimport requests\nimport random\nimport time\nfrom bs4 import BeautifulSoup\n\ndef crawler():\n    '''\n    爬取红楼梦\n    :url\n    :return\n    '''\n    path = 'http://www.purepen.com/hlm/'\n    file = open('./data/红楼梦.txt', 'w+')\n    for page in range(1, 121):\n        url = path + ('000'+str(page))[-3:] + '.htm'\n        print(url)\n        html = requests.get(url)\n        html.encoding = html.apparent_encoding\n        soup = BeautifulSoup(html.text, 'lxml')\n        title = soup.find(align = 'center').text\n        print(title)\n        content = soup.find(face = '宋体').text\n        file.write(title   + '\\t\\n')\n        file.write(content + '\\t\\n')\n        sec = random.randint(0, 3)\n        print(\"Sleep %d sconds.\" % sec)\n        time.sleep(sec)\n\nif __name__ == '__main__':\n    crawler()\n~~~\n\n代码中通过sleep机制简单的避免了被反爬。\n\n# 文本处理\n\n首先需要使用正则表达式将所有的标点符号去掉。红楼梦属于半白话文半文言文的问题，因此其中许多词语分词系统是不能识别的，但是因为我们这次做的只是人物关系，所以只需要把所有的人名写入用户字典就可以保证所有的人名都能被准确地识别出来。\n\n~~~python\ndef segment():\n    start = time.time()\n    content = open('./data/红楼梦.txt', 'r').read()\n    trimed = re.sub(r'[^\\u4e00-\\u9fa5]', ' ', content)\n    jieba.load_userdict('./data/dict.txt')\n    result = ' '.join(jieba.cut(trimed))\n    file = open('./data/cut_result.txt', 'w+')\n    file.write(' '.join(result.split()))\n    cost = time.time() - start\n    print(f\"Segment cost: {cost:.4f}\")\n~~~\n\n按道理应该是要去掉停用词的，不过我不想做，偷个懒。😛\n\n# 模型训练\n\n使用gensim实现的word2vec算法进行向量化，因为文本不是很大，所以向量长度我选择的200，window大小选择的3。\n\n~~~python\ndef train_model():\n    start = time.time()\n    sentencePath = './data/cut_result.txt'\n    modelPath = './data/hlm_model'\n    sentence = word2vec.LineSentence(sentencePath)\n    model = word2vec.Word2Vec(sentence, vector_size=200, window=3)\n    model.save(modelPath)\n    cost = time.time() - start\n    print(f'Word2Vec model training cost: {cost:.4f}')\n~~~\n\n训练起来还是很快的，大概一秒钟就好了。\n\n# PCA降维\n\n因为原始的向量长度太大，所以我们可以先用PCA（主成分分析）将向量降到二维，然后在坐标系中画出来。\n\n~~~python\nfrom gensim.models import word2vec\nfrom sklearn.decomposition import PCA\nfrom matplotlib import pyplot\n\npyplot.rcParams['font.sans-serif'] = ['Arial Unicode MS']\n\nmodel = word2vec.Word2Vec.load('./data/hlm_model')\n\nallNames = [x.strip('\\n') for x in open('./data/name.txt', 'r').readlines()]\nX, names = [], []\nfor name in allNames:\n    try:\n        X.append(model.wv[name])\n        names.append(name)\n    except:\n        print(\"missed name: \", name)\n\npca = PCA(n_components=2)\nresult = pca.fit_transform(X)\n\npyplot.scatter(result[:, 0], result[:, 1])\nfor i, name in enumerate(names):\n\tpyplot.annotate(name, xy=(result[i, 0], result[i, 1]))\n# pyplot.show()\npyplot.savefig('./data/relation.png', transparent=True)\n~~~\n\n因为word2vec会忽略掉频次比较小的词语，所以我们在获取词向量时需要进行异常捕捉。\n\n让我们看一下效果吧！\n\n![整体图片](/gallery/others/hlm-all.png)\n\n因为名字有点多，整体看起来有点拥挤。我们把焦点放在又下角，可以看到宝黛钗三个人都在，我们放大一下。\n\n![右下角局部](/gallery/others/hlm-part.png)\n\n我们可以看到宝玉和黛玉紧紧挨着一起，宝黛一生吹好吧！\n\n# 最相似分析\n\nword2vec中提供了几个有趣的方法，我们可以用这些方法进一步分析一下人物关系。\n\n代码如下：\n\n~~~python\nfrom gensim.models import word2vec\n\ndef analyse():\n    model = word2vec.Word2Vec.load('./data/hlm_model')\n    print('Nearest 宝玉:',model.wv.most_similar(['宝玉']))\n    print('Nearest 黛玉:',model.wv.most_similar(['黛玉']))\n    print('Nearest 宝钗:',model.wv.most_similar(['宝钗']))\n    print('Nearest 晴雯:',model.wv.most_similar(['晴雯']))\n    print('Nearest 袭人:',model.wv.most_similar(['袭人']))\n    print('Nearest 贾母:',model.wv.most_similar(['贾母']))\n\n    print(model.wv.doesnt_match(u\"贾宝玉 薛宝钗 林黛玉 史湘云\".split()))\n    print(model.wv.doesnt_match(u\"黛玉 元春 探春 迎春 惜春\".split()))\n    print(model.wv.doesnt_match(u\"贾琏 贾政 贾赦 贾敬\".split()))\n\n    print(model.wv.similarity('贾宝玉','林黛玉'))\n    print(model.wv.similarity('林黛玉','薛宝钗'))\n    print(model.wv.similarity('晴雯', '袭人'))\n    \n    print(model.wv.similarity('林黛玉','薛宝钗'))\n    print(model.wv.similarity('林黛玉','宝钗'))\n    print(model.wv.similarity('黛玉','薛宝钗'))\n    print(model.wv.similarity('黛玉','宝钗'))\n\n    who = model.wv['宝玉'] - model.wv['宝钗'] + model.wv['黛玉']\n    print(model.wv.most_similar(positive=[who]))\n    who = model.wv['宝玉'] - model.wv['黛玉'] + model.wv['宝钗']\n    print(model.wv.most_similar(positive=[who]))\n    \nif __name__ == '__main__':\n    analyse()\n~~~\n\n结果如下：\n\n~~~tex\nNearest 宝玉: [('黛玉', 0.9654377102851868), ('袭人', 0.9432756304740906), ('贾琏', 0.9404013156890869), ('紫鹃', 0.9312815070152283), ('晴雯', 0.9278832674026489), ('鸳鸯', 0.9248123168945312), ('湘云', 0.9108842015266418), ('凤姐', 0.9095652103424072), ('宝钗', 0.9087227582931519), ('薛姨妈', 0.9083631634712219)]\nNearest 黛玉: [('宝玉', 0.9654375910758972), ('宝钗', 0.9516232013702393), ('湘云', 0.9490573406219482), ('贾琏', 0.9195422530174255), ('喜不自胜', 0.9156811237335205), ('晴雯', 0.9114517569541931), ('雨村', 0.9069087505340576), ('鸳鸯', 0.9047612547874451), ('紫鹃', 0.9041048884391785), ('杜撰', 0.9008530974388123)]\nNearest 宝钗: [('探春', 0.958204448223114), ('湘云', 0.9580698609352112), ('黛玉', 0.9516231417655945), ('贾琏', 0.9483581185340881), ('惜春', 0.9394745826721191), ('薛姨妈', 0.9329902529716492), ('雨村', 0.9322482943534851), ('杜撰', 0.9264885783195496), ('紫鹃', 0.9231323003768921), ('喜不自胜', 0.9216738939285278)]\nNearest 晴雯: [('紫鹃', 0.9769253730773926), ('袭人', 0.9697536826133728), ('凤姐儿', 0.9683317542076111), ('香菱', 0.9670401215553284), ('鸳鸯', 0.9620832800865173), ('拍手', 0.9574575424194336), ('薛姨妈', 0.956330418586731), ('贾琏', 0.9559655785560608), ('陪笑', 0.9534842371940613), ('湘云', 0.9519651532173157)]\nNearest 袭人: [('紫鹃', 0.9749440550804138), ('晴雯', 0.9697537422180176), ('凤姐儿', 0.9651725888252258), ('鸳鸯', 0.9604008793830872), ('平儿', 0.9592967629432678), ('凤姐', 0.9534151554107666), ('贾琏', 0.9518244862556458), ('薛姨妈', 0.9457788467407227), ('宝玉', 0.9432753920555115), ('香菱', 0.9285346269607544)]\nNearest 贾母: [('王夫人', 0.9712321162223816), ('尤氏', 0.9515039324760437), ('贾珍', 0.9488133192062378), ('贾琏', 0.9456284046173096), ('薛姨妈', 0.937038779258728), ('凤姐', 0.9299778938293457), ('鸳鸯', 0.9244546890258789), ('邢夫人', 0.9219790101051331), ('贾蓉', 0.9125443696975708), ('雪雁', 0.9032955765724182)]\n史湘云\n元春\n贾敬\n0.9830096\n0.9892198\n0.96975374\n0.9892198\n0.6931182\n0.64615595\n0.95162314\n[('宝玉', 0.9627019166946411), ('黛玉', 0.9240608215332031), ('袭人', 0.8599908351898193), ('晴雯', 0.8383870720863342), ('紫鹃', 0.8329888582229614), ('贾琏', 0.8326756954193115), ('鸳鸯', 0.829352080821991), ('湘云', 0.8235012292861938), ('一想', 0.8234348297119141), ('香菱', 0.8150357007980347)]\n[('贾琏', 0.9775873422622681), ('宝钗', 0.964641809463501), ('紫鹃', 0.958747923374176), ('薛姨妈', 0.9540018439292908), ('宝玉', 0.9533487558364868), ('袭人', 0.9529389142990112), ('鸳鸯', 0.9496896266937256), ('凤姐', 0.9492440223693848), ('晴雯', 0.9458354115486145), ('凤姐儿', 0.9457259178161621)]\n~~~\n\n从上面的结果可以看到，宝玉最相似的是黛玉，黛玉最相似的是宝玉，而宝钗最相似的是探春。\n\n并且可以看到「宝玉」和「黛玉」的相似度比「贾宝玉」和「黛玉」的相似度更高，说明在文中前者往往是成对出现的。\n\n另外，我们还得到了两个有趣的式子：\n$$\n宝玉 - 宝钗 + 黛玉 \\approx 宝玉\n$$\n\n$$\n宝玉 - 黛玉 + 宝钗 \\approx 贾琏\n$$\n\n\n\n很有意思😂\n\n","slug":"基于word2vec的红楼梦人物关系分析","published":1,"updated":"2021-05-18T14:21:16.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyd2004669kj7kc1gzed","content":"<p>word2vec是Google公司在2013年提出的一种词嵌入算法。使用word2vec算法对词汇进行向量化后，原来的近义词在向量空间中是邻近的，因此word2vec可以很好的保留原来词汇之间的相似性。</p>\n<span id=\"more\"></span>\n\n<p>本文使用gensim库实现的word2vec算法，对红楼梦中的人物关系进行分析，得到了许多有趣的结论。</p>\n<h1 id=\"获取文本\"><a href=\"#获取文本\" class=\"headerlink\" title=\"获取文本\"></a>获取文本</h1><p>首先我们需要获取原著的本文文件，并且需要保证文本文件足够「纯净」，可以减少文本处理的工作量。</p>\n<p>可以通过爬虫，从<a href=\"http://www.purepen.com获取原始文本。\">http://www.purepen.com获取原始文本。</a></p>\n<p>爬虫代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawler</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    爬取红楼梦</span></span><br><span class=\"line\"><span class=\"string\">    :url</span></span><br><span class=\"line\"><span class=\"string\">    :return</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    path = <span class=\"string\">&#x27;http://www.purepen.com/hlm/&#x27;</span></span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./data/红楼梦.txt&#x27;</span>, <span class=\"string\">&#x27;w+&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">121</span>):</span><br><span class=\"line\">        url = path + (<span class=\"string\">&#x27;000&#x27;</span>+<span class=\"built_in\">str</span>(page))[-<span class=\"number\">3</span>:] + <span class=\"string\">&#x27;.htm&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(url)</span><br><span class=\"line\">        html = requests.get(url)</span><br><span class=\"line\">        html.encoding = html.apparent_encoding</span><br><span class=\"line\">        soup = BeautifulSoup(html.text, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">        title = soup.find(align = <span class=\"string\">&#x27;center&#x27;</span>).text</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(title)</span><br><span class=\"line\">        content = soup.find(face = <span class=\"string\">&#x27;宋体&#x27;</span>).text</span><br><span class=\"line\">        file.write(title   + <span class=\"string\">&#x27;\\t\\n&#x27;</span>)</span><br><span class=\"line\">        file.write(content + <span class=\"string\">&#x27;\\t\\n&#x27;</span>)</span><br><span class=\"line\">        sec = random.randint(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Sleep %d sconds.&quot;</span> % sec)</span><br><span class=\"line\">        time.sleep(sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    crawler()</span><br></pre></td></tr></table></figure>\n\n<p>代码中通过sleep机制简单的避免了被反爬。</p>\n<h1 id=\"文本处理\"><a href=\"#文本处理\" class=\"headerlink\" title=\"文本处理\"></a>文本处理</h1><p>首先需要使用正则表达式将所有的标点符号去掉。红楼梦属于半白话文半文言文的问题，因此其中许多词语分词系统是不能识别的，但是因为我们这次做的只是人物关系，所以只需要把所有的人名写入用户字典就可以保证所有的人名都能被准确地识别出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">segment</span>():</span></span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    content = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./data/红楼梦.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>).read()</span><br><span class=\"line\">    trimed = re.sub(<span class=\"string\">r&#x27;[^\\u4e00-\\u9fa5]&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, content)</span><br><span class=\"line\">    jieba.load_userdict(<span class=\"string\">&#x27;./data/dict.txt&#x27;</span>)</span><br><span class=\"line\">    result = <span class=\"string\">&#x27; &#x27;</span>.join(jieba.cut(trimed))</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./data/cut_result.txt&#x27;</span>, <span class=\"string\">&#x27;w+&#x27;</span>)</span><br><span class=\"line\">    file.write(<span class=\"string\">&#x27; &#x27;</span>.join(result.split()))</span><br><span class=\"line\">    cost = time.time() - start</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Segment cost: <span class=\"subst\">&#123;cost:<span class=\"number\">.4</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>按道理应该是要去掉停用词的，不过我不想做，偷个懒。😛</p>\n<h1 id=\"模型训练\"><a href=\"#模型训练\" class=\"headerlink\" title=\"模型训练\"></a>模型训练</h1><p>使用gensim实现的word2vec算法进行向量化，因为文本不是很大，所以向量长度我选择的200，window大小选择的3。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train_model</span>():</span></span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    sentencePath = <span class=\"string\">&#x27;./data/cut_result.txt&#x27;</span></span><br><span class=\"line\">    modelPath = <span class=\"string\">&#x27;./data/hlm_model&#x27;</span></span><br><span class=\"line\">    sentence = word2vec.LineSentence(sentencePath)</span><br><span class=\"line\">    model = word2vec.Word2Vec(sentence, vector_size=<span class=\"number\">200</span>, window=<span class=\"number\">3</span>)</span><br><span class=\"line\">    model.save(modelPath)</span><br><span class=\"line\">    cost = time.time() - start</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Word2Vec model training cost: <span class=\"subst\">&#123;cost:<span class=\"number\">.4</span>f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>训练起来还是很快的，大概一秒钟就好了。</p>\n<h1 id=\"PCA降维\"><a href=\"#PCA降维\" class=\"headerlink\" title=\"PCA降维\"></a>PCA降维</h1><p>因为原始的向量长度太大，所以我们可以先用PCA（主成分分析）将向量降到二维，然后在坐标系中画出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gensim.models <span class=\"keyword\">import</span> word2vec</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.decomposition <span class=\"keyword\">import</span> PCA</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot</span><br><span class=\"line\"></span><br><span class=\"line\">pyplot.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;Arial Unicode MS&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">model = word2vec.Word2Vec.load(<span class=\"string\">&#x27;./data/hlm_model&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">allNames = [x.strip(<span class=\"string\">&#x27;\\n&#x27;</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./data/name.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>).readlines()]</span><br><span class=\"line\">X, names = [], []</span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> allNames:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        X.append(model.wv[name])</span><br><span class=\"line\">        names.append(name)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;missed name: &quot;</span>, name)</span><br><span class=\"line\"></span><br><span class=\"line\">pca = PCA(n_components=<span class=\"number\">2</span>)</span><br><span class=\"line\">result = pca.fit_transform(X)</span><br><span class=\"line\"></span><br><span class=\"line\">pyplot.scatter(result[:, <span class=\"number\">0</span>], result[:, <span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, name <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(names):</span><br><span class=\"line\">\tpyplot.annotate(name, xy=(result[i, <span class=\"number\">0</span>], result[i, <span class=\"number\">1</span>]))</span><br><span class=\"line\"><span class=\"comment\"># pyplot.show()</span></span><br><span class=\"line\">pyplot.savefig(<span class=\"string\">&#x27;./data/relation.png&#x27;</span>, transparent=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>因为word2vec会忽略掉频次比较小的词语，所以我们在获取词向量时需要进行异常捕捉。</p>\n<p>让我们看一下效果吧！</p>\n<p><img src=\"/gallery/others/hlm-all.png\" alt=\"整体图片\"></p>\n<p>因为名字有点多，整体看起来有点拥挤。我们把焦点放在又下角，可以看到宝黛钗三个人都在，我们放大一下。</p>\n<p><img src=\"/gallery/others/hlm-part.png\" alt=\"右下角局部\"></p>\n<p>我们可以看到宝玉和黛玉紧紧挨着一起，宝黛一生吹好吧！</p>\n<h1 id=\"最相似分析\"><a href=\"#最相似分析\" class=\"headerlink\" title=\"最相似分析\"></a>最相似分析</h1><p>word2vec中提供了几个有趣的方法，我们可以用这些方法进一步分析一下人物关系。</p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gensim.models <span class=\"keyword\">import</span> word2vec</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">analyse</span>():</span></span><br><span class=\"line\">    model = word2vec.Word2Vec.load(<span class=\"string\">&#x27;./data/hlm_model&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 宝玉:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;宝玉&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 黛玉:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;黛玉&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 宝钗:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;宝钗&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 晴雯:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;晴雯&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 袭人:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;袭人&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 贾母:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;贾母&#x27;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.doesnt_match(<span class=\"string\">u&quot;贾宝玉 薛宝钗 林黛玉 史湘云&quot;</span>.split()))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.doesnt_match(<span class=\"string\">u&quot;黛玉 元春 探春 迎春 惜春&quot;</span>.split()))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.doesnt_match(<span class=\"string\">u&quot;贾琏 贾政 贾赦 贾敬&quot;</span>.split()))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;贾宝玉&#x27;</span>,<span class=\"string\">&#x27;林黛玉&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;林黛玉&#x27;</span>,<span class=\"string\">&#x27;薛宝钗&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;晴雯&#x27;</span>, <span class=\"string\">&#x27;袭人&#x27;</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;林黛玉&#x27;</span>,<span class=\"string\">&#x27;薛宝钗&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;林黛玉&#x27;</span>,<span class=\"string\">&#x27;宝钗&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;黛玉&#x27;</span>,<span class=\"string\">&#x27;薛宝钗&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;黛玉&#x27;</span>,<span class=\"string\">&#x27;宝钗&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    who = model.wv[<span class=\"string\">&#x27;宝玉&#x27;</span>] - model.wv[<span class=\"string\">&#x27;宝钗&#x27;</span>] + model.wv[<span class=\"string\">&#x27;黛玉&#x27;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.most_similar(positive=[who]))</span><br><span class=\"line\">    who = model.wv[<span class=\"string\">&#x27;宝玉&#x27;</span>] - model.wv[<span class=\"string\">&#x27;黛玉&#x27;</span>] + model.wv[<span class=\"string\">&#x27;宝钗&#x27;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.most_similar(positive=[who]))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    analyse()</span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Nearest 宝玉: [(&#x27;黛玉&#x27;, 0.9654377102851868), (&#x27;袭人&#x27;, 0.9432756304740906), (&#x27;贾琏&#x27;, 0.9404013156890869), (&#x27;紫鹃&#x27;, 0.9312815070152283), (&#x27;晴雯&#x27;, 0.9278832674026489), (&#x27;鸳鸯&#x27;, 0.9248123168945312), (&#x27;湘云&#x27;, 0.9108842015266418), (&#x27;凤姐&#x27;, 0.9095652103424072), (&#x27;宝钗&#x27;, 0.9087227582931519), (&#x27;薛姨妈&#x27;, 0.9083631634712219)]</span><br><span class=\"line\">Nearest 黛玉: [(&#x27;宝玉&#x27;, 0.9654375910758972), (&#x27;宝钗&#x27;, 0.9516232013702393), (&#x27;湘云&#x27;, 0.9490573406219482), (&#x27;贾琏&#x27;, 0.9195422530174255), (&#x27;喜不自胜&#x27;, 0.9156811237335205), (&#x27;晴雯&#x27;, 0.9114517569541931), (&#x27;雨村&#x27;, 0.9069087505340576), (&#x27;鸳鸯&#x27;, 0.9047612547874451), (&#x27;紫鹃&#x27;, 0.9041048884391785), (&#x27;杜撰&#x27;, 0.9008530974388123)]</span><br><span class=\"line\">Nearest 宝钗: [(&#x27;探春&#x27;, 0.958204448223114), (&#x27;湘云&#x27;, 0.9580698609352112), (&#x27;黛玉&#x27;, 0.9516231417655945), (&#x27;贾琏&#x27;, 0.9483581185340881), (&#x27;惜春&#x27;, 0.9394745826721191), (&#x27;薛姨妈&#x27;, 0.9329902529716492), (&#x27;雨村&#x27;, 0.9322482943534851), (&#x27;杜撰&#x27;, 0.9264885783195496), (&#x27;紫鹃&#x27;, 0.9231323003768921), (&#x27;喜不自胜&#x27;, 0.9216738939285278)]</span><br><span class=\"line\">Nearest 晴雯: [(&#x27;紫鹃&#x27;, 0.9769253730773926), (&#x27;袭人&#x27;, 0.9697536826133728), (&#x27;凤姐儿&#x27;, 0.9683317542076111), (&#x27;香菱&#x27;, 0.9670401215553284), (&#x27;鸳鸯&#x27;, 0.9620832800865173), (&#x27;拍手&#x27;, 0.9574575424194336), (&#x27;薛姨妈&#x27;, 0.956330418586731), (&#x27;贾琏&#x27;, 0.9559655785560608), (&#x27;陪笑&#x27;, 0.9534842371940613), (&#x27;湘云&#x27;, 0.9519651532173157)]</span><br><span class=\"line\">Nearest 袭人: [(&#x27;紫鹃&#x27;, 0.9749440550804138), (&#x27;晴雯&#x27;, 0.9697537422180176), (&#x27;凤姐儿&#x27;, 0.9651725888252258), (&#x27;鸳鸯&#x27;, 0.9604008793830872), (&#x27;平儿&#x27;, 0.9592967629432678), (&#x27;凤姐&#x27;, 0.9534151554107666), (&#x27;贾琏&#x27;, 0.9518244862556458), (&#x27;薛姨妈&#x27;, 0.9457788467407227), (&#x27;宝玉&#x27;, 0.9432753920555115), (&#x27;香菱&#x27;, 0.9285346269607544)]</span><br><span class=\"line\">Nearest 贾母: [(&#x27;王夫人&#x27;, 0.9712321162223816), (&#x27;尤氏&#x27;, 0.9515039324760437), (&#x27;贾珍&#x27;, 0.9488133192062378), (&#x27;贾琏&#x27;, 0.9456284046173096), (&#x27;薛姨妈&#x27;, 0.937038779258728), (&#x27;凤姐&#x27;, 0.9299778938293457), (&#x27;鸳鸯&#x27;, 0.9244546890258789), (&#x27;邢夫人&#x27;, 0.9219790101051331), (&#x27;贾蓉&#x27;, 0.9125443696975708), (&#x27;雪雁&#x27;, 0.9032955765724182)]</span><br><span class=\"line\">史湘云</span><br><span class=\"line\">元春</span><br><span class=\"line\">贾敬</span><br><span class=\"line\">0.9830096</span><br><span class=\"line\">0.9892198</span><br><span class=\"line\">0.96975374</span><br><span class=\"line\">0.9892198</span><br><span class=\"line\">0.6931182</span><br><span class=\"line\">0.64615595</span><br><span class=\"line\">0.95162314</span><br><span class=\"line\">[(&#x27;宝玉&#x27;, 0.9627019166946411), (&#x27;黛玉&#x27;, 0.9240608215332031), (&#x27;袭人&#x27;, 0.8599908351898193), (&#x27;晴雯&#x27;, 0.8383870720863342), (&#x27;紫鹃&#x27;, 0.8329888582229614), (&#x27;贾琏&#x27;, 0.8326756954193115), (&#x27;鸳鸯&#x27;, 0.829352080821991), (&#x27;湘云&#x27;, 0.8235012292861938), (&#x27;一想&#x27;, 0.8234348297119141), (&#x27;香菱&#x27;, 0.8150357007980347)]</span><br><span class=\"line\">[(&#x27;贾琏&#x27;, 0.9775873422622681), (&#x27;宝钗&#x27;, 0.964641809463501), (&#x27;紫鹃&#x27;, 0.958747923374176), (&#x27;薛姨妈&#x27;, 0.9540018439292908), (&#x27;宝玉&#x27;, 0.9533487558364868), (&#x27;袭人&#x27;, 0.9529389142990112), (&#x27;鸳鸯&#x27;, 0.9496896266937256), (&#x27;凤姐&#x27;, 0.9492440223693848), (&#x27;晴雯&#x27;, 0.9458354115486145), (&#x27;凤姐儿&#x27;, 0.9457259178161621)]</span><br></pre></td></tr></table></figure>\n\n<p>从上面的结果可以看到，宝玉最相似的是黛玉，黛玉最相似的是宝玉，而宝钗最相似的是探春。</p>\n<p>并且可以看到「宝玉」和「黛玉」的相似度比「贾宝玉」和「黛玉」的相似度更高，说明在文中前者往往是成对出现的。</p>\n<p>另外，我们还得到了两个有趣的式子：<br>$$<br>宝玉 - 宝钗 + 黛玉 \\approx 宝玉<br>$$</p>\n<p>$$<br>宝玉 - 黛玉 + 宝钗 \\approx 贾琏<br>$$</p>\n<p>很有意思😂</p>\n","site":{"data":{}},"excerpt":"<p>word2vec是Google公司在2013年提出的一种词嵌入算法。使用word2vec算法对词汇进行向量化后，原来的近义词在向量空间中是邻近的，因此word2vec可以很好的保留原来词汇之间的相似性。</p>","more":"<p>本文使用gensim库实现的word2vec算法，对红楼梦中的人物关系进行分析，得到了许多有趣的结论。</p>\n<h1 id=\"获取文本\"><a href=\"#获取文本\" class=\"headerlink\" title=\"获取文本\"></a>获取文本</h1><p>首先我们需要获取原著的本文文件，并且需要保证文本文件足够「纯净」，可以减少文本处理的工作量。</p>\n<p>可以通过爬虫，从<a href=\"http://www.purepen.com获取原始文本。\">http://www.purepen.com获取原始文本。</a></p>\n<p>爬虫代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">crawler</span>():</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    爬取红楼梦</span></span><br><span class=\"line\"><span class=\"string\">    :url</span></span><br><span class=\"line\"><span class=\"string\">    :return</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    path = <span class=\"string\">&#x27;http://www.purepen.com/hlm/&#x27;</span></span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./data/红楼梦.txt&#x27;</span>, <span class=\"string\">&#x27;w+&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> page <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">121</span>):</span><br><span class=\"line\">        url = path + (<span class=\"string\">&#x27;000&#x27;</span>+<span class=\"built_in\">str</span>(page))[-<span class=\"number\">3</span>:] + <span class=\"string\">&#x27;.htm&#x27;</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(url)</span><br><span class=\"line\">        html = requests.get(url)</span><br><span class=\"line\">        html.encoding = html.apparent_encoding</span><br><span class=\"line\">        soup = BeautifulSoup(html.text, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">        title = soup.find(align = <span class=\"string\">&#x27;center&#x27;</span>).text</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(title)</span><br><span class=\"line\">        content = soup.find(face = <span class=\"string\">&#x27;宋体&#x27;</span>).text</span><br><span class=\"line\">        file.write(title   + <span class=\"string\">&#x27;\\t\\n&#x27;</span>)</span><br><span class=\"line\">        file.write(content + <span class=\"string\">&#x27;\\t\\n&#x27;</span>)</span><br><span class=\"line\">        sec = random.randint(<span class=\"number\">0</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Sleep %d sconds.&quot;</span> % sec)</span><br><span class=\"line\">        time.sleep(sec)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    crawler()</span><br></pre></td></tr></table></figure>\n\n<p>代码中通过sleep机制简单的避免了被反爬。</p>\n<h1 id=\"文本处理\"><a href=\"#文本处理\" class=\"headerlink\" title=\"文本处理\"></a>文本处理</h1><p>首先需要使用正则表达式将所有的标点符号去掉。红楼梦属于半白话文半文言文的问题，因此其中许多词语分词系统是不能识别的，但是因为我们这次做的只是人物关系，所以只需要把所有的人名写入用户字典就可以保证所有的人名都能被准确地识别出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">segment</span>():</span></span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    content = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./data/红楼梦.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>).read()</span><br><span class=\"line\">    trimed = re.sub(<span class=\"string\">r&#x27;[^\\u4e00-\\u9fa5]&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, content)</span><br><span class=\"line\">    jieba.load_userdict(<span class=\"string\">&#x27;./data/dict.txt&#x27;</span>)</span><br><span class=\"line\">    result = <span class=\"string\">&#x27; &#x27;</span>.join(jieba.cut(trimed))</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./data/cut_result.txt&#x27;</span>, <span class=\"string\">&#x27;w+&#x27;</span>)</span><br><span class=\"line\">    file.write(<span class=\"string\">&#x27; &#x27;</span>.join(result.split()))</span><br><span class=\"line\">    cost = time.time() - start</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Segment cost: <span class=\"subst\">&#123;cost:<span class=\"number\">.4</span>f&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>按道理应该是要去掉停用词的，不过我不想做，偷个懒。😛</p>\n<h1 id=\"模型训练\"><a href=\"#模型训练\" class=\"headerlink\" title=\"模型训练\"></a>模型训练</h1><p>使用gensim实现的word2vec算法进行向量化，因为文本不是很大，所以向量长度我选择的200，window大小选择的3。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train_model</span>():</span></span><br><span class=\"line\">    start = time.time()</span><br><span class=\"line\">    sentencePath = <span class=\"string\">&#x27;./data/cut_result.txt&#x27;</span></span><br><span class=\"line\">    modelPath = <span class=\"string\">&#x27;./data/hlm_model&#x27;</span></span><br><span class=\"line\">    sentence = word2vec.LineSentence(sentencePath)</span><br><span class=\"line\">    model = word2vec.Word2Vec(sentence, vector_size=<span class=\"number\">200</span>, window=<span class=\"number\">3</span>)</span><br><span class=\"line\">    model.save(modelPath)</span><br><span class=\"line\">    cost = time.time() - start</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Word2Vec model training cost: <span class=\"subst\">&#123;cost:<span class=\"number\">.4</span>f&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>训练起来还是很快的，大概一秒钟就好了。</p>\n<h1 id=\"PCA降维\"><a href=\"#PCA降维\" class=\"headerlink\" title=\"PCA降维\"></a>PCA降维</h1><p>因为原始的向量长度太大，所以我们可以先用PCA（主成分分析）将向量降到二维，然后在坐标系中画出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gensim.models <span class=\"keyword\">import</span> word2vec</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.decomposition <span class=\"keyword\">import</span> PCA</span><br><span class=\"line\"><span class=\"keyword\">from</span> matplotlib <span class=\"keyword\">import</span> pyplot</span><br><span class=\"line\"></span><br><span class=\"line\">pyplot.rcParams[<span class=\"string\">&#x27;font.sans-serif&#x27;</span>] = [<span class=\"string\">&#x27;Arial Unicode MS&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">model = word2vec.Word2Vec.load(<span class=\"string\">&#x27;./data/hlm_model&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">allNames = [x.strip(<span class=\"string\">&#x27;\\n&#x27;</span>) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;./data/name.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>).readlines()]</span><br><span class=\"line\">X, names = [], []</span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> allNames:</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        X.append(model.wv[name])</span><br><span class=\"line\">        names.append(name)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;missed name: &quot;</span>, name)</span><br><span class=\"line\"></span><br><span class=\"line\">pca = PCA(n_components=<span class=\"number\">2</span>)</span><br><span class=\"line\">result = pca.fit_transform(X)</span><br><span class=\"line\"></span><br><span class=\"line\">pyplot.scatter(result[:, <span class=\"number\">0</span>], result[:, <span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, name <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(names):</span><br><span class=\"line\">\tpyplot.annotate(name, xy=(result[i, <span class=\"number\">0</span>], result[i, <span class=\"number\">1</span>]))</span><br><span class=\"line\"><span class=\"comment\"># pyplot.show()</span></span><br><span class=\"line\">pyplot.savefig(<span class=\"string\">&#x27;./data/relation.png&#x27;</span>, transparent=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n\n<p>因为word2vec会忽略掉频次比较小的词语，所以我们在获取词向量时需要进行异常捕捉。</p>\n<p>让我们看一下效果吧！</p>\n<p><img src=\"/gallery/others/hlm-all.png\" alt=\"整体图片\"></p>\n<p>因为名字有点多，整体看起来有点拥挤。我们把焦点放在又下角，可以看到宝黛钗三个人都在，我们放大一下。</p>\n<p><img src=\"/gallery/others/hlm-part.png\" alt=\"右下角局部\"></p>\n<p>我们可以看到宝玉和黛玉紧紧挨着一起，宝黛一生吹好吧！</p>\n<h1 id=\"最相似分析\"><a href=\"#最相似分析\" class=\"headerlink\" title=\"最相似分析\"></a>最相似分析</h1><p>word2vec中提供了几个有趣的方法，我们可以用这些方法进一步分析一下人物关系。</p>\n<p>代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> gensim.models <span class=\"keyword\">import</span> word2vec</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">analyse</span>():</span></span><br><span class=\"line\">    model = word2vec.Word2Vec.load(<span class=\"string\">&#x27;./data/hlm_model&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 宝玉:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;宝玉&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 黛玉:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;黛玉&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 宝钗:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;宝钗&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 晴雯:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;晴雯&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 袭人:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;袭人&#x27;</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nearest 贾母:&#x27;</span>,model.wv.most_similar([<span class=\"string\">&#x27;贾母&#x27;</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.doesnt_match(<span class=\"string\">u&quot;贾宝玉 薛宝钗 林黛玉 史湘云&quot;</span>.split()))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.doesnt_match(<span class=\"string\">u&quot;黛玉 元春 探春 迎春 惜春&quot;</span>.split()))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.doesnt_match(<span class=\"string\">u&quot;贾琏 贾政 贾赦 贾敬&quot;</span>.split()))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;贾宝玉&#x27;</span>,<span class=\"string\">&#x27;林黛玉&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;林黛玉&#x27;</span>,<span class=\"string\">&#x27;薛宝钗&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;晴雯&#x27;</span>, <span class=\"string\">&#x27;袭人&#x27;</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;林黛玉&#x27;</span>,<span class=\"string\">&#x27;薛宝钗&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;林黛玉&#x27;</span>,<span class=\"string\">&#x27;宝钗&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;黛玉&#x27;</span>,<span class=\"string\">&#x27;薛宝钗&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.similarity(<span class=\"string\">&#x27;黛玉&#x27;</span>,<span class=\"string\">&#x27;宝钗&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    who = model.wv[<span class=\"string\">&#x27;宝玉&#x27;</span>] - model.wv[<span class=\"string\">&#x27;宝钗&#x27;</span>] + model.wv[<span class=\"string\">&#x27;黛玉&#x27;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.most_similar(positive=[who]))</span><br><span class=\"line\">    who = model.wv[<span class=\"string\">&#x27;宝玉&#x27;</span>] - model.wv[<span class=\"string\">&#x27;黛玉&#x27;</span>] + model.wv[<span class=\"string\">&#x27;宝钗&#x27;</span>]</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(model.wv.most_similar(positive=[who]))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    analyse()</span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Nearest 宝玉: [(&#x27;黛玉&#x27;, 0.9654377102851868), (&#x27;袭人&#x27;, 0.9432756304740906), (&#x27;贾琏&#x27;, 0.9404013156890869), (&#x27;紫鹃&#x27;, 0.9312815070152283), (&#x27;晴雯&#x27;, 0.9278832674026489), (&#x27;鸳鸯&#x27;, 0.9248123168945312), (&#x27;湘云&#x27;, 0.9108842015266418), (&#x27;凤姐&#x27;, 0.9095652103424072), (&#x27;宝钗&#x27;, 0.9087227582931519), (&#x27;薛姨妈&#x27;, 0.9083631634712219)]</span><br><span class=\"line\">Nearest 黛玉: [(&#x27;宝玉&#x27;, 0.9654375910758972), (&#x27;宝钗&#x27;, 0.9516232013702393), (&#x27;湘云&#x27;, 0.9490573406219482), (&#x27;贾琏&#x27;, 0.9195422530174255), (&#x27;喜不自胜&#x27;, 0.9156811237335205), (&#x27;晴雯&#x27;, 0.9114517569541931), (&#x27;雨村&#x27;, 0.9069087505340576), (&#x27;鸳鸯&#x27;, 0.9047612547874451), (&#x27;紫鹃&#x27;, 0.9041048884391785), (&#x27;杜撰&#x27;, 0.9008530974388123)]</span><br><span class=\"line\">Nearest 宝钗: [(&#x27;探春&#x27;, 0.958204448223114), (&#x27;湘云&#x27;, 0.9580698609352112), (&#x27;黛玉&#x27;, 0.9516231417655945), (&#x27;贾琏&#x27;, 0.9483581185340881), (&#x27;惜春&#x27;, 0.9394745826721191), (&#x27;薛姨妈&#x27;, 0.9329902529716492), (&#x27;雨村&#x27;, 0.9322482943534851), (&#x27;杜撰&#x27;, 0.9264885783195496), (&#x27;紫鹃&#x27;, 0.9231323003768921), (&#x27;喜不自胜&#x27;, 0.9216738939285278)]</span><br><span class=\"line\">Nearest 晴雯: [(&#x27;紫鹃&#x27;, 0.9769253730773926), (&#x27;袭人&#x27;, 0.9697536826133728), (&#x27;凤姐儿&#x27;, 0.9683317542076111), (&#x27;香菱&#x27;, 0.9670401215553284), (&#x27;鸳鸯&#x27;, 0.9620832800865173), (&#x27;拍手&#x27;, 0.9574575424194336), (&#x27;薛姨妈&#x27;, 0.956330418586731), (&#x27;贾琏&#x27;, 0.9559655785560608), (&#x27;陪笑&#x27;, 0.9534842371940613), (&#x27;湘云&#x27;, 0.9519651532173157)]</span><br><span class=\"line\">Nearest 袭人: [(&#x27;紫鹃&#x27;, 0.9749440550804138), (&#x27;晴雯&#x27;, 0.9697537422180176), (&#x27;凤姐儿&#x27;, 0.9651725888252258), (&#x27;鸳鸯&#x27;, 0.9604008793830872), (&#x27;平儿&#x27;, 0.9592967629432678), (&#x27;凤姐&#x27;, 0.9534151554107666), (&#x27;贾琏&#x27;, 0.9518244862556458), (&#x27;薛姨妈&#x27;, 0.9457788467407227), (&#x27;宝玉&#x27;, 0.9432753920555115), (&#x27;香菱&#x27;, 0.9285346269607544)]</span><br><span class=\"line\">Nearest 贾母: [(&#x27;王夫人&#x27;, 0.9712321162223816), (&#x27;尤氏&#x27;, 0.9515039324760437), (&#x27;贾珍&#x27;, 0.9488133192062378), (&#x27;贾琏&#x27;, 0.9456284046173096), (&#x27;薛姨妈&#x27;, 0.937038779258728), (&#x27;凤姐&#x27;, 0.9299778938293457), (&#x27;鸳鸯&#x27;, 0.9244546890258789), (&#x27;邢夫人&#x27;, 0.9219790101051331), (&#x27;贾蓉&#x27;, 0.9125443696975708), (&#x27;雪雁&#x27;, 0.9032955765724182)]</span><br><span class=\"line\">史湘云</span><br><span class=\"line\">元春</span><br><span class=\"line\">贾敬</span><br><span class=\"line\">0.9830096</span><br><span class=\"line\">0.9892198</span><br><span class=\"line\">0.96975374</span><br><span class=\"line\">0.9892198</span><br><span class=\"line\">0.6931182</span><br><span class=\"line\">0.64615595</span><br><span class=\"line\">0.95162314</span><br><span class=\"line\">[(&#x27;宝玉&#x27;, 0.9627019166946411), (&#x27;黛玉&#x27;, 0.9240608215332031), (&#x27;袭人&#x27;, 0.8599908351898193), (&#x27;晴雯&#x27;, 0.8383870720863342), (&#x27;紫鹃&#x27;, 0.8329888582229614), (&#x27;贾琏&#x27;, 0.8326756954193115), (&#x27;鸳鸯&#x27;, 0.829352080821991), (&#x27;湘云&#x27;, 0.8235012292861938), (&#x27;一想&#x27;, 0.8234348297119141), (&#x27;香菱&#x27;, 0.8150357007980347)]</span><br><span class=\"line\">[(&#x27;贾琏&#x27;, 0.9775873422622681), (&#x27;宝钗&#x27;, 0.964641809463501), (&#x27;紫鹃&#x27;, 0.958747923374176), (&#x27;薛姨妈&#x27;, 0.9540018439292908), (&#x27;宝玉&#x27;, 0.9533487558364868), (&#x27;袭人&#x27;, 0.9529389142990112), (&#x27;鸳鸯&#x27;, 0.9496896266937256), (&#x27;凤姐&#x27;, 0.9492440223693848), (&#x27;晴雯&#x27;, 0.9458354115486145), (&#x27;凤姐儿&#x27;, 0.9457259178161621)]</span><br></pre></td></tr></table></figure>\n\n<p>从上面的结果可以看到，宝玉最相似的是黛玉，黛玉最相似的是宝玉，而宝钗最相似的是探春。</p>\n<p>并且可以看到「宝玉」和「黛玉」的相似度比「贾宝玉」和「黛玉」的相似度更高，说明在文中前者往往是成对出现的。</p>\n<p>另外，我们还得到了两个有趣的式子：<br>$$<br>宝玉 - 宝钗 + 黛玉 \\approx 宝玉<br>$$</p>\n<p>$$<br>宝玉 - 黛玉 + 宝钗 \\approx 贾琏<br>$$</p>\n<p>很有意思😂</p>"},{"title":"基于高德地图 API 的 Web 课程设计","thumbnail":"/gallery/thumbnails/gate-wall.jpg","date":"2019-12-28T05:34:14.000Z","_content":"\n## Web课程设计\n\n说好的考试突然就变成了课程设计，竟然还要写一个多达20页的论文，实在是不知如何是好。\n\nWeb 考试本来应该是最简单的了，想着随便看看就过了，现在可倒好，就算是把我肚子里的东西都倒出来也凑不够20页的论文。\n\n话虽然这样说，不过还是认真的做了一个网页的。主要基于高德地图的开放API，此处给阿里点个赞，高德地图应该是有口皆碑，用过的都知道很好。\n\n页面随便搞了搞，做了一个大色块撞色的设计，感觉还挺好看的。排版就是简单的几个 div 布局。\n\n然后提供了三个小功能，包括经纬度查询，地点联想查询和点击获得经纬度。都是通过 js 和提供的 API 实现的。\n\n[项目演示](http://47.101.66.37:8888/map)\n\n<!--more-->\n\n## HTML 部分\n\n在 head 标签里面引入高德地图的 API 和自己写好的 js 以及 css 文件。\n\nbody 里面有一个项目的名称和简介，然后就是三个显眼的功能方块，对应着三个小功能。下面就是地图本身了，直接调用 API 给出一个默认地址就可以加载了。\n\n第一个功能方块提供了经纬度地图查询，默认为我校的地址。通过输入经纬度，然后点击确认按钮，通过按钮的 onclick 事件连接到一个 js 函数，实现地图查询。\n\n第二个功能方块是最复杂的一个，使用了关键字补全 API，通过检测选择事件来实现地图的重新加载。\n\n第三个功能方块分为两个部分，一个是通过监听 click 事件来实现获取点击处的经纬度，并将其填入 input 标签的内容中。然后复制按钮使用了 DOM 的 execCommand 函数进行复制。\n\n## CSS 部分\n\n地图主题用 container id 标记，通过百分比布局实现多设备自适应。\n\n三个功能方块通过简单的媒体查询实现移动端，PC端的适应布局，个人感觉效果还是挺好的，就是在 iPad 上看有点歪，没有居中，实在是不知道是什么原因。\n\n颜色是在网上找的一套颜色，看着也还行，也可能还有更好看的配色，不过实在是懒得调了，没有太大的意义。\n\n## JAVASCRIPT 部分\n\n三个功能方块都是 js 实现的，效果还是挺好的。工作的挺正常，有一个小 bug 是第二个功能方块在你操作过地图之后可能会失灵，我也不清楚是什么原因。\n\n还有可以提升用户体验的方法，页面刷新前应该保存地图当前的位置，防止刷新之后地图更改，可能会造成用户不必要的麻烦。\n\n## 总结\n\n最后说一说总结吧。整个东西做下来还是挺有意思的，好多功能不知道怎么实现就一直在 google ，看 API 的文档和样例。基本功能实现了之后就是不断的调样式，怎么才能更好看一点。虽然是一个很简单的项目，自己一个人做下来感觉还是很有成就感的。","source":"_posts/webProject-base-on-gaode-map.md","raw":"---\ntitle: 基于高德地图 API 的 Web 课程设计\nthumbnail: /gallery/thumbnails/gate-wall.jpg\ndate: 2019-12-28 13:34:14\ntags: \n    - Web\ncategories: \n---\n\n## Web课程设计\n\n说好的考试突然就变成了课程设计，竟然还要写一个多达20页的论文，实在是不知如何是好。\n\nWeb 考试本来应该是最简单的了，想着随便看看就过了，现在可倒好，就算是把我肚子里的东西都倒出来也凑不够20页的论文。\n\n话虽然这样说，不过还是认真的做了一个网页的。主要基于高德地图的开放API，此处给阿里点个赞，高德地图应该是有口皆碑，用过的都知道很好。\n\n页面随便搞了搞，做了一个大色块撞色的设计，感觉还挺好看的。排版就是简单的几个 div 布局。\n\n然后提供了三个小功能，包括经纬度查询，地点联想查询和点击获得经纬度。都是通过 js 和提供的 API 实现的。\n\n[项目演示](http://47.101.66.37:8888/map)\n\n<!--more-->\n\n## HTML 部分\n\n在 head 标签里面引入高德地图的 API 和自己写好的 js 以及 css 文件。\n\nbody 里面有一个项目的名称和简介，然后就是三个显眼的功能方块，对应着三个小功能。下面就是地图本身了，直接调用 API 给出一个默认地址就可以加载了。\n\n第一个功能方块提供了经纬度地图查询，默认为我校的地址。通过输入经纬度，然后点击确认按钮，通过按钮的 onclick 事件连接到一个 js 函数，实现地图查询。\n\n第二个功能方块是最复杂的一个，使用了关键字补全 API，通过检测选择事件来实现地图的重新加载。\n\n第三个功能方块分为两个部分，一个是通过监听 click 事件来实现获取点击处的经纬度，并将其填入 input 标签的内容中。然后复制按钮使用了 DOM 的 execCommand 函数进行复制。\n\n## CSS 部分\n\n地图主题用 container id 标记，通过百分比布局实现多设备自适应。\n\n三个功能方块通过简单的媒体查询实现移动端，PC端的适应布局，个人感觉效果还是挺好的，就是在 iPad 上看有点歪，没有居中，实在是不知道是什么原因。\n\n颜色是在网上找的一套颜色，看着也还行，也可能还有更好看的配色，不过实在是懒得调了，没有太大的意义。\n\n## JAVASCRIPT 部分\n\n三个功能方块都是 js 实现的，效果还是挺好的。工作的挺正常，有一个小 bug 是第二个功能方块在你操作过地图之后可能会失灵，我也不清楚是什么原因。\n\n还有可以提升用户体验的方法，页面刷新前应该保存地图当前的位置，防止刷新之后地图更改，可能会造成用户不必要的麻烦。\n\n## 总结\n\n最后说一说总结吧。整个东西做下来还是挺有意思的，好多功能不知道怎么实现就一直在 google ，看 API 的文档和样例。基本功能实现了之后就是不断的调样式，怎么才能更好看一点。虽然是一个很简单的项目，自己一个人做下来感觉还是很有成就感的。","slug":"webProject-base-on-gaode-map","published":1,"updated":"2021-03-28T08:50:02.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyd2004869kj2eqm7zpq","content":"<h2 id=\"Web课程设计\"><a href=\"#Web课程设计\" class=\"headerlink\" title=\"Web课程设计\"></a>Web课程设计</h2><p>说好的考试突然就变成了课程设计，竟然还要写一个多达20页的论文，实在是不知如何是好。</p>\n<p>Web 考试本来应该是最简单的了，想着随便看看就过了，现在可倒好，就算是把我肚子里的东西都倒出来也凑不够20页的论文。</p>\n<p>话虽然这样说，不过还是认真的做了一个网页的。主要基于高德地图的开放API，此处给阿里点个赞，高德地图应该是有口皆碑，用过的都知道很好。</p>\n<p>页面随便搞了搞，做了一个大色块撞色的设计，感觉还挺好看的。排版就是简单的几个 div 布局。</p>\n<p>然后提供了三个小功能，包括经纬度查询，地点联想查询和点击获得经纬度。都是通过 js 和提供的 API 实现的。</p>\n<p><a href=\"http://47.101.66.37:8888/map\">项目演示</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"HTML-部分\"><a href=\"#HTML-部分\" class=\"headerlink\" title=\"HTML 部分\"></a>HTML 部分</h2><p>在 head 标签里面引入高德地图的 API 和自己写好的 js 以及 css 文件。</p>\n<p>body 里面有一个项目的名称和简介，然后就是三个显眼的功能方块，对应着三个小功能。下面就是地图本身了，直接调用 API 给出一个默认地址就可以加载了。</p>\n<p>第一个功能方块提供了经纬度地图查询，默认为我校的地址。通过输入经纬度，然后点击确认按钮，通过按钮的 onclick 事件连接到一个 js 函数，实现地图查询。</p>\n<p>第二个功能方块是最复杂的一个，使用了关键字补全 API，通过检测选择事件来实现地图的重新加载。</p>\n<p>第三个功能方块分为两个部分，一个是通过监听 click 事件来实现获取点击处的经纬度，并将其填入 input 标签的内容中。然后复制按钮使用了 DOM 的 execCommand 函数进行复制。</p>\n<h2 id=\"CSS-部分\"><a href=\"#CSS-部分\" class=\"headerlink\" title=\"CSS 部分\"></a>CSS 部分</h2><p>地图主题用 container id 标记，通过百分比布局实现多设备自适应。</p>\n<p>三个功能方块通过简单的媒体查询实现移动端，PC端的适应布局，个人感觉效果还是挺好的，就是在 iPad 上看有点歪，没有居中，实在是不知道是什么原因。</p>\n<p>颜色是在网上找的一套颜色，看着也还行，也可能还有更好看的配色，不过实在是懒得调了，没有太大的意义。</p>\n<h2 id=\"JAVASCRIPT-部分\"><a href=\"#JAVASCRIPT-部分\" class=\"headerlink\" title=\"JAVASCRIPT 部分\"></a>JAVASCRIPT 部分</h2><p>三个功能方块都是 js 实现的，效果还是挺好的。工作的挺正常，有一个小 bug 是第二个功能方块在你操作过地图之后可能会失灵，我也不清楚是什么原因。</p>\n<p>还有可以提升用户体验的方法，页面刷新前应该保存地图当前的位置，防止刷新之后地图更改，可能会造成用户不必要的麻烦。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后说一说总结吧。整个东西做下来还是挺有意思的，好多功能不知道怎么实现就一直在 google ，看 API 的文档和样例。基本功能实现了之后就是不断的调样式，怎么才能更好看一点。虽然是一个很简单的项目，自己一个人做下来感觉还是很有成就感的。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"Web课程设计\"><a href=\"#Web课程设计\" class=\"headerlink\" title=\"Web课程设计\"></a>Web课程设计</h2><p>说好的考试突然就变成了课程设计，竟然还要写一个多达20页的论文，实在是不知如何是好。</p>\n<p>Web 考试本来应该是最简单的了，想着随便看看就过了，现在可倒好，就算是把我肚子里的东西都倒出来也凑不够20页的论文。</p>\n<p>话虽然这样说，不过还是认真的做了一个网页的。主要基于高德地图的开放API，此处给阿里点个赞，高德地图应该是有口皆碑，用过的都知道很好。</p>\n<p>页面随便搞了搞，做了一个大色块撞色的设计，感觉还挺好看的。排版就是简单的几个 div 布局。</p>\n<p>然后提供了三个小功能，包括经纬度查询，地点联想查询和点击获得经纬度。都是通过 js 和提供的 API 实现的。</p>\n<p><a href=\"http://47.101.66.37:8888/map\">项目演示</a></p>","more":"<h2 id=\"HTML-部分\"><a href=\"#HTML-部分\" class=\"headerlink\" title=\"HTML 部分\"></a>HTML 部分</h2><p>在 head 标签里面引入高德地图的 API 和自己写好的 js 以及 css 文件。</p>\n<p>body 里面有一个项目的名称和简介，然后就是三个显眼的功能方块，对应着三个小功能。下面就是地图本身了，直接调用 API 给出一个默认地址就可以加载了。</p>\n<p>第一个功能方块提供了经纬度地图查询，默认为我校的地址。通过输入经纬度，然后点击确认按钮，通过按钮的 onclick 事件连接到一个 js 函数，实现地图查询。</p>\n<p>第二个功能方块是最复杂的一个，使用了关键字补全 API，通过检测选择事件来实现地图的重新加载。</p>\n<p>第三个功能方块分为两个部分，一个是通过监听 click 事件来实现获取点击处的经纬度，并将其填入 input 标签的内容中。然后复制按钮使用了 DOM 的 execCommand 函数进行复制。</p>\n<h2 id=\"CSS-部分\"><a href=\"#CSS-部分\" class=\"headerlink\" title=\"CSS 部分\"></a>CSS 部分</h2><p>地图主题用 container id 标记，通过百分比布局实现多设备自适应。</p>\n<p>三个功能方块通过简单的媒体查询实现移动端，PC端的适应布局，个人感觉效果还是挺好的，就是在 iPad 上看有点歪，没有居中，实在是不知道是什么原因。</p>\n<p>颜色是在网上找的一套颜色，看着也还行，也可能还有更好看的配色，不过实在是懒得调了，没有太大的意义。</p>\n<h2 id=\"JAVASCRIPT-部分\"><a href=\"#JAVASCRIPT-部分\" class=\"headerlink\" title=\"JAVASCRIPT 部分\"></a>JAVASCRIPT 部分</h2><p>三个功能方块都是 js 实现的，效果还是挺好的。工作的挺正常，有一个小 bug 是第二个功能方块在你操作过地图之后可能会失灵，我也不清楚是什么原因。</p>\n<p>还有可以提升用户体验的方法，页面刷新前应该保存地图当前的位置，防止刷新之后地图更改，可能会造成用户不必要的麻烦。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>最后说一说总结吧。整个东西做下来还是挺有意思的，好多功能不知道怎么实现就一直在 google ，看 API 的文档和样例。基本功能实现了之后就是不断的调样式，怎么才能更好看一点。虽然是一个很简单的项目，自己一个人做下来感觉还是很有成就感的。</p>"},{"title":"一个简易的Go Pool的设计与实现","thumbnail":"/gallery/thumbnails/Goroutine.png","date":"2021-02-25T03:23:27.000Z","_content":"\n# Goroutine 的优势和缺陷\n\nGoroutine 是 Go 语言内部实现的高并发协程模型，并且可以通过 Channel 进行快捷便利的通信。\n\n但是也有一些缺陷：一，不支持限制 Goroutine 的数量。二，在运行完毕之后不会立即被GC（Garbage Collection）回收。 \n\n[👉More About Goroutine](https://medium.com/@riteeksrivastava/a-complete-journey-with-goroutines-8472630c7f5cs)\n\n<!--more-->\n\n# Go Pool\n\n![Diagram](/gallery/others/GoPool.png)\n\nPool 中主要包含三种部件：\n\n1. Worker - 实际执行函数\n2.  JobsChan - 将 job 提交给 Worker \n3. TasksChan - 用户将任务提交到 TasksChan，Pool 再将任务提交到 JobsChan。\n\n另外需要定义 Task 结构，至少应该包含需要执行的函数。一个样例如下:\n\n1. fn - 需要执行的函数\n2. submitTime - 提交时间\n3. User - 提交用户\n4. taskId - 任务ID\n5. …\n\n通过Pool，我们可以限制goroutine的数量，并且可以复用goroutine。在一些并发量极大，单个goroutine执行任务并不繁重的情况下，可以节约很多内存。\n\n因为虽然goroutine的初始内存只有2kb，但是如果并发量达到十万、百万级别，内存的消耗也是不容小觑的。当任务并不繁重时，一些goroutine可能被初始化之后，只执行了几行代码就被搁置了，但没有及时的GC。大量的died goroutine不必要地占用了大量内存资源。池化后，可以达到线程复用，从而节约内存。\n\n# Implementation\n\n```go\n// The implementaion of a simple goroutines pool with fixed capacity\n// By dicer 2/25/2021\n\npackage main\n\nimport (\n   \"fmt\"\n   \"time\"\n)\n\n// Define Task\ntype Task struct{\n   fn func() error\n   submitTime time.Time\n   // Alternative property\n   // #user\n   // #taskID\n}\n\n// Return a new task with a function argFn\nfunc NewTask(argFn func() error) *Task {\n   t := Task{\n      fn:         argFn,\n      submitTime: time.Now(),\n   }\n   return &t\n}\n\n// Execute the fn of a Task\nfunc (t *Task) Execute() {\n   t.fn()\n}\n\n// Define Pool\ntype Pool struct {\n   TasksChan chan *Task\n   JobsChan chan *Task\n   Cap uint\n}\n\n// Return a new pool with fixed capacity\nfunc NewPool(cap uint) *Pool {\n   p := Pool{\n      TasksChan: make(chan *Task, cap),\n      JobsChan: make(chan *Task, cap),\n      Cap: cap,\n   }\n   return &p\n}\n\n// Generate a worker entity used as a coroutine\nfunc (p *Pool) Worker(WorkerID int) {\n   // take a task from JobsChan\n   for t := range p.JobsChan {\n      // execute this task\n      t.Execute()\n      // print info\n      fmt.Printf(\"Worker %d has finished a task submited at %v.\\n\", WorkerID, t.submitTime)\n   }\n}\n\n// Run the pool with cap_size worker\nfunc (p *Pool) Run() {\n\n   for i := 0; uint(i) < p.Cap; i++ {\n      go p.Worker(i)\n   }\n\n   for  {\n      p.JobsChan <- <- p.TasksChan\n   }\n   fmt.Println(\"Debug\")\n}\n\n// Test the Pool\nfunc main() {\n   t := NewTask(func() error {\n      _, err := fmt.Println(time.Now())\n      return err\n   })\n\n   p := NewPool(5)\n   go p.Run()\n\n   for {\n      p.TasksChan <- t\n   }\n}\n```\n\n","source":"_posts/一个简易的Go-Pool的设计与实现.md","raw":"---\ntitle: 一个简易的Go Pool的设计与实现\nthumbnail: /gallery/thumbnails/Goroutine.png\ndate: 2021-02-25 11:23:27\ntags: \n   - 并发\n   - 模式设计\n   - Go\ncategories: \n---\n\n# Goroutine 的优势和缺陷\n\nGoroutine 是 Go 语言内部实现的高并发协程模型，并且可以通过 Channel 进行快捷便利的通信。\n\n但是也有一些缺陷：一，不支持限制 Goroutine 的数量。二，在运行完毕之后不会立即被GC（Garbage Collection）回收。 \n\n[👉More About Goroutine](https://medium.com/@riteeksrivastava/a-complete-journey-with-goroutines-8472630c7f5cs)\n\n<!--more-->\n\n# Go Pool\n\n![Diagram](/gallery/others/GoPool.png)\n\nPool 中主要包含三种部件：\n\n1. Worker - 实际执行函数\n2.  JobsChan - 将 job 提交给 Worker \n3. TasksChan - 用户将任务提交到 TasksChan，Pool 再将任务提交到 JobsChan。\n\n另外需要定义 Task 结构，至少应该包含需要执行的函数。一个样例如下:\n\n1. fn - 需要执行的函数\n2. submitTime - 提交时间\n3. User - 提交用户\n4. taskId - 任务ID\n5. …\n\n通过Pool，我们可以限制goroutine的数量，并且可以复用goroutine。在一些并发量极大，单个goroutine执行任务并不繁重的情况下，可以节约很多内存。\n\n因为虽然goroutine的初始内存只有2kb，但是如果并发量达到十万、百万级别，内存的消耗也是不容小觑的。当任务并不繁重时，一些goroutine可能被初始化之后，只执行了几行代码就被搁置了，但没有及时的GC。大量的died goroutine不必要地占用了大量内存资源。池化后，可以达到线程复用，从而节约内存。\n\n# Implementation\n\n```go\n// The implementaion of a simple goroutines pool with fixed capacity\n// By dicer 2/25/2021\n\npackage main\n\nimport (\n   \"fmt\"\n   \"time\"\n)\n\n// Define Task\ntype Task struct{\n   fn func() error\n   submitTime time.Time\n   // Alternative property\n   // #user\n   // #taskID\n}\n\n// Return a new task with a function argFn\nfunc NewTask(argFn func() error) *Task {\n   t := Task{\n      fn:         argFn,\n      submitTime: time.Now(),\n   }\n   return &t\n}\n\n// Execute the fn of a Task\nfunc (t *Task) Execute() {\n   t.fn()\n}\n\n// Define Pool\ntype Pool struct {\n   TasksChan chan *Task\n   JobsChan chan *Task\n   Cap uint\n}\n\n// Return a new pool with fixed capacity\nfunc NewPool(cap uint) *Pool {\n   p := Pool{\n      TasksChan: make(chan *Task, cap),\n      JobsChan: make(chan *Task, cap),\n      Cap: cap,\n   }\n   return &p\n}\n\n// Generate a worker entity used as a coroutine\nfunc (p *Pool) Worker(WorkerID int) {\n   // take a task from JobsChan\n   for t := range p.JobsChan {\n      // execute this task\n      t.Execute()\n      // print info\n      fmt.Printf(\"Worker %d has finished a task submited at %v.\\n\", WorkerID, t.submitTime)\n   }\n}\n\n// Run the pool with cap_size worker\nfunc (p *Pool) Run() {\n\n   for i := 0; uint(i) < p.Cap; i++ {\n      go p.Worker(i)\n   }\n\n   for  {\n      p.JobsChan <- <- p.TasksChan\n   }\n   fmt.Println(\"Debug\")\n}\n\n// Test the Pool\nfunc main() {\n   t := NewTask(func() error {\n      _, err := fmt.Println(time.Now())\n      return err\n   })\n\n   p := NewPool(5)\n   go p.Run()\n\n   for {\n      p.TasksChan <- t\n   }\n}\n```\n\n","slug":"一个简易的Go-Pool的设计与实现","published":1,"updated":"2021-03-28T08:42:32.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyd3004c69kj60e68y0c","content":"<h1 id=\"Goroutine-的优势和缺陷\"><a href=\"#Goroutine-的优势和缺陷\" class=\"headerlink\" title=\"Goroutine 的优势和缺陷\"></a>Goroutine 的优势和缺陷</h1><p>Goroutine 是 Go 语言内部实现的高并发协程模型，并且可以通过 Channel 进行快捷便利的通信。</p>\n<p>但是也有一些缺陷：一，不支持限制 Goroutine 的数量。二，在运行完毕之后不会立即被GC（Garbage Collection）回收。 </p>\n<p><a href=\"https://medium.com/@riteeksrivastava/a-complete-journey-with-goroutines-8472630c7f5cs\">👉More About Goroutine</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Go-Pool\"><a href=\"#Go-Pool\" class=\"headerlink\" title=\"Go Pool\"></a>Go Pool</h1><p><img src=\"/gallery/others/GoPool.png\" alt=\"Diagram\"></p>\n<p>Pool 中主要包含三种部件：</p>\n<ol>\n<li>Worker - 实际执行函数</li>\n<li>JobsChan - 将 job 提交给 Worker </li>\n<li>TasksChan - 用户将任务提交到 TasksChan，Pool 再将任务提交到 JobsChan。</li>\n</ol>\n<p>另外需要定义 Task 结构，至少应该包含需要执行的函数。一个样例如下:</p>\n<ol>\n<li>fn - 需要执行的函数</li>\n<li>submitTime - 提交时间</li>\n<li>User - 提交用户</li>\n<li>taskId - 任务ID</li>\n<li>…</li>\n</ol>\n<p>通过Pool，我们可以限制goroutine的数量，并且可以复用goroutine。在一些并发量极大，单个goroutine执行任务并不繁重的情况下，可以节约很多内存。</p>\n<p>因为虽然goroutine的初始内存只有2kb，但是如果并发量达到十万、百万级别，内存的消耗也是不容小觑的。当任务并不繁重时，一些goroutine可能被初始化之后，只执行了几行代码就被搁置了，但没有及时的GC。大量的died goroutine不必要地占用了大量内存资源。池化后，可以达到线程复用，从而节约内存。</p>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The implementaion of a simple goroutines pool with fixed capacity</span></span><br><span class=\"line\"><span class=\"comment\">// By dicer 2/25/2021</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define Task</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Task <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">   fn <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">error</span></span></span><br><span class=\"line\">   submitTime time.Time</span><br><span class=\"line\">   <span class=\"comment\">// Alternative property</span></span><br><span class=\"line\">   <span class=\"comment\">// #user</span></span><br><span class=\"line\">   <span class=\"comment\">// #taskID</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Return a new task with a function argFn</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewTask</span><span class=\"params\">(argFn <span class=\"keyword\">func</span>()</span> <span class=\"title\">error</span>) *<span class=\"title\">Task</span></span> &#123;</span><br><span class=\"line\">   t := Task&#123;</span><br><span class=\"line\">      fn:         argFn,</span><br><span class=\"line\">      submitTime: time.Now(),</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Execute the fn of a Task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Task)</span> <span class=\"title\">Execute</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   t.fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define Pool</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Pool <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   TasksChan <span class=\"keyword\">chan</span> *Task</span><br><span class=\"line\">   JobsChan <span class=\"keyword\">chan</span> *Task</span><br><span class=\"line\">   Cap <span class=\"keyword\">uint</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Return a new pool with fixed capacity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPool</span><span class=\"params\">(<span class=\"built_in\">cap</span> <span class=\"keyword\">uint</span>)</span> *<span class=\"title\">Pool</span></span> &#123;</span><br><span class=\"line\">   p := Pool&#123;</span><br><span class=\"line\">      TasksChan: <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *Task, <span class=\"built_in\">cap</span>),</span><br><span class=\"line\">      JobsChan: <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *Task, <span class=\"built_in\">cap</span>),</span><br><span class=\"line\">      Cap: <span class=\"built_in\">cap</span>,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generate a worker entity used as a coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Pool)</span> <span class=\"title\">Worker</span><span class=\"params\">(WorkerID <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// take a task from JobsChan</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> t := <span class=\"keyword\">range</span> p.JobsChan &#123;</span><br><span class=\"line\">      <span class=\"comment\">// execute this task</span></span><br><span class=\"line\">      t.Execute()</span><br><span class=\"line\">      <span class=\"comment\">// print info</span></span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">&quot;Worker %d has finished a task submited at %v.\\n&quot;</span>, WorkerID, t.submitTime)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Run the pool with cap_size worker</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Pool)</span> <span class=\"title\">Run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; <span class=\"keyword\">uint</span>(i) &lt; p.Cap; i++ &#123;</span><br><span class=\"line\">      <span class=\"keyword\">go</span> p.Worker(i)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>  &#123;</span><br><span class=\"line\">      p.JobsChan &lt;- &lt;- p.TasksChan</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;Debug&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test the Pool</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   t := NewTask(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">      _, err := fmt.Println(time.Now())</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   p := NewPool(<span class=\"number\">5</span>)</span><br><span class=\"line\">   <span class=\"keyword\">go</span> p.Run()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      p.TasksChan &lt;- t</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h1 id=\"Goroutine-的优势和缺陷\"><a href=\"#Goroutine-的优势和缺陷\" class=\"headerlink\" title=\"Goroutine 的优势和缺陷\"></a>Goroutine 的优势和缺陷</h1><p>Goroutine 是 Go 语言内部实现的高并发协程模型，并且可以通过 Channel 进行快捷便利的通信。</p>\n<p>但是也有一些缺陷：一，不支持限制 Goroutine 的数量。二，在运行完毕之后不会立即被GC（Garbage Collection）回收。 </p>\n<p><a href=\"https://medium.com/@riteeksrivastava/a-complete-journey-with-goroutines-8472630c7f5cs\">👉More About Goroutine</a></p>","more":"<h1 id=\"Go-Pool\"><a href=\"#Go-Pool\" class=\"headerlink\" title=\"Go Pool\"></a>Go Pool</h1><p><img src=\"/gallery/others/GoPool.png\" alt=\"Diagram\"></p>\n<p>Pool 中主要包含三种部件：</p>\n<ol>\n<li>Worker - 实际执行函数</li>\n<li>JobsChan - 将 job 提交给 Worker </li>\n<li>TasksChan - 用户将任务提交到 TasksChan，Pool 再将任务提交到 JobsChan。</li>\n</ol>\n<p>另外需要定义 Task 结构，至少应该包含需要执行的函数。一个样例如下:</p>\n<ol>\n<li>fn - 需要执行的函数</li>\n<li>submitTime - 提交时间</li>\n<li>User - 提交用户</li>\n<li>taskId - 任务ID</li>\n<li>…</li>\n</ol>\n<p>通过Pool，我们可以限制goroutine的数量，并且可以复用goroutine。在一些并发量极大，单个goroutine执行任务并不繁重的情况下，可以节约很多内存。</p>\n<p>因为虽然goroutine的初始内存只有2kb，但是如果并发量达到十万、百万级别，内存的消耗也是不容小觑的。当任务并不繁重时，一些goroutine可能被初始化之后，只执行了几行代码就被搁置了，但没有及时的GC。大量的died goroutine不必要地占用了大量内存资源。池化后，可以达到线程复用，从而节约内存。</p>\n<h1 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h1><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The implementaion of a simple goroutines pool with fixed capacity</span></span><br><span class=\"line\"><span class=\"comment\">// By dicer 2/25/2021</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define Task</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Task <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">   fn <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">error</span></span></span><br><span class=\"line\">   submitTime time.Time</span><br><span class=\"line\">   <span class=\"comment\">// Alternative property</span></span><br><span class=\"line\">   <span class=\"comment\">// #user</span></span><br><span class=\"line\">   <span class=\"comment\">// #taskID</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Return a new task with a function argFn</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewTask</span><span class=\"params\">(argFn <span class=\"keyword\">func</span>()</span> <span class=\"title\">error</span>) *<span class=\"title\">Task</span></span> &#123;</span><br><span class=\"line\">   t := Task&#123;</span><br><span class=\"line\">      fn:         argFn,</span><br><span class=\"line\">      submitTime: time.Now(),</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Execute the fn of a Task</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *Task)</span> <span class=\"title\">Execute</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   t.fn()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Define Pool</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Pool <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   TasksChan <span class=\"keyword\">chan</span> *Task</span><br><span class=\"line\">   JobsChan <span class=\"keyword\">chan</span> *Task</span><br><span class=\"line\">   Cap <span class=\"keyword\">uint</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Return a new pool with fixed capacity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPool</span><span class=\"params\">(<span class=\"built_in\">cap</span> <span class=\"keyword\">uint</span>)</span> *<span class=\"title\">Pool</span></span> &#123;</span><br><span class=\"line\">   p := Pool&#123;</span><br><span class=\"line\">      TasksChan: <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *Task, <span class=\"built_in\">cap</span>),</span><br><span class=\"line\">      JobsChan: <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> *Task, <span class=\"built_in\">cap</span>),</span><br><span class=\"line\">      Cap: <span class=\"built_in\">cap</span>,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &amp;p</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Generate a worker entity used as a coroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Pool)</span> <span class=\"title\">Worker</span><span class=\"params\">(WorkerID <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// take a task from JobsChan</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> t := <span class=\"keyword\">range</span> p.JobsChan &#123;</span><br><span class=\"line\">      <span class=\"comment\">// execute this task</span></span><br><span class=\"line\">      t.Execute()</span><br><span class=\"line\">      <span class=\"comment\">// print info</span></span><br><span class=\"line\">      fmt.Printf(<span class=\"string\">&quot;Worker %d has finished a task submited at %v.\\n&quot;</span>, WorkerID, t.submitTime)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Run the pool with cap_size worker</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p *Pool)</span> <span class=\"title\">Run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; <span class=\"keyword\">uint</span>(i) &lt; p.Cap; i++ &#123;</span><br><span class=\"line\">      <span class=\"keyword\">go</span> p.Worker(i)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span>  &#123;</span><br><span class=\"line\">      p.JobsChan &lt;- &lt;- p.TasksChan</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   fmt.Println(<span class=\"string\">&quot;Debug&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Test the Pool</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   t := NewTask(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">      _, err := fmt.Println(time.Now())</span><br><span class=\"line\">      <span class=\"keyword\">return</span> err</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">   p := NewPool(<span class=\"number\">5</span>)</span><br><span class=\"line\">   <span class=\"keyword\">go</span> p.Run()</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      p.TasksChan &lt;- t</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"考研总结","thumbnail":"/gallery/thumbnails/post-bg-universe.jpg","date":"2021-01-23T06:33:09.000Z","_content":"\n虽然说是考研总结，但其实大概想写一下我去年都做了些什么，做一个年度复盘，其中最重要的就是考研了，占据了去年大概八九个月的时间。\n\n<!--more-->\n\n##  决定考研\n\n大三的人，无非几种选择：考研，考公，工作，出国。\n\n我以前只是纠结是考研还是工作。但是因为一个奇怪的想法：考研没考上还能去工作。说起来也好笑，这句话已经默认了考研就一定考不上，严密的逻辑应该是：考研没考上，还能找工作；考上了，读完研也能找工作；工作的时候也可以考研。因为身边的人的选择和一些信息，最后还是放弃了找工作，选择了考研。\n\n选择其实工作还是考研，其实也没有那么重要，有价值的人在什么地方都可以发挥自己的价值。相比选择，更重要的是坚持。但是选择有很重要，在这个时代，做互联网相关，可以说站在了风口上。\n\n我爱说一句话：尽人事，听天命。就像某地某年的语文作文题目说的一样：成功不只是努力，还有机遇也很重要。蛤曾经说过，自己不知道为什么，就坐在了现在的位子上，“组织上安排好了”\n\n## 一个机遇\n\n大概从二三月份开始初步进入复习吧，这个时候还是寒假，自己也不清楚复习的方法，只是在背单词，然后就是看书。\n\n看书，没错。这段时期疫情很严重，我没有地方去，家里也没有人，只有我自己在家。不知道是什么时候，偶尔打开了微信读书，看到了大刘的三体，鬼使神差的读了起来，上了瘾，三四天读完了三部曲。这是我第一次读长篇，很长很长，接近一百万字的书，但是读的酣畅淋漓。我迷上了书中构建的那个世界。\n\n有人说，世界上有两种人，一种是看过三体的，另一种没有。一本书可以快速打破你和另陌生人的隔阂，只需要几个字词。三体中这样的词很多：二向箔，智子，面壁人，执剑人，黑暗森林法则。不得不佩服大刘的脑洞，一本书中充斥着极致的幻想，而且逻辑严密。\n\n有传言说，大刘是误以为自己得了癌症，以为自己命不久矣，想在临死之前，把自己的巧思都留下了。最后得知是误诊。一个美好的巧合，也可以说是：机遇。为人类文明留下了如此璀璨的书籍。虽然有人说，三体中的许多巧思都可以拆成一本书，够大刘慢慢写一辈子了，但我还是觉得，那绝对抵不上一套三体，流芳百世。\n\n三体之后，就开始读各种各样的书，许多经典：1984、娱乐至死，不算有趣，也不丰富，只是符合这个时代；数学之美、从一到无穷大、上帝掷骰子吗？意外的有趣，引人深思。一只特立独行的猪、活着，名家经典，值得一读，但我觉得富贵的故事并没有多么可怜，只是一个纨绔子弟，散尽家财，幡然悔悟，命运多舛的故事。\n\n另一本大部头就是红楼梦了，看的时候废寝忘食，夜不能寐，辗转反侧。叹书中女子，义气刚节；怜书中女子，难逃时代命运；惜书中女子，终落凡尘。\n\n时常思考读书的意义，其实主要是文学作品，时间长了，书中的内容多已淡忘，读书时的感人肺腑、肝肠寸断也已忘记。只记得只言片语，大致情景。没有什么感觉了。\n\n太久没读书了，最近在忙找工作，之前考研也是忙得没有时间，读研的时候如果科研压力没那么大，还是希望能多读一些书籍。\n\n## 无它，唯手熟而\n\n四五月份是数学的时间，题海战术，一点一点的扣。我就记得自己看了张宇的基础班，刷了两边1800。\n\n这段时间过的很快，每天就只是做题。一杯茶一包烟，一道积分做一天。这话一点都不假，积分不会做是真的很久都做不出来。每天都把自己关在家里，屋子里窗户太小了，不知白天黑夜，不知雨雪风霜。\n\n感觉没能总结点东西，现在想起来，自己数学复习的太没有章法了，无章可循，别人学什么就跟着学什么。缺乏合理的规划，不过那个时候的我，也没有人能给我指点一二。\n\n数学学得慢，忘得可一点都不慢，距离考完试还不到一个月，我已经不知道自己当初学了什么了。痛心疾首。\n\n## 408时间\n\n暑假的重头戏是专业课，另一个150分。408综合科目多、知识点多、考察深入，难度很大。好在数据结构有一点基础，重难点是组成原理。\n\n在知乎上看推荐买了一本CS：APP，不到一百的价格，都说是神书。确实名不虚传，计算机中的数值表示用图表示得清清楚楚，Cache、段页式存储、虚拟内存讲的头头是道，很是受用。\n\n王道四本书看了两遍，真题没做完，只做了十几年的题目，但是因为王道后面的课后题大部分都出自真题，也算是都看过了，也正因为如此，导致我做零几年的真题总觉得在背答案，就不想写了。王道配套的模拟题也好挺好的，主要是题目很新，课后题没有出现过，做起来比较舒服。\n\n现在想想，这四本书确实让我对计算机有了更深刻的理解，但这却只是开始，还有浩如烟海的技术等着我去了解学习。\n\n## 英语学习\n\n英语是伴随考研始终的，单词一直要背，长难句一直要看，文章每天都要读。\n\n可能是因为我英语原来比较差吧，个人感觉英语提升对我的帮助是最大的，英文文章虽然说读起来还是比较费劲，但却没有以前的那种想读都读不懂的感觉了。挺好的。\n\n英语的学习也是伴随一生的。考研只考了读写译，还有听说需要自己学，这两点对交流来说是更重要的。\n\n## 最后\n\n考研让我懂了许多的知识，也磨砺了我的品格。\n\n宝剑锋从磨砺出，梅花香自苦寒来。\n\n一个更好的学位，不是终点，而是新的起点。复试加油。\n\n2021/1/23\n\nDicer，于焦作","source":"_posts/考研总结.md","raw":"---\ntitle: 考研总结\nthumbnail: /gallery/thumbnails/post-bg-universe.jpg\ndate: 2021-01-23 14:33:09\ntags: \n    - 考研\ncategories: \n    - 随笔\n---\n\n虽然说是考研总结，但其实大概想写一下我去年都做了些什么，做一个年度复盘，其中最重要的就是考研了，占据了去年大概八九个月的时间。\n\n<!--more-->\n\n##  决定考研\n\n大三的人，无非几种选择：考研，考公，工作，出国。\n\n我以前只是纠结是考研还是工作。但是因为一个奇怪的想法：考研没考上还能去工作。说起来也好笑，这句话已经默认了考研就一定考不上，严密的逻辑应该是：考研没考上，还能找工作；考上了，读完研也能找工作；工作的时候也可以考研。因为身边的人的选择和一些信息，最后还是放弃了找工作，选择了考研。\n\n选择其实工作还是考研，其实也没有那么重要，有价值的人在什么地方都可以发挥自己的价值。相比选择，更重要的是坚持。但是选择有很重要，在这个时代，做互联网相关，可以说站在了风口上。\n\n我爱说一句话：尽人事，听天命。就像某地某年的语文作文题目说的一样：成功不只是努力，还有机遇也很重要。蛤曾经说过，自己不知道为什么，就坐在了现在的位子上，“组织上安排好了”\n\n## 一个机遇\n\n大概从二三月份开始初步进入复习吧，这个时候还是寒假，自己也不清楚复习的方法，只是在背单词，然后就是看书。\n\n看书，没错。这段时期疫情很严重，我没有地方去，家里也没有人，只有我自己在家。不知道是什么时候，偶尔打开了微信读书，看到了大刘的三体，鬼使神差的读了起来，上了瘾，三四天读完了三部曲。这是我第一次读长篇，很长很长，接近一百万字的书，但是读的酣畅淋漓。我迷上了书中构建的那个世界。\n\n有人说，世界上有两种人，一种是看过三体的，另一种没有。一本书可以快速打破你和另陌生人的隔阂，只需要几个字词。三体中这样的词很多：二向箔，智子，面壁人，执剑人，黑暗森林法则。不得不佩服大刘的脑洞，一本书中充斥着极致的幻想，而且逻辑严密。\n\n有传言说，大刘是误以为自己得了癌症，以为自己命不久矣，想在临死之前，把自己的巧思都留下了。最后得知是误诊。一个美好的巧合，也可以说是：机遇。为人类文明留下了如此璀璨的书籍。虽然有人说，三体中的许多巧思都可以拆成一本书，够大刘慢慢写一辈子了，但我还是觉得，那绝对抵不上一套三体，流芳百世。\n\n三体之后，就开始读各种各样的书，许多经典：1984、娱乐至死，不算有趣，也不丰富，只是符合这个时代；数学之美、从一到无穷大、上帝掷骰子吗？意外的有趣，引人深思。一只特立独行的猪、活着，名家经典，值得一读，但我觉得富贵的故事并没有多么可怜，只是一个纨绔子弟，散尽家财，幡然悔悟，命运多舛的故事。\n\n另一本大部头就是红楼梦了，看的时候废寝忘食，夜不能寐，辗转反侧。叹书中女子，义气刚节；怜书中女子，难逃时代命运；惜书中女子，终落凡尘。\n\n时常思考读书的意义，其实主要是文学作品，时间长了，书中的内容多已淡忘，读书时的感人肺腑、肝肠寸断也已忘记。只记得只言片语，大致情景。没有什么感觉了。\n\n太久没读书了，最近在忙找工作，之前考研也是忙得没有时间，读研的时候如果科研压力没那么大，还是希望能多读一些书籍。\n\n## 无它，唯手熟而\n\n四五月份是数学的时间，题海战术，一点一点的扣。我就记得自己看了张宇的基础班，刷了两边1800。\n\n这段时间过的很快，每天就只是做题。一杯茶一包烟，一道积分做一天。这话一点都不假，积分不会做是真的很久都做不出来。每天都把自己关在家里，屋子里窗户太小了，不知白天黑夜，不知雨雪风霜。\n\n感觉没能总结点东西，现在想起来，自己数学复习的太没有章法了，无章可循，别人学什么就跟着学什么。缺乏合理的规划，不过那个时候的我，也没有人能给我指点一二。\n\n数学学得慢，忘得可一点都不慢，距离考完试还不到一个月，我已经不知道自己当初学了什么了。痛心疾首。\n\n## 408时间\n\n暑假的重头戏是专业课，另一个150分。408综合科目多、知识点多、考察深入，难度很大。好在数据结构有一点基础，重难点是组成原理。\n\n在知乎上看推荐买了一本CS：APP，不到一百的价格，都说是神书。确实名不虚传，计算机中的数值表示用图表示得清清楚楚，Cache、段页式存储、虚拟内存讲的头头是道，很是受用。\n\n王道四本书看了两遍，真题没做完，只做了十几年的题目，但是因为王道后面的课后题大部分都出自真题，也算是都看过了，也正因为如此，导致我做零几年的真题总觉得在背答案，就不想写了。王道配套的模拟题也好挺好的，主要是题目很新，课后题没有出现过，做起来比较舒服。\n\n现在想想，这四本书确实让我对计算机有了更深刻的理解，但这却只是开始，还有浩如烟海的技术等着我去了解学习。\n\n## 英语学习\n\n英语是伴随考研始终的，单词一直要背，长难句一直要看，文章每天都要读。\n\n可能是因为我英语原来比较差吧，个人感觉英语提升对我的帮助是最大的，英文文章虽然说读起来还是比较费劲，但却没有以前的那种想读都读不懂的感觉了。挺好的。\n\n英语的学习也是伴随一生的。考研只考了读写译，还有听说需要自己学，这两点对交流来说是更重要的。\n\n## 最后\n\n考研让我懂了许多的知识，也磨砺了我的品格。\n\n宝剑锋从磨砺出，梅花香自苦寒来。\n\n一个更好的学位，不是终点，而是新的起点。复试加油。\n\n2021/1/23\n\nDicer，于焦作","slug":"考研总结","published":1,"updated":"2021-03-28T08:52:26.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckou5hyd4004e69kjcrdo7rrl","content":"<p>虽然说是考研总结，但其实大概想写一下我去年都做了些什么，做一个年度复盘，其中最重要的就是考研了，占据了去年大概八九个月的时间。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"决定考研\"><a href=\"#决定考研\" class=\"headerlink\" title=\"决定考研\"></a>决定考研</h2><p>大三的人，无非几种选择：考研，考公，工作，出国。</p>\n<p>我以前只是纠结是考研还是工作。但是因为一个奇怪的想法：考研没考上还能去工作。说起来也好笑，这句话已经默认了考研就一定考不上，严密的逻辑应该是：考研没考上，还能找工作；考上了，读完研也能找工作；工作的时候也可以考研。因为身边的人的选择和一些信息，最后还是放弃了找工作，选择了考研。</p>\n<p>选择其实工作还是考研，其实也没有那么重要，有价值的人在什么地方都可以发挥自己的价值。相比选择，更重要的是坚持。但是选择有很重要，在这个时代，做互联网相关，可以说站在了风口上。</p>\n<p>我爱说一句话：尽人事，听天命。就像某地某年的语文作文题目说的一样：成功不只是努力，还有机遇也很重要。蛤曾经说过，自己不知道为什么，就坐在了现在的位子上，“组织上安排好了”</p>\n<h2 id=\"一个机遇\"><a href=\"#一个机遇\" class=\"headerlink\" title=\"一个机遇\"></a>一个机遇</h2><p>大概从二三月份开始初步进入复习吧，这个时候还是寒假，自己也不清楚复习的方法，只是在背单词，然后就是看书。</p>\n<p>看书，没错。这段时期疫情很严重，我没有地方去，家里也没有人，只有我自己在家。不知道是什么时候，偶尔打开了微信读书，看到了大刘的三体，鬼使神差的读了起来，上了瘾，三四天读完了三部曲。这是我第一次读长篇，很长很长，接近一百万字的书，但是读的酣畅淋漓。我迷上了书中构建的那个世界。</p>\n<p>有人说，世界上有两种人，一种是看过三体的，另一种没有。一本书可以快速打破你和另陌生人的隔阂，只需要几个字词。三体中这样的词很多：二向箔，智子，面壁人，执剑人，黑暗森林法则。不得不佩服大刘的脑洞，一本书中充斥着极致的幻想，而且逻辑严密。</p>\n<p>有传言说，大刘是误以为自己得了癌症，以为自己命不久矣，想在临死之前，把自己的巧思都留下了。最后得知是误诊。一个美好的巧合，也可以说是：机遇。为人类文明留下了如此璀璨的书籍。虽然有人说，三体中的许多巧思都可以拆成一本书，够大刘慢慢写一辈子了，但我还是觉得，那绝对抵不上一套三体，流芳百世。</p>\n<p>三体之后，就开始读各种各样的书，许多经典：1984、娱乐至死，不算有趣，也不丰富，只是符合这个时代；数学之美、从一到无穷大、上帝掷骰子吗？意外的有趣，引人深思。一只特立独行的猪、活着，名家经典，值得一读，但我觉得富贵的故事并没有多么可怜，只是一个纨绔子弟，散尽家财，幡然悔悟，命运多舛的故事。</p>\n<p>另一本大部头就是红楼梦了，看的时候废寝忘食，夜不能寐，辗转反侧。叹书中女子，义气刚节；怜书中女子，难逃时代命运；惜书中女子，终落凡尘。</p>\n<p>时常思考读书的意义，其实主要是文学作品，时间长了，书中的内容多已淡忘，读书时的感人肺腑、肝肠寸断也已忘记。只记得只言片语，大致情景。没有什么感觉了。</p>\n<p>太久没读书了，最近在忙找工作，之前考研也是忙得没有时间，读研的时候如果科研压力没那么大，还是希望能多读一些书籍。</p>\n<h2 id=\"无它，唯手熟而\"><a href=\"#无它，唯手熟而\" class=\"headerlink\" title=\"无它，唯手熟而\"></a>无它，唯手熟而</h2><p>四五月份是数学的时间，题海战术，一点一点的扣。我就记得自己看了张宇的基础班，刷了两边1800。</p>\n<p>这段时间过的很快，每天就只是做题。一杯茶一包烟，一道积分做一天。这话一点都不假，积分不会做是真的很久都做不出来。每天都把自己关在家里，屋子里窗户太小了，不知白天黑夜，不知雨雪风霜。</p>\n<p>感觉没能总结点东西，现在想起来，自己数学复习的太没有章法了，无章可循，别人学什么就跟着学什么。缺乏合理的规划，不过那个时候的我，也没有人能给我指点一二。</p>\n<p>数学学得慢，忘得可一点都不慢，距离考完试还不到一个月，我已经不知道自己当初学了什么了。痛心疾首。</p>\n<h2 id=\"408时间\"><a href=\"#408时间\" class=\"headerlink\" title=\"408时间\"></a>408时间</h2><p>暑假的重头戏是专业课，另一个150分。408综合科目多、知识点多、考察深入，难度很大。好在数据结构有一点基础，重难点是组成原理。</p>\n<p>在知乎上看推荐买了一本CS：APP，不到一百的价格，都说是神书。确实名不虚传，计算机中的数值表示用图表示得清清楚楚，Cache、段页式存储、虚拟内存讲的头头是道，很是受用。</p>\n<p>王道四本书看了两遍，真题没做完，只做了十几年的题目，但是因为王道后面的课后题大部分都出自真题，也算是都看过了，也正因为如此，导致我做零几年的真题总觉得在背答案，就不想写了。王道配套的模拟题也好挺好的，主要是题目很新，课后题没有出现过，做起来比较舒服。</p>\n<p>现在想想，这四本书确实让我对计算机有了更深刻的理解，但这却只是开始，还有浩如烟海的技术等着我去了解学习。</p>\n<h2 id=\"英语学习\"><a href=\"#英语学习\" class=\"headerlink\" title=\"英语学习\"></a>英语学习</h2><p>英语是伴随考研始终的，单词一直要背，长难句一直要看，文章每天都要读。</p>\n<p>可能是因为我英语原来比较差吧，个人感觉英语提升对我的帮助是最大的，英文文章虽然说读起来还是比较费劲，但却没有以前的那种想读都读不懂的感觉了。挺好的。</p>\n<p>英语的学习也是伴随一生的。考研只考了读写译，还有听说需要自己学，这两点对交流来说是更重要的。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>考研让我懂了许多的知识，也磨砺了我的品格。</p>\n<p>宝剑锋从磨砺出，梅花香自苦寒来。</p>\n<p>一个更好的学位，不是终点，而是新的起点。复试加油。</p>\n<p>2021/1/23</p>\n<p>Dicer，于焦作</p>\n","site":{"data":{}},"excerpt":"<p>虽然说是考研总结，但其实大概想写一下我去年都做了些什么，做一个年度复盘，其中最重要的就是考研了，占据了去年大概八九个月的时间。</p>","more":"<h2 id=\"决定考研\"><a href=\"#决定考研\" class=\"headerlink\" title=\"决定考研\"></a>决定考研</h2><p>大三的人，无非几种选择：考研，考公，工作，出国。</p>\n<p>我以前只是纠结是考研还是工作。但是因为一个奇怪的想法：考研没考上还能去工作。说起来也好笑，这句话已经默认了考研就一定考不上，严密的逻辑应该是：考研没考上，还能找工作；考上了，读完研也能找工作；工作的时候也可以考研。因为身边的人的选择和一些信息，最后还是放弃了找工作，选择了考研。</p>\n<p>选择其实工作还是考研，其实也没有那么重要，有价值的人在什么地方都可以发挥自己的价值。相比选择，更重要的是坚持。但是选择有很重要，在这个时代，做互联网相关，可以说站在了风口上。</p>\n<p>我爱说一句话：尽人事，听天命。就像某地某年的语文作文题目说的一样：成功不只是努力，还有机遇也很重要。蛤曾经说过，自己不知道为什么，就坐在了现在的位子上，“组织上安排好了”</p>\n<h2 id=\"一个机遇\"><a href=\"#一个机遇\" class=\"headerlink\" title=\"一个机遇\"></a>一个机遇</h2><p>大概从二三月份开始初步进入复习吧，这个时候还是寒假，自己也不清楚复习的方法，只是在背单词，然后就是看书。</p>\n<p>看书，没错。这段时期疫情很严重，我没有地方去，家里也没有人，只有我自己在家。不知道是什么时候，偶尔打开了微信读书，看到了大刘的三体，鬼使神差的读了起来，上了瘾，三四天读完了三部曲。这是我第一次读长篇，很长很长，接近一百万字的书，但是读的酣畅淋漓。我迷上了书中构建的那个世界。</p>\n<p>有人说，世界上有两种人，一种是看过三体的，另一种没有。一本书可以快速打破你和另陌生人的隔阂，只需要几个字词。三体中这样的词很多：二向箔，智子，面壁人，执剑人，黑暗森林法则。不得不佩服大刘的脑洞，一本书中充斥着极致的幻想，而且逻辑严密。</p>\n<p>有传言说，大刘是误以为自己得了癌症，以为自己命不久矣，想在临死之前，把自己的巧思都留下了。最后得知是误诊。一个美好的巧合，也可以说是：机遇。为人类文明留下了如此璀璨的书籍。虽然有人说，三体中的许多巧思都可以拆成一本书，够大刘慢慢写一辈子了，但我还是觉得，那绝对抵不上一套三体，流芳百世。</p>\n<p>三体之后，就开始读各种各样的书，许多经典：1984、娱乐至死，不算有趣，也不丰富，只是符合这个时代；数学之美、从一到无穷大、上帝掷骰子吗？意外的有趣，引人深思。一只特立独行的猪、活着，名家经典，值得一读，但我觉得富贵的故事并没有多么可怜，只是一个纨绔子弟，散尽家财，幡然悔悟，命运多舛的故事。</p>\n<p>另一本大部头就是红楼梦了，看的时候废寝忘食，夜不能寐，辗转反侧。叹书中女子，义气刚节；怜书中女子，难逃时代命运；惜书中女子，终落凡尘。</p>\n<p>时常思考读书的意义，其实主要是文学作品，时间长了，书中的内容多已淡忘，读书时的感人肺腑、肝肠寸断也已忘记。只记得只言片语，大致情景。没有什么感觉了。</p>\n<p>太久没读书了，最近在忙找工作，之前考研也是忙得没有时间，读研的时候如果科研压力没那么大，还是希望能多读一些书籍。</p>\n<h2 id=\"无它，唯手熟而\"><a href=\"#无它，唯手熟而\" class=\"headerlink\" title=\"无它，唯手熟而\"></a>无它，唯手熟而</h2><p>四五月份是数学的时间，题海战术，一点一点的扣。我就记得自己看了张宇的基础班，刷了两边1800。</p>\n<p>这段时间过的很快，每天就只是做题。一杯茶一包烟，一道积分做一天。这话一点都不假，积分不会做是真的很久都做不出来。每天都把自己关在家里，屋子里窗户太小了，不知白天黑夜，不知雨雪风霜。</p>\n<p>感觉没能总结点东西，现在想起来，自己数学复习的太没有章法了，无章可循，别人学什么就跟着学什么。缺乏合理的规划，不过那个时候的我，也没有人能给我指点一二。</p>\n<p>数学学得慢，忘得可一点都不慢，距离考完试还不到一个月，我已经不知道自己当初学了什么了。痛心疾首。</p>\n<h2 id=\"408时间\"><a href=\"#408时间\" class=\"headerlink\" title=\"408时间\"></a>408时间</h2><p>暑假的重头戏是专业课，另一个150分。408综合科目多、知识点多、考察深入，难度很大。好在数据结构有一点基础，重难点是组成原理。</p>\n<p>在知乎上看推荐买了一本CS：APP，不到一百的价格，都说是神书。确实名不虚传，计算机中的数值表示用图表示得清清楚楚，Cache、段页式存储、虚拟内存讲的头头是道，很是受用。</p>\n<p>王道四本书看了两遍，真题没做完，只做了十几年的题目，但是因为王道后面的课后题大部分都出自真题，也算是都看过了，也正因为如此，导致我做零几年的真题总觉得在背答案，就不想写了。王道配套的模拟题也好挺好的，主要是题目很新，课后题没有出现过，做起来比较舒服。</p>\n<p>现在想想，这四本书确实让我对计算机有了更深刻的理解，但这却只是开始，还有浩如烟海的技术等着我去了解学习。</p>\n<h2 id=\"英语学习\"><a href=\"#英语学习\" class=\"headerlink\" title=\"英语学习\"></a>英语学习</h2><p>英语是伴随考研始终的，单词一直要背，长难句一直要看，文章每天都要读。</p>\n<p>可能是因为我英语原来比较差吧，个人感觉英语提升对我的帮助是最大的，英文文章虽然说读起来还是比较费劲，但却没有以前的那种想读都读不懂的感觉了。挺好的。</p>\n<p>英语的学习也是伴随一生的。考研只考了读写译，还有听说需要自己学，这两点对交流来说是更重要的。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>考研让我懂了许多的知识，也磨砺了我的品格。</p>\n<p>宝剑锋从磨砺出，梅花香自苦寒来。</p>\n<p>一个更好的学位，不是终点，而是新的起点。复试加油。</p>\n<p>2021/1/23</p>\n<p>Dicer，于焦作</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckou5hybr000669kjcyxp5tie","category_id":"ckou5hybr000569kj1mkjh6wf","_id":"ckou5hybz000e69kj7knge4uc"},{"post_id":"ckou5hybs000769kjhtsq9gii","category_id":"ckou5hybr000569kj1mkjh6wf","_id":"ckou5hyc1000i69kj3l6v001a"},{"post_id":"ckou5hybh000069kj769j2dw3","category_id":"ckou5hybr000569kj1mkjh6wf","_id":"ckou5hyc7000x69kj45go9nmm"},{"post_id":"ckou5hybh000069kj769j2dw3","category_id":"ckou5hyc2000k69kjh00v4wv6","_id":"ckou5hyc8000z69kjhjvi43l7"},{"post_id":"ckou5hybm000269kj39u8dmsk","category_id":"ckou5hybr000569kj1mkjh6wf","_id":"ckou5hyca001369kj7rcl1oum"},{"post_id":"ckou5hybm000269kj39u8dmsk","category_id":"ckou5hyc3000q69kj9nt4e95e","_id":"ckou5hyca001569kjeut77rhk"},{"post_id":"ckou5hybq000469kjbymg0xt3","category_id":"ckou5hybr000569kj1mkjh6wf","_id":"ckou5hycb001869kj6p67dj9e"},{"post_id":"ckou5hybq000469kjbymg0xt3","category_id":"ckou5hyc3000q69kj9nt4e95e","_id":"ckou5hycb001c69kj9d3shmn2"},{"post_id":"ckou5hyc2000m69kjfqio7c24","category_id":"ckou5hybr000569kj1mkjh6wf","_id":"ckou5hycc001g69kj40ou27xi"},{"post_id":"ckou5hyc2000m69kjfqio7c24","category_id":"ckou5hyc3000q69kj9nt4e95e","_id":"ckou5hycd001k69kj1ak04jz4"},{"post_id":"ckou5hyc4000s69kj3pk8ebyu","category_id":"ckou5hyca001669kj2k6x5k16","_id":"ckou5hycd001n69kj4i9oc1gl"},{"post_id":"ckou5hycc001i69kj7r7o7izi","category_id":"ckou5hybr000569kj1mkjh6wf","_id":"ckou5hycf001s69kj4ssm0fbt"},{"post_id":"ckou5hyc6000v69kjh3yf8ff7","category_id":"ckou5hycc001e69kj2a1k68h1","_id":"ckou5hycf001v69kj03u44rvo"},{"post_id":"ckou5hycf001u69kj3u6qacv6","category_id":"ckou5hybr000569kj1mkjh6wf","_id":"ckou5hyck002469kj2j2zfo8e"},{"post_id":"ckou5hych002169kjcvvo81yl","category_id":"ckou5hyca001669kj2k6x5k16","_id":"ckou5hycl002969kj9a3u1p7d"},{"post_id":"ckou5hyce001r69kj51kv7cvt","category_id":"ckou5hycg001x69kjakprgqwk","_id":"ckou5hycl002b69kjfhnc3lor"},{"post_id":"ckou5hycg001z69kj4ico87ei","category_id":"ckou5hyck002569kj0js8gw0c","_id":"ckou5hycl002d69kja4wlf9nr"},{"post_id":"ckou5hycz004369kj99wu63r3","category_id":"ckou5hyck002569kj0js8gw0c","_id":"ckou5hyd2004969kj5zpj5jtw"},{"post_id":"ckou5hyd1004469kjdzenhan1","category_id":"ckou5hyck002569kj0js8gw0c","_id":"ckou5hyd3004d69kj4hsq7u3h"},{"post_id":"ckou5hyd2004669kj7kc1gzed","category_id":"ckou5hycg001x69kjakprgqwk","_id":"ckou5hyd6004f69kj4ovyb95n"},{"post_id":"ckou5hyd4004e69kjcrdo7rrl","category_id":"ckou5hyck002569kj0js8gw0c","_id":"ckou5hyd6004j69kj2ljj0hr7"}],"PostTag":[{"post_id":"ckou5hybh000069kj769j2dw3","tag_id":"ckou5hybp000369kj95x7cknk","_id":"ckou5hybx000a69kjhton95lh"},{"post_id":"ckou5hybs000769kjhtsq9gii","tag_id":"ckou5hybp000369kj95x7cknk","_id":"ckou5hybz000c69kj7uhhg0hm"},{"post_id":"ckou5hybm000269kj39u8dmsk","tag_id":"ckou5hybs000869kjajyj0bbg","_id":"ckou5hyc3000n69kjciif3y8y"},{"post_id":"ckou5hybm000269kj39u8dmsk","tag_id":"ckou5hybz000g69kj4mqa0mg6","_id":"ckou5hyc3000p69kj4xo0ew8v"},{"post_id":"ckou5hybq000469kjbymg0xt3","tag_id":"ckou5hyc2000l69kj15o365nj","_id":"ckou5hycb001b69kj3mzq8h0n"},{"post_id":"ckou5hybq000469kjbymg0xt3","tag_id":"ckou5hyc4000r69kjem3pfi9e","_id":"ckou5hycc001f69kj16cockr7"},{"post_id":"ckou5hybq000469kjbymg0xt3","tag_id":"ckou5hyc7000w69kjdkwqedwm","_id":"ckou5hycd001j69kj2b4p59yr"},{"post_id":"ckou5hybq000469kjbymg0xt3","tag_id":"ckou5hyc8001269kj8mbjht52","_id":"ckou5hycd001m69kjekry4h69"},{"post_id":"ckou5hybr000669kjcyxp5tie","tag_id":"ckou5hycb001969kjegv49bhg","_id":"ckou5hyce001q69kj32debdbp"},{"post_id":"ckou5hybr000669kjcyxp5tie","tag_id":"ckou5hycc001h69kj2nm746rt","_id":"ckou5hycf001t69kjdd2t0s9f"},{"post_id":"ckou5hybr000669kjcyxp5tie","tag_id":"ckou5hybp000369kj95x7cknk","_id":"ckou5hycg001y69kje4le8jgr"},{"post_id":"ckou5hycd001o69kj0cqnap60","tag_id":"ckou5hycc001h69kj2nm746rt","_id":"ckou5hych002069kjee4942x6"},{"post_id":"ckou5hybx000b69kjb0m80b8n","tag_id":"ckou5hycd001p69kj4r945768","_id":"ckou5hyck002369kj01zq3zhf"},{"post_id":"ckou5hycf001u69kj3u6qacv6","tag_id":"ckou5hycd001p69kj4r945768","_id":"ckou5hycl002669kj85ot515m"},{"post_id":"ckou5hybz000d69kj76qbfcse","tag_id":"ckou5hycb001969kjegv49bhg","_id":"ckou5hycl002869kjgr6x7j6r"},{"post_id":"ckou5hyc0000h69kj2znmgo2x","tag_id":"ckou5hycc001h69kj2nm746rt","_id":"ckou5hycl002a69kjgf2cb88d"},{"post_id":"ckou5hyc1000j69kj1w9y9a0n","tag_id":"ckou5hycl002769kjgxcvanep","_id":"ckou5hycm002f69kj0mnf1lr5"},{"post_id":"ckou5hyc1000j69kj1w9y9a0n","tag_id":"ckou5hycd001p69kj4r945768","_id":"ckou5hycm002g69kjbw5n7pj6"},{"post_id":"ckou5hyc2000m69kjfqio7c24","tag_id":"ckou5hycl002e69kj2e7uaerl","_id":"ckou5hycn002m69kj4ad89owy"},{"post_id":"ckou5hyc2000m69kjfqio7c24","tag_id":"ckou5hycm002h69kj32ki4shy","_id":"ckou5hycn002n69kj2xwl3l95"},{"post_id":"ckou5hyc2000m69kjfqio7c24","tag_id":"ckou5hycm002i69kjhf2p8bij","_id":"ckou5hyco002p69kj79qugxox"},{"post_id":"ckou5hyc2000m69kjfqio7c24","tag_id":"ckou5hycb001969kjegv49bhg","_id":"ckou5hycp002q69kj1hws6qyk"},{"post_id":"ckou5hyc2000m69kjfqio7c24","tag_id":"ckou5hycd001p69kj4r945768","_id":"ckou5hycp002s69kja3m698nj"},{"post_id":"ckou5hyc3000o69kj8zg0gskh","tag_id":"ckou5hycm002l69kjcv6o7yu7","_id":"ckou5hycp002t69kj1fa2h38n"},{"post_id":"ckou5hyc3000o69kj8zg0gskh","tag_id":"ckou5hycn002o69kjg3zwa8aq","_id":"ckou5hycp002v69kj18ewep0l"},{"post_id":"ckou5hyc4000s69kj3pk8ebyu","tag_id":"ckou5hycp002r69kj72aff6m6","_id":"ckou5hycq002y69kjdj15dqjv"},{"post_id":"ckou5hyc4000s69kj3pk8ebyu","tag_id":"ckou5hycp002u69kjcv2ydt7a","_id":"ckou5hycq002z69kjaggn0w26"},{"post_id":"ckou5hyc4000s69kj3pk8ebyu","tag_id":"ckou5hycq002w69kjfgn41rg3","_id":"ckou5hycr003169kj4132eqcv"},{"post_id":"ckou5hyc5000t69kj6ibzcv23","tag_id":"ckou5hycq002x69kjb3qrexvn","_id":"ckou5hycr003369kj0ljebxz3"},{"post_id":"ckou5hyc5000t69kj6ibzcv23","tag_id":"ckou5hycd001p69kj4r945768","_id":"ckou5hycr003469kjapm2b0k7"},{"post_id":"ckou5hyc6000v69kjh3yf8ff7","tag_id":"ckou5hycr003269kj3unkh4a4","_id":"ckou5hycr003669kjet7t7o8t"},{"post_id":"ckou5hyc7000y69kj683j5h95","tag_id":"ckou5hycr003569kj55rs87ap","_id":"ckou5hycr003869kj2hss575t"},{"post_id":"ckou5hyc8001169kj3d5wf69z","tag_id":"ckou5hycr003769kj31149iuz","_id":"ckou5hycs003c69kjbgvy4hz8"},{"post_id":"ckou5hyc8001169kj3d5wf69z","tag_id":"ckou5hycr003969kjalt4cedr","_id":"ckou5hycs003d69kjdxs4dk1a"},{"post_id":"ckou5hyc8001169kj3d5wf69z","tag_id":"ckou5hycr003a69kj91dxfqk2","_id":"ckou5hycs003f69kj9xbf7yl5"},{"post_id":"ckou5hyca001469kj0y1n98co","tag_id":"ckou5hycc001h69kj2nm746rt","_id":"ckou5hycs003h69kjfy5cfsi1"},{"post_id":"ckou5hyca001469kj0y1n98co","tag_id":"ckou5hycs003e69kjdaip50mm","_id":"ckou5hycs003i69kj1px93d2q"},{"post_id":"ckou5hyca001469kj0y1n98co","tag_id":"ckou5hybz000g69kj4mqa0mg6","_id":"ckou5hyct003k69kj5n8ahbcj"},{"post_id":"ckou5hyca001769kjbfzx583l","tag_id":"ckou5hycs003g69kj9wsabfuj","_id":"ckou5hyct003l69kjbme6a3b2"},{"post_id":"ckou5hycb001a69kjaivv79m7","tag_id":"ckou5hycr003a69kj91dxfqk2","_id":"ckou5hyct003n69kj7azhf7yi"},{"post_id":"ckou5hycc001d69kjgkb8euwv","tag_id":"ckou5hyct003m69kjb0690u0u","_id":"ckou5hyct003p69kj5fsdes42"},{"post_id":"ckou5hycc001d69kjgkb8euwv","tag_id":"ckou5hybz000g69kj4mqa0mg6","_id":"ckou5hyct003q69kjdgb15vhf"},{"post_id":"ckou5hycc001i69kj7r7o7izi","tag_id":"ckou5hybs000869kjajyj0bbg","_id":"ckou5hycu003s69kjhfo568ci"},{"post_id":"ckou5hycc001i69kj7r7o7izi","tag_id":"ckou5hycc001h69kj2nm746rt","_id":"ckou5hycu003t69kjh54135on"},{"post_id":"ckou5hycc001i69kj7r7o7izi","tag_id":"ckou5hybz000g69kj4mqa0mg6","_id":"ckou5hycu003v69kj4894fyak"},{"post_id":"ckou5hycd001l69kj9pq55rd1","tag_id":"ckou5hycb001969kjegv49bhg","_id":"ckou5hycu003w69kj4uo2gd4z"},{"post_id":"ckou5hycd001l69kj9pq55rd1","tag_id":"ckou5hyct003r69kjdjskb6r9","_id":"ckou5hycu003y69kjgdzc49ym"},{"post_id":"ckou5hyce001r69kj51kv7cvt","tag_id":"ckou5hycu003u69kjcvz955tp","_id":"ckou5hycv003z69kj90y4e5hy"},{"post_id":"ckou5hycg001z69kj4ico87ei","tag_id":"ckou5hycu003x69kjfnuzcjrk","_id":"ckou5hycv004169kj81js79tt"},{"post_id":"ckou5hych002169kjcvvo81yl","tag_id":"ckou5hycv004069kjew4t9vmh","_id":"ckou5hycv004269kj899z9kp1"},{"post_id":"ckou5hycz004369kj99wu63r3","tag_id":"ckou5hybp000369kj95x7cknk","_id":"ckou5hyd1004569kj9n7xcvh5"},{"post_id":"ckou5hyd1004469kjdzenhan1","tag_id":"ckou5hycs003g69kj9wsabfuj","_id":"ckou5hyd2004769kjdlincyyg"},{"post_id":"ckou5hyd1004469kjdzenhan1","tag_id":"ckou5hycp002u69kjcv2ydt7a","_id":"ckou5hyd2004b69kj3n3iaa3j"},{"post_id":"ckou5hyd4004e69kjcrdo7rrl","tag_id":"ckou5hycr003269kj3unkh4a4","_id":"ckou5hyd6004h69kj0xwsex2z"},{"post_id":"ckou5hyd2004669kj7kc1gzed","tag_id":"ckou5hyd2004a69kje8jc7a5y","_id":"ckou5hyd6004i69kje6z96y4x"},{"post_id":"ckou5hyd2004669kj7kc1gzed","tag_id":"ckou5hycu003x69kjfnuzcjrk","_id":"ckou5hyd7004l69kj4qsre2i1"},{"post_id":"ckou5hyd2004869kj2eqm7zpq","tag_id":"ckou5hyd6004g69kj1q7u2k4c","_id":"ckou5hyd7004m69kj09body81"},{"post_id":"ckou5hyd3004c69kj60e68y0c","tag_id":"ckou5hyd7004k69kjfibpfmre","_id":"ckou5hyd7004p69kjch4n4n7l"},{"post_id":"ckou5hyd3004c69kj60e68y0c","tag_id":"ckou5hyd7004n69kjc6wuhy3c","_id":"ckou5hyd7004q69kjhb921298"},{"post_id":"ckou5hyd3004c69kj60e68y0c","tag_id":"ckou5hyd7004o69kjau25h6er","_id":"ckou5hyd7004r69kj1al1fbwl"}],"Tag":[{"name":"旅游","_id":"ckou5hybp000369kj95x7cknk"},{"name":"点分治","_id":"ckou5hybs000869kjajyj0bbg"},{"name":"图论","_id":"ckou5hybz000g69kj4mqa0mg6"},{"name":"中国剩余定理","_id":"ckou5hyc2000l69kj15o365nj"},{"name":"二维偏序","_id":"ckou5hyc4000r69kjem3pfi9e"},{"name":"单调队列","_id":"ckou5hyc7000w69kjdkwqedwm"},{"name":"树形动规","_id":"ckou5hyc8001269kj8mbjht52"},{"name":"数据结构","_id":"ckou5hycb001969kjegv49bhg"},{"name":"动态规划","_id":"ckou5hycc001h69kj2nm746rt"},{"name":"数论","_id":"ckou5hycd001p69kj4r945768"},{"name":"拉格朗日插值法","_id":"ckou5hycl002769kjgxcvanep"},{"name":"树状数组","_id":"ckou5hycl002e69kj2e7uaerl"},{"name":"欧拉定理","_id":"ckou5hycm002h69kj32ki4shy"},{"name":"欧拉函数","_id":"ckou5hycm002i69kjhf2p8bij"},{"name":"MySQL","_id":"ckou5hycm002l69kjcv6o7yu7"},{"name":"Python","_id":"ckou5hycn002o69kjg3zwa8aq"},{"name":"SSL","_id":"ckou5hycp002r69kj72aff6m6"},{"name":"Nginx","_id":"ckou5hycp002u69kjcv2ydt7a"},{"name":"HTTPS","_id":"ckou5hycq002w69kjfgn41rg3"},{"name":"拉格朗日乘数法","_id":"ckou5hycq002x69kjb3qrexvn"},{"name":"考研","_id":"ckou5hycr003269kj3unkh4a4"},{"name":"几何","_id":"ckou5hycr003569kj55rs87ap"},{"name":"IDA*","_id":"ckou5hycr003769kj31149iuz"},{"name":"启发式搜索","_id":"ckou5hycr003969kjalt4cedr"},{"name":"搜索","_id":"ckou5hycr003a69kj91dxfqk2"},{"name":"基环树","_id":"ckou5hycs003e69kjdaip50mm"},{"name":"Hexo","_id":"ckou5hycs003g69kj9wsabfuj"},{"name":"LCA","_id":"ckou5hyct003m69kjb0690u0u"},{"name":"线段树","_id":"ckou5hyct003r69kjdjskb6r9"},{"name":"sklearn","_id":"ckou5hycu003u69kjcvz955tp"},{"name":"红楼梦","_id":"ckou5hycu003x69kjfnuzcjrk"},{"name":"HTTP","_id":"ckou5hycv004069kjew4t9vmh"},{"name":"word2vec","_id":"ckou5hyd2004a69kje8jc7a5y"},{"name":"Web","_id":"ckou5hyd6004g69kj1q7u2k4c"},{"name":"并发","_id":"ckou5hyd7004k69kjfibpfmre"},{"name":"模式设计","_id":"ckou5hyd7004n69kjc6wuhy3c"},{"name":"Go","_id":"ckou5hyd7004o69kjau25h6er"}]}}